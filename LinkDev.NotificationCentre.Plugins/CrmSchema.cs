//         Project / File: LinkDev.NotificationCentre.Plugins / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace LinkDev.NotificationCentre.Plugins
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Email"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Email> EmailSet
		{
			get
			{
				return this.CreateQuery<Email>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="GenericConfiguration"/> entities.
		/// </summary>
		public System.Linq.IQueryable<GenericConfiguration> GenericConfigurationSet
		{
			get
			{
				return this.CreateQuery<GenericConfiguration>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationMessage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationMessage> NotificationMessageSet
		{
			get
			{
				return this.CreateQuery<NotificationMessage>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationMessageRole"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationMessageRole> NotificationMessageRoleSet
		{
			get
			{
				return this.CreateQuery<NotificationMessageRole>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationMessageTeam"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationMessageTeam> NotificationMessageTeamSet
		{
			get
			{
				return this.CreateQuery<NotificationMessageTeam>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationMessageUser"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationMessageUser> NotificationMessageUserSet
		{
			get
			{
				return this.CreateQuery<NotificationMessageUser>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationRead"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationRead> NotificationReadSet
		{
			get
			{
				return this.CreateQuery<NotificationRead>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="User"/> entities.
		/// </summary>
		public System.Linq.IQueryable<User> UserSet
		{
			get
			{
				return this.CreateQuery<User>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Task"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Task> TaskSet
		{
			get
			{
				return this.CreateQuery<Task>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Team"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Team> TeamSet
		{
			get
			{
				return this.CreateQuery<Team>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		#region Attributes

		[AttributeLogicalName("activitypartyid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityPartyId == null || ActivityPartyId == Guid.Empty) ? base.Id : ActivityPartyId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activitypartyid");
                    base.Id = value;
                } else {
				    ActivityPartyId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? Activity
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Activity");
                if (value != null)
				    SetAttributeValue("activityid", new EntityReference("activitypointer", value.Value));
                else
					SetAttributeValue("activityid", value);
				OnPropertyChanged("Activity");
			}
		}

        public string ActivityName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ActivityPartyId'.<br />
        /// Unique identifier of the activity party.
        /// </summary>
		[AttributeLogicalName("activitypartyid")]
		public Guid? ActivityPartyId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activitypartyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitypartyid"))
				    value = (Guid?) backupAttributeCollection["activitypartyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityPartyId");
                if (value != null)
					SetAttributeValue("activitypartyid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityPartyId");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'AddressUsed'.<br />
        /// Email address to which an email is delivered, and which is associated with the target entity.
        /// </summary>
		[AttributeLogicalName("addressused"), MaxLength(200)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("addressused");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressused"))
				    value = (string) backupAttributeCollection["addressused"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("addressused", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'AddressUsedEmailColumnNumber'.<br />
        /// Email address column number from associated party.
        /// </summary>
		[AttributeLogicalName("addressusedemailcolumnnumber"), InRange("1", "2147483647", typeof(int))]
		public int? Emailcolumnnumberofparty
		{
			get
			{
				var value = GetAttributeValue<int?>("addressusedemailcolumnnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressusedemailcolumnnumber"))
				    value = (int?) backupAttributeCollection["addressusedemailcolumnnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Emailcolumnnumberofparty");
					SetAttributeValue("addressusedemailcolumnnumber", value);
				OnPropertyChanged("Emailcolumnnumberofparty");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEmail'.<br />
        /// Information about whether to allow sending email to the activity party.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Information about whether to allow sending faxes to the activity party.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Information about whether to allow phone calls to the lead.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Information about whether to allow sending postal mail to the lead.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowPostalMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPostalMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowPostalMails");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'Effort'.<br />
        /// Amount of effort used by the resource in a service appointment activity.
        /// </summary>
		[AttributeLogicalName("effort"), InRange("0", "1000000000", typeof(double))]
		public double? Effort
		{
			get
			{
				var value = GetAttributeValue<double?>("effort");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("effort"))
				    value = (double?) backupAttributeCollection["effort"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Effort");
					SetAttributeValue("effort", value);
				OnPropertyChanged("Effort");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ExchangeEntryId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("exchangeentryid"), MaxLength(1024)]
		public string ExchangeEntry
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeentryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeentryid"))
				    value = (string) backupAttributeCollection["exchangeentryid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeEntry");
					SetAttributeValue("exchangeentryid", value);
				OnPropertyChanged("ExchangeEntry");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public AppointmentTypeEnum? AppointmentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (AppointmentTypeEnum?) null : (AppointmentTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AppointmentType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("AppointmentType");
			}
		}

        /// <summary>
        ///  
		/// 'IsPartyDeleted'.<br />
        /// Information about whether the underlying entity record is deleted.
        /// </summary>
		[AttributeLogicalName("ispartydeleted")]
		public bool? IsPartyDeleted
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispartydeleted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispartydeleted"))
				    value = (bool?) backupAttributeCollection["ispartydeleted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPartyDeleted");
					SetAttributeValue("ispartydeleted", value);
				OnPropertyChanged("IsPartyDeleted");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity_party.
        /// </summary>
		[AttributeLogicalName("ownerid"), Required]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipationTypeMask'.<br />
        /// Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.
        /// </summary>
		[AttributeLogicalName("participationtypemask")]
		public ParticipationTypeEnum? ParticipationType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("participationtypemask");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participationtypemask"))
				    value = (OptionSetValue) backupAttributeCollection["participationtypemask"];
                return value == null ? (ParticipationTypeEnum?) null : (ParticipationTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ParticipationType");
                if (value != null)
				    SetAttributeValue("participationtypemask", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("participationtypemask", value);
				OnPropertyChanged("ParticipationType");
			}
		}

        /// <summary>
        ///  
		/// 'PartyId'.<br />
        /// Unique identifier of the party associated with the activity.
        /// </summary>
		[AttributeLogicalName("partyid")]
		public EntityReference Party
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Party");
					SetAttributeValue("partyid", value);
				OnPropertyChanged("Party");
			}
		}

        public string PartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ResourceSpecId'.<br />
        /// Unique identifier of the resource specification for the activity party.
        /// </summary>
		[AttributeLogicalName("resourcespecid")]
		public Guid? ResourceSpecification
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResourceSpecification");
                if (value != null)
				    SetAttributeValue("resourcespecid", new EntityReference("resourcespec", value.Value));
                else
					SetAttributeValue("resourcespecid", value);
				OnPropertyChanged("ResourceSpecification");
			}
		}

        public string ResourceSpecificationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? ScheduledEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledEnd");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("ScheduledEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? ScheduledStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledStart");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("ScheduledStart");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'email_activity_parties'
		/// </summary>
		[RelationshipSchemaName("email_activity_parties"), AttributeLogicalName("activityid")]
		public Email EmailAsActivity
		{
			get
			{
				return GetRelatedEntity<Email>("email_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("EmailAsActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Email>("email_activity_parties", null, value);
				OnPropertyChanged("EmailAsActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_activity_parties'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_activity_parties"), AttributeLogicalName("activityid")]
		public NotificationMessage NotificationMessageAsActivity
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_notificationmessage_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_notificationmessage_activity_parties", null, value);
				OnPropertyChanged("NotificationMessageAsActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'system_user_activity_parties'
		/// </summary>
		[RelationshipSchemaName("system_user_activity_parties"), AttributeLogicalName("partyid")]
		public User UserAsParty
		{
			get
			{
				return GetRelatedEntity<User>("system_user_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("UserAsParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("system_user_activity_parties", null, value);
				OnPropertyChanged("UserAsParty");
			}
		}
		
		/// <summary>
		/// N:1, 'task_activity_parties'
		/// </summary>
		[RelationshipSchemaName("task_activity_parties"), AttributeLogicalName("activityid")]
		public Task TaskAsActivity
		{
			get
			{
				return GetRelatedEntity<Task>("task_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("TaskAsActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Task>("task_activity_parties", null, value);
				OnPropertyChanged("TaskAsActivity");
			}
		}
		
		public static class RelationNames {
			public static RelationName EmailAsActivity = new RelationName("EmailAsActivity");
			public static RelationName NotificationMessageAsActivity = new RelationName("NotificationMessageAsActivity");
			public static RelationName UserAsParty = new RelationName("UserAsParty");
			public static RelationName TaskAsActivity = new RelationName("TaskAsActivity");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["EmailAsActivity"] = new object[] { "EmailAsActivity", "email", "activityparty", "activityid", "activityid", "activitypartyid", "activitypartyid", "email_activity_parties", typeof (Email) };
			relationProperties["NotificationMessageAsActivity"] = new object[] { "NotificationMessageAsActivity", "ldv_notificationmessage", "activityparty", "activityid", "activityid", "activitypartyid", "activitypartyid", "ldv_notificationmessage_activity_parties", typeof (NotificationMessage) };
			relationProperties["UserAsParty"] = new object[] { "UserAsParty", "systemuser", "activityparty", "systemuserid", "partyid", "activitypartyid", "activitypartyid", "system_user_activity_parties", typeof (User) };
			relationProperties["TaskAsActivity"] = new object[] { "TaskAsActivity", "task", "activityparty", "activityid", "activityid", "activitypartyid", "activitypartyid", "task_activity_parties", typeof (Task) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ActivityParty(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activitypartyid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPostalMails

		public enum DonotallowPostalMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region AppointmentType

		public enum AppointmentTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsPartyDeleted

		public enum IsPartyDeletedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParticipationType

		public enum ParticipationTypeEnum
		{
			[EnumMember]Sender = 1,
			[EnumMember]ToRecipient = 2,
			[EnumMember]CCRecipient = 3,
			[EnumMember]BCCRecipient = 4,
			[EnumMember]Requiredattendee = 5,
			[EnumMember]Optionalattendee = 6,
			[EnumMember]Organizer = 7,
			[EnumMember]Regarding = 8,
			[EnumMember]Owner = 9,
			[EnumMember]Resource = 10,
			[EnumMember]Customer = 11,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region Email

	/// <summary>
	/// 'Email'.<br />
	/// Activity that is delivered using email protocols.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("email")]
	public partial class Email : GeneratedEntity<Email.RelationName>
	{
		
		public Email() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Email";
		public const string SchemaName = "Email";
		public const string EntityLogicalName = "email";
		public const int EntityTypeCode = 4202;
		
		#region Attributes

		[AttributeLogicalName("activityid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (EmailMessageId == null || EmailMessageId == Guid.Empty) ? base.Id : EmailMessageId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activityid");
                    base.Id = value;
                } else {
				    EmailMessageId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=8192] 
		/// 'ActivityAdditionalParams'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("activityadditionalparams"), MaxLength(8192)]
		public string AdditionalParameters
		{
			get
			{
				var value = GetAttributeValue<string>("activityadditionalparams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityadditionalparams"))
				    value = (string) backupAttributeCollection["activityadditionalparams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AdditionalParameters");
					SetAttributeValue("activityadditionalparams", value);
				OnPropertyChanged("AdditionalParameters");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the email activity.
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? EmailMessageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (Guid?) backupAttributeCollection["activityid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailMessageId");
                if (value != null)
					SetAttributeValue("activityid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("EmailMessageId");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityTypeCode'.<br />
        /// Shows the type of activity.
        /// </summary>
		[AttributeLogicalName("activitytypecode")]
		public string ActivityType
		{
			get
			{
				var value = GetAttributeValue<string>("activitytypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitytypecode"))
				    value = (string) backupAttributeCollection["activitytypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityType");
					SetAttributeValue("activitytypecode", value);
				OnPropertyChanged("ActivityType");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ActualDurationMinutes'.<br />
        /// Type the number of minutes spent creating and sending the email. The duration is used in reporting.
        /// </summary>
		[AttributeLogicalName("actualdurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? Duration
		{
			get
			{
				var value = GetAttributeValue<int?>("actualdurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualdurationminutes"))
				    value = (int?) backupAttributeCollection["actualdurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Duration");
					SetAttributeValue("actualdurationminutes", value);
				OnPropertyChanged("Duration");
			}
		}

        /// <summary>
        ///  
		/// 'ActualEnd'.<br />
        /// Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.
        /// </summary>
		[AttributeLogicalName("actualend")]
		public DateTime? ActualEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualend"))
				    value = (DateTime?) backupAttributeCollection["actualend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualEnd");
					SetAttributeValue("actualend", value);
				OnPropertyChanged("ActualEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ActualStart'.<br />
        /// Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.
        /// </summary>
		[AttributeLogicalName("actualstart")]
		public DateTime? ActualStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualstart"))
				    value = (DateTime?) backupAttributeCollection["actualstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualStart");
					SetAttributeValue("actualstart", value);
				OnPropertyChanged("ActualStart");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'AttachmentCount'.<br />
        /// Shows the umber of attachments of the email message.
        /// </summary>
		[AttributeLogicalName("attachmentcount"), InRange("0", "2147483647", typeof(int))]
		public int? AttachmentCount
		{
			get
			{
				var value = GetAttributeValue<int?>("attachmentcount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("attachmentcount"))
				    value = (int?) backupAttributeCollection["attachmentcount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AttachmentCount");
					SetAttributeValue("attachmentcount", value);
				OnPropertyChanged("AttachmentCount");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'AttachmentOpenCount'.<br />
        /// Shows the number of times an email attachment has been viewed.
        /// </summary>
		[AttributeLogicalName("attachmentopencount"), InRange("0", "2147483647", typeof(int))]
		public int? AttachmentViewCount
		{
			get
			{
				var value = GetAttributeValue<int?>("attachmentopencount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("attachmentopencount"))
				    value = (int?) backupAttributeCollection["attachmentopencount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AttachmentViewCount");
					SetAttributeValue("attachmentopencount", value);
				OnPropertyChanged("AttachmentViewCount");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'BaseConversationIndexHash'.<br />
        /// Hash of base of conversation index.
        /// </summary>
		[AttributeLogicalName("baseconversationindexhash"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ConversationIndexHash
		{
			get
			{
				var value = GetAttributeValue<int?>("baseconversationindexhash");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("baseconversationindexhash"))
				    value = (int?) backupAttributeCollection["baseconversationindexhash"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ConversationIndexHash");
					SetAttributeValue("baseconversationindexhash", value);
				OnPropertyChanged("ConversationIndexHash");
			}
		}

        /// <summary>
        ///  
		/// 'bcc'.<br />
        /// Enter the recipients that are included on the email distribution, but are not displayed to other recipients.
        /// </summary>
		[AttributeLogicalName("bcc")]
		public ActivityParty[] Bcc
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("bcc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bcc"))
				    collection = (EntityCollection) backupAttributeCollection["bcc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Bcc");
				SetAttributeValue("bcc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Bcc");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Category'.<br />
        /// Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.
        /// </summary>
		[AttributeLogicalName("category"), MaxLength(250)]
		public string Category
		{
			get
			{
				var value = GetAttributeValue<string>("category");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("category"))
				    value = (string) backupAttributeCollection["category"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Category");
					SetAttributeValue("category", value);
				OnPropertyChanged("Category");
			}
		}

        /// <summary>
        ///  
		/// 'cc'.<br />
        /// Enter the recipients that should be copied on the email.
        /// </summary>
		[AttributeLogicalName("cc")]
		public ActivityParty[] Cc
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("cc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("cc"))
				    collection = (EntityCollection) backupAttributeCollection["cc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Cc");
				SetAttributeValue("cc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Cc");
			}
		}

        /// <summary>
        ///  
		/// 'Compressed'.<br />
        /// Indicates if the body is compressed.
        /// </summary>
		[AttributeLogicalName("compressed")]
		public bool? Compression
		{
			get
			{
				var value = GetAttributeValue<bool?>("compressed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("compressed"))
				    value = (bool?) backupAttributeCollection["compressed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Compression");
					SetAttributeValue("compressed", value);
				OnPropertyChanged("Compression");
			}
		}

        /// <summary>
        /// [MaximumLength=2048] 
		/// 'ConversationIndex'.<br />
        /// Identifier for all the email responses for this conversation.
        /// </summary>
		[AttributeLogicalName("conversationindex"), MaxLength(2048)]
		public string ConversationIndex
		{
			get
			{
				var value = GetAttributeValue<string>("conversationindex");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("conversationindex"))
				    value = (string) backupAttributeCollection["conversationindex"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ConversationIndex");
					SetAttributeValue("conversationindex", value);
				OnPropertyChanged("ConversationIndex");
			}
		}

        /// <summary>
        ///  
		/// 'ConversationTrackingId'.<br />
        /// Conversation Tracking Id.
        /// </summary>
		[AttributeLogicalName("conversationtrackingid")]
		public Guid? ConversationTrackingId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("conversationtrackingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("conversationtrackingid"))
				    value = (Guid?) backupAttributeCollection["conversationtrackingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ConversationTrackingId");
					SetAttributeValue("conversationtrackingid", value);
				OnPropertyChanged("ConversationTrackingId");
			}
		}

        /// <summary>
        ///  
		/// 'CorrelationMethod'.<br />
        /// Shows how an email is matched to an existing email in Microsoft Dynamics 365. For system use only.
        /// </summary>
		[AttributeLogicalName("correlationmethod")]
		public CorrelationMethodEnum? CorrelationMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("correlationmethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("correlationmethod"))
				    value = (OptionSetValue) backupAttributeCollection["correlationmethod"];
                return value == null ? (CorrelationMethodEnum?) null : (CorrelationMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CorrelationMethod");
                if (value != null)
				    SetAttributeValue("correlationmethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("correlationmethod", value);
				OnPropertyChanged("CorrelationMethod");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DelayedEmailSendTime'.<br />
        /// Enter the expected date and time when email will be sent.
        /// </summary>
		[AttributeLogicalName("delayedemailsendtime")]
		public DateTime? DelaySend
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("delayedemailsendtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("delayedemailsendtime"))
				    value = (DateTime?) backupAttributeCollection["delayedemailsendtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DelaySend");
					SetAttributeValue("delayedemailsendtime", value);
				OnPropertyChanged("DelaySend");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'DeliveryAttempts'.<br />
        /// Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.
        /// </summary>
		[AttributeLogicalName("deliveryattempts"), InRange("0", "1000000000", typeof(int))]
		public int? NoofDeliveryAttempts
		{
			get
			{
				var value = GetAttributeValue<int?>("deliveryattempts");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliveryattempts"))
				    value = (int?) backupAttributeCollection["deliveryattempts"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NoofDeliveryAttempts");
					SetAttributeValue("deliveryattempts", value);
				OnPropertyChanged("NoofDeliveryAttempts");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryPriorityCode'.<br />
        /// Select the priority of delivery of the email to the email server.
        /// </summary>
		[AttributeLogicalName("deliveryprioritycode")]
		public DeliveryPriorityEnum? DeliveryPriority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("deliveryprioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliveryprioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["deliveryprioritycode"];
                return value == null ? (DeliveryPriorityEnum?) null : (DeliveryPriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DeliveryPriority");
                if (value != null)
				    SetAttributeValue("deliveryprioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("deliveryprioritycode", value);
				OnPropertyChanged("DeliveryPriority");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryReceiptRequested'.<br />
        /// Select whether the sender should receive confirmation that the email was delivered.
        /// </summary>
		[AttributeLogicalName("deliveryreceiptrequested")]
		public bool? DeliveryReceiptRequested
		{
			get
			{
				var value = GetAttributeValue<bool?>("deliveryreceiptrequested");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliveryreceiptrequested"))
				    value = (bool?) backupAttributeCollection["deliveryreceiptrequested"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DeliveryReceiptRequested");
					SetAttributeValue("deliveryreceiptrequested", value);
				OnPropertyChanged("DeliveryReceiptRequested");
			}
		}

        /// <summary>
        /// [MaximumLength=1073741823] 
		/// 'Description'.<br />
        /// Type the greeting and message text of the email.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(1073741823)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        ///  
		/// 'DirectionCode'.<br />
        /// Select the direction of the email as incoming or outbound.
        /// </summary>
		[AttributeLogicalName("directioncode")]
		public bool? Direction
		{
			get
			{
				var value = GetAttributeValue<bool?>("directioncode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("directioncode"))
				    value = (bool?) backupAttributeCollection["directioncode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Direction");
					SetAttributeValue("directioncode", value);
				OnPropertyChanged("Direction");
			}
		}

        /// <summary>
        ///  
		/// 'EmailReminderExpiryTime'.<br />
        /// Shows the date and time when an email reminder expires.
        /// </summary>
		[AttributeLogicalName("emailreminderexpirytime")]
		public DateTime? EmailReminderExpiryTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("emailreminderexpirytime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailreminderexpirytime"))
				    value = (DateTime?) backupAttributeCollection["emailreminderexpirytime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailReminderExpiryTime");
					SetAttributeValue("emailreminderexpirytime", value);
				OnPropertyChanged("EmailReminderExpiryTime");
			}
		}

        /// <summary>
        ///  
		/// 'EmailReminderStatus'.<br />
        /// Shows the status of the email reminder.
        /// </summary>
		[AttributeLogicalName("emailreminderstatus")]
		public EmailReminderStatusEnum? EmailReminderStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailreminderstatus");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailreminderstatus"))
				    value = (OptionSetValue) backupAttributeCollection["emailreminderstatus"];
                return value == null ? (EmailReminderStatusEnum?) null : (EmailReminderStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("EmailReminderStatus");
                if (value != null)
				    SetAttributeValue("emailreminderstatus", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailreminderstatus", value);
				OnPropertyChanged("EmailReminderStatus");
			}
		}

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'EmailReminderText'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("emailremindertext"), MaxLength(1250)]
		public string EmailReminderText
		{
			get
			{
				var value = GetAttributeValue<string>("emailremindertext");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailremindertext"))
				    value = (string) backupAttributeCollection["emailremindertext"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailReminderText");
					SetAttributeValue("emailremindertext", value);
				OnPropertyChanged("EmailReminderText");
			}
		}

        /// <summary>
        ///  
		/// 'EmailReminderType'.<br />
        /// Shows the type of the email reminder.
        /// </summary>
		[AttributeLogicalName("emailremindertype")]
		public EmailReminderTypeEnum? EmailReminderType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailremindertype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailremindertype"))
				    value = (OptionSetValue) backupAttributeCollection["emailremindertype"];
                return value == null ? (EmailReminderTypeEnum?) null : (EmailReminderTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("EmailReminderType");
                if (value != null)
				    SetAttributeValue("emailremindertype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailremindertype", value);
				OnPropertyChanged("EmailReminderType");
			}
		}

        /// <summary>
        ///  
		/// 'EmailSender'.<br />
        /// Shows the sender of the email.
        /// </summary>
		[AttributeLogicalName("emailsender")]
		public EntityReference Sender
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("emailsender");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailsender"))
				    value = (EntityReference) backupAttributeCollection["emailsender"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Sender");
					SetAttributeValue("emailsender", value);
				OnPropertyChanged("Sender");
			}
		}

        public string SenderName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("emailsender");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailsender"))
				    value = (EntityReference) backupAttributeCollection["emailsender"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'EmailTrackingId'.<br />
        /// Email Tracking Id.
        /// </summary>
		[AttributeLogicalName("emailtrackingid")]
		public Guid? EmailTrackingId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("emailtrackingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailtrackingid"))
				    value = (Guid?) backupAttributeCollection["emailtrackingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailTrackingId");
					SetAttributeValue("emailtrackingid", value);
				OnPropertyChanged("EmailTrackingId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        ///  
		/// 'FollowEmailUserPreference'.<br />
        /// Select whether the email allows following recipient activities sent from Microsoft Dynamics 365.This is user preference state which can be overridden by system evaluated state.
        /// </summary>
		[AttributeLogicalName("followemailuserpreference")]
		public bool? Following
		{
			get
			{
				var value = GetAttributeValue<bool?>("followemailuserpreference");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followemailuserpreference"))
				    value = (bool?) backupAttributeCollection["followemailuserpreference"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Following");
					SetAttributeValue("followemailuserpreference", value);
				OnPropertyChanged("Following");
			}
		}

        /// <summary>
        ///  
		/// 'from'.<br />
        /// Enter the sender of the email.
        /// </summary>
		[AttributeLogicalName("from")]
		public ActivityParty[] From_From
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("from");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("from"))
				    collection = (EntityCollection) backupAttributeCollection["from"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("From_From");
				SetAttributeValue("from", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("From_From");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=320] 
		/// 'InReplyTo'.<br />
        /// Type the ID of the email message that this email activity is a response to.
        /// </summary>
		[AttributeLogicalName("inreplyto"), MaxLength(320)]
		public string InReplyToMessage
		{
			get
			{
				var value = GetAttributeValue<string>("inreplyto");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("inreplyto"))
				    value = (string) backupAttributeCollection["inreplyto"];
			    return value;
			}
			set
			{
				OnPropertyChanging("InReplyToMessage");
					SetAttributeValue("inreplyto", value);
				OnPropertyChanged("InReplyToMessage");
			}
		}

        /// <summary>
        ///  
		/// 'IsBilled'.<br />
        /// Information regarding whether the email activity was billed as part of resolving a case.
        /// </summary>
		[AttributeLogicalName("isbilled")]
		public bool? IsBilled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isbilled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isbilled"))
				    value = (bool?) backupAttributeCollection["isbilled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsBilled");
					SetAttributeValue("isbilled", value);
				OnPropertyChanged("IsBilled");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailFollowed'.<br />
        /// For internal use only. Shows whether this email is followed. This is evaluated state which overrides user selection of follow email.
        /// </summary>
		[AttributeLogicalName("isemailfollowed")]
		public bool? Followed
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailfollowed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailfollowed"))
				    value = (bool?) backupAttributeCollection["isemailfollowed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Followed");
					SetAttributeValue("isemailfollowed", value);
				OnPropertyChanged("Followed");
			}
		}

        /// <summary>
        ///  
		/// 'IsRegularActivity'.<br />
        /// Information regarding whether the activity is a regular activity type or event type.
        /// </summary>
		[AttributeLogicalName("isregularactivity")]
		public bool? IsRegularActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isregularactivity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isregularactivity"))
				    value = (bool?) backupAttributeCollection["isregularactivity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRegularActivity");
					SetAttributeValue("isregularactivity", value);
				OnPropertyChanged("IsRegularActivity");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'IsUnsafe'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("isunsafe"), InRange("0", "2147483647", typeof(int))]
		public int? IsUnsafe
		{
			get
			{
				var value = GetAttributeValue<int?>("isunsafe");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isunsafe"))
				    value = (int?) backupAttributeCollection["isunsafe"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsUnsafe");
					SetAttributeValue("isunsafe", value);
				OnPropertyChanged("IsUnsafe");
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowCreated'.<br />
        /// Indication if the email was created by a workflow rule.
        /// </summary>
		[AttributeLogicalName("isworkflowcreated")]
		public bool? IsWorkflowCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isworkflowcreated"))
				    value = (bool?) backupAttributeCollection["isworkflowcreated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsWorkflowCreated");
					SetAttributeValue("isworkflowcreated", value);
				OnPropertyChanged("IsWorkflowCreated");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'LastOpenedTime'.<br />
        /// Shows the date and time when an email was last opened.
        /// </summary>
		[AttributeLogicalName("lastopenedtime")]
		public DateTime? LastOpenedTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastopenedtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastopenedtime"))
				    value = (DateTime?) backupAttributeCollection["lastopenedtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOpenedTime");
					SetAttributeValue("lastopenedtime", value);
				OnPropertyChanged("LastOpenedTime");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'LinksClickedCount'.<br />
        /// Shows the number of times a link in an email has been clicked.
        /// </summary>
		[AttributeLogicalName("linksclickedcount"), InRange("0", "2147483647", typeof(int))]
		public int? LinkClickCount
		{
			get
			{
				var value = GetAttributeValue<int?>("linksclickedcount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("linksclickedcount"))
				    value = (int?) backupAttributeCollection["linksclickedcount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LinkClickCount");
					SetAttributeValue("linksclickedcount", value);
				OnPropertyChanged("LinkClickCount");
			}
		}

        /// <summary>
        /// [MaximumLength=320] 
		/// 'MessageId'.<br />
        /// Unique identifier of the email message. Used only for email that is received.
        /// </summary>
		[AttributeLogicalName("messageid"), MaxLength(320)]
		public string MessageID
		{
			get
			{
				var value = GetAttributeValue<string>("messageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("messageid"))
				    value = (string) backupAttributeCollection["messageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MessageID");
					SetAttributeValue("messageid", value);
				OnPropertyChanged("MessageID");
			}
		}

        /// <summary>
        /// [MaximumLength=256] 
		/// 'MimeType'.<br />
        /// MIME type of the email message data.
        /// </summary>
		[AttributeLogicalName("mimetype"), MaxLength(256)]
		public string MimeType
		{
			get
			{
				var value = GetAttributeValue<string>("mimetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mimetype"))
				    value = (string) backupAttributeCollection["mimetype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MimeType");
					SetAttributeValue("mimetype", value);
				OnPropertyChanged("MimeType");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Notifications'.<br />
        /// Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.
        /// </summary>
		[AttributeLogicalName("notifications")]
		public NotificationsEnum? Notifications
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("notifications");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("notifications"))
				    value = (OptionSetValue) backupAttributeCollection["notifications"];
                return value == null ? (NotificationsEnum?) null : (NotificationsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Notifications");
                if (value != null)
				    SetAttributeValue("notifications", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("notifications", value);
				OnPropertyChanged("Notifications");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'OpenCount'.<br />
        /// Shows the number of times an email has been opened.
        /// </summary>
		[AttributeLogicalName("opencount"), InRange("0", "2147483647", typeof(int))]
		public int? OpenCount
		{
			get
			{
				var value = GetAttributeValue<int?>("opencount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opencount"))
				    value = (int?) backupAttributeCollection["opencount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenCount");
					SetAttributeValue("opencount", value);
				OnPropertyChanged("OpenCount");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier of the business unit that owns the email activity.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team who owns the email activity.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user who owns the email activity.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParentActivityId'.<br />
        /// Select the activity that the email is associated with.
        /// </summary>
		[AttributeLogicalName("parentactivityid")]
		public Guid? ParentActivityId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentactivityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentactivityid"))
				    value = (EntityReference) backupAttributeCollection["parentactivityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentActivityId");
                if (value != null)
				    SetAttributeValue("parentactivityid", new EntityReference("email", value.Value));
                else
					SetAttributeValue("parentactivityid", value);
				OnPropertyChanged("ParentActivityId");
			}
		}

        public string ParentActivityIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentactivityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentactivityid"))
				    value = (EntityReference) backupAttributeCollection["parentactivityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PostponeEmailProcessingUntil'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("postponeemailprocessinguntil")]
		public DateTime? Delayemailprocessinguntil
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("postponeemailprocessinguntil");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("postponeemailprocessinguntil"))
				    value = (DateTime?) backupAttributeCollection["postponeemailprocessinguntil"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Delayemailprocessinguntil");
					SetAttributeValue("postponeemailprocessinguntil", value);
				OnPropertyChanged("Delayemailprocessinguntil");
			}
		}

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Select the priority so that preferred customers or critical issues are handled quickly.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityEnum? Priority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityEnum?) null : (PriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Priority");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("Priority");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'ReadReceiptRequested'.<br />
        /// Indicates that a read receipt is requested.
        /// </summary>
		[AttributeLogicalName("readreceiptrequested")]
		public bool? ReadReceiptRequested
		{
			get
			{
				var value = GetAttributeValue<bool?>("readreceiptrequested");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("readreceiptrequested"))
				    value = (bool?) backupAttributeCollection["readreceiptrequested"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReadReceiptRequested");
					SetAttributeValue("readreceiptrequested", value);
				OnPropertyChanged("ReadReceiptRequested");
			}
		}

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// Choose the record that the email relates to.
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Regarding");
					SetAttributeValue("regardingobjectid", value);
				OnPropertyChanged("Regarding");
			}
		}

        public string RegardingName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ReminderActionCardId'.<br />
        /// Reminder Action Card ID.
        /// </summary>
		[AttributeLogicalName("reminderactioncardid")]
		public Guid? ReminderActionCardId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("reminderactioncardid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("reminderactioncardid"))
				    value = (Guid?) backupAttributeCollection["reminderactioncardid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReminderActionCardId");
					SetAttributeValue("reminderactioncardid", value);
				OnPropertyChanged("ReminderActionCardId");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ReplyCount'.<br />
        /// Shows the number of replies received for an email.
        /// </summary>
		[AttributeLogicalName("replycount"), InRange("0", "2147483647", typeof(int))]
		public int? ReplyCount
		{
			get
			{
				var value = GetAttributeValue<int?>("replycount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("replycount"))
				    value = (int?) backupAttributeCollection["replycount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReplyCount");
					SetAttributeValue("replycount", value);
				OnPropertyChanged("ReplyCount");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ScheduledDurationMinutes'.<br />
        /// Scheduled duration of the email activity, specified in minutes.
        /// </summary>
		[AttributeLogicalName("scheduleddurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ScheduledDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("scheduleddurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduleddurationminutes"))
				    value = (int?) backupAttributeCollection["scheduleddurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledDuration");
					SetAttributeValue("scheduleddurationminutes", value);
				OnPropertyChanged("ScheduledDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? DueDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DueDate");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("DueDate");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("StartDate");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Sender'.<br />
        /// Sender of the email.
        /// </summary>
		[AttributeLogicalName("sender"), MaxLength(250)]
		public string From_Sender
		{
			get
			{
				var value = GetAttributeValue<string>("sender");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sender"))
				    value = (string) backupAttributeCollection["sender"];
			    return value;
			}
			set
			{
				OnPropertyChanging("From_Sender");
					SetAttributeValue("sender", value);
				OnPropertyChanged("From_Sender");
			}
		}

        /// <summary>
        ///  
		/// 'SenderMailboxId'.<br />
        /// Select the mailbox associated with the sender of the email message.
        /// </summary>
		[AttributeLogicalName("sendermailboxid")]
		public Guid? SendersMailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SendersMailbox");
                if (value != null)
				    SetAttributeValue("sendermailboxid", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("sendermailboxid", value);
				OnPropertyChanged("SendersMailbox");
			}
		}

        public string SendersMailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SendersAccount'.<br />
        /// Shows the parent account of the sender of the email.
        /// </summary>
		[AttributeLogicalName("sendersaccount")]
		public Guid? SendersAccount
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sendersaccount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendersaccount"))
				    value = (EntityReference) backupAttributeCollection["sendersaccount"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SendersAccount");
                if (value != null)
				    SetAttributeValue("sendersaccount", new EntityReference("account", value.Value));
                else
					SetAttributeValue("sendersaccount", value);
				OnPropertyChanged("SendersAccount");
			}
		}

        public string SendersAccountName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sendersaccount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendersaccount"))
				    value = (EntityReference) backupAttributeCollection["sendersaccount"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SentOn'.<br />
        /// Shows the date and time that the email was sent.
        /// </summary>
		[AttributeLogicalName("senton")]
		public DateTime? DateSent
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("senton");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("senton"))
				    value = (DateTime?) backupAttributeCollection["senton"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateSent");
					SetAttributeValue("senton", value);
				OnPropertyChanged("DateSent");
			}
		}

        /// <summary>
        ///  
		/// 'ServiceId'.<br />
        /// Unique identifier for the associated service.
        /// </summary>
		[AttributeLogicalName("serviceid")]
		public Guid? Service
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Service");
                if (value != null)
				    SetAttributeValue("serviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("serviceid", value);
				OnPropertyChanged("Service");
			}
		}

        public string ServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the email record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this email. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SortDate'.<br />
        /// Shows the date and time by which the activities are sorted.
        /// </summary>
		[AttributeLogicalName("sortdate")]
		public DateTime? SortDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("sortdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sortdate"))
				    value = (DateTime?) backupAttributeCollection["sortdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SortDate");
					SetAttributeValue("sortdate", value);
				OnPropertyChanged("SortDate");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can't be edited.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public ActivityStatusEnum? ActivityStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (ActivityStatusEnum?) null : (ActivityStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ActivityStatus");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("ActivityStatus");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the email's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Subcategory'.<br />
        /// Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.
        /// </summary>
		[AttributeLogicalName("subcategory"), MaxLength(250)]
		public string SubCategory
		{
			get
			{
				var value = GetAttributeValue<string>("subcategory");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subcategory"))
				    value = (string) backupAttributeCollection["subcategory"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SubCategory");
					SetAttributeValue("subcategory", value);
				OnPropertyChanged("SubCategory");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'Subject'.<br />
        /// Type a short description about the objective or primary topic of the email.
        /// </summary>
		[AttributeLogicalName("subject"), MaxLength(200)]
		public string Subject
		{
			get
			{
				var value = GetAttributeValue<string>("subject");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subject"))
				    value = (string) backupAttributeCollection["subject"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Subject");
					SetAttributeValue("subject", value);
				OnPropertyChanged("Subject");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'SubmittedBy'.<br />
        /// Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("submittedby"), MaxLength(250)]
		public string SubmittedBy
		{
			get
			{
				var value = GetAttributeValue<string>("submittedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("submittedby"))
				    value = (string) backupAttributeCollection["submittedby"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SubmittedBy");
					SetAttributeValue("submittedby", value);
				OnPropertyChanged("SubmittedBy");
			}
		}

        /// <summary>
        ///  
		/// 'TemplateId'.<br />
        /// For internal use only. ID for template used in email.
        /// </summary>
		[AttributeLogicalName("templateid")]
		public Guid? IDfortemplateused
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("templateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("templateid"))
				    value = (EntityReference) backupAttributeCollection["templateid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("IDfortemplateused");
                if (value != null)
				    SetAttributeValue("templateid", new EntityReference("template", value.Value));
                else
					SetAttributeValue("templateid", value);
				OnPropertyChanged("IDfortemplateused");
			}
		}

        public string IDfortemplateusedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("templateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("templateid"))
				    value = (EntityReference) backupAttributeCollection["templateid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'to'.<br />
        /// Enter the account, contact, lead, queue, or user recipients for the email.
        /// </summary>
		[AttributeLogicalName("to")]
		public ActivityParty[] To
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("to");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("to"))
				    collection = (EntityCollection) backupAttributeCollection["to"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("To");
				SetAttributeValue("to", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("To");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'ToRecipients'.<br />
        /// Shows the email addresses corresponding to the recipients.
        /// </summary>
		[AttributeLogicalName("torecipients"), MaxLength(500)]
		public string ToRecipients
		{
			get
			{
				var value = GetAttributeValue<string>("torecipients");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("torecipients"))
				    value = (string) backupAttributeCollection["torecipients"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ToRecipients");
					SetAttributeValue("torecipients", value);
				OnPropertyChanged("ToRecipients");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'TrackingToken'.<br />
        /// Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("trackingtoken"), MaxLength(50)]
		public string TrackingToken
		{
			get
			{
				var value = GetAttributeValue<string>("trackingtoken");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("trackingtoken"))
				    value = (string) backupAttributeCollection["trackingtoken"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TrackingToken");
					SetAttributeValue("trackingtoken", value);
				OnPropertyChanged("TrackingToken");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the email message.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'email_activity_parties'
		/// </summary>
		[RelationshipSchemaName("email_activity_parties")]
		public ActivityParty[] ActivityPartysOfActivity
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("email_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("email_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfActivity");
			}
		}
		
		/// <summary>
		/// 1:N, 'email_email_parentactivityid'
		/// </summary>
		[RelationshipSchemaName("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Email[] EmailsOfParentActivityId
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfParentActivityId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("EmailsOfParentActivityId");
			}
		}
		
		/// <summary>
		/// N:1, 'email_email_parentactivityid'
		/// </summary>
		[RelationshipSchemaName("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentactivityid")]
		public Email EmailAsParentActivityId
		{
			get
			{
				return GetRelatedEntity<Email>("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("EmailAsParentActivityId");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Email>("email_email_parentactivityid", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("EmailAsParentActivityId");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_email_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_email_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_email_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_email_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_email_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_email_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_email_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_email_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_email_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_email_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_email_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_email_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_email_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_email_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_email_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_email_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'SystemUser_Email_EmailSender'
		/// </summary>
		[RelationshipSchemaName("SystemUser_Email_EmailSender"), AttributeLogicalName("emailsender")]
		public User UserAsSender
		{
			get
			{
				return GetRelatedEntity<User>("SystemUser_Email_EmailSender", null);
			}
			set
			{
				OnPropertyChanging("UserAsSender");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("SystemUser_Email_EmailSender", null, value);
				OnPropertyChanged("UserAsSender");
			}
		}
		
		/// <summary>
		/// N:1, 'team_email'
		/// </summary>
		[RelationshipSchemaName("team_email"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_email", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_email", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_email'
		/// </summary>
		[RelationshipSchemaName("user_email"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_email", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_email", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfActivity = new RelationName("ActivityPartysOfActivity");
			public static RelationName EmailsOfParentActivityId = new RelationName("EmailsOfParentActivityId");
			public static RelationName EmailAsParentActivityId = new RelationName("EmailAsParentActivityId");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsSender = new RelationName("UserAsSender");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfActivity"] = new object[] { "ActivityPartysOfActivity", "activityparty", "email", "activityid", "activityid", "activityid", "activityid", "email_activity_parties", typeof (ActivityParty[]) };
			relationProperties["EmailsOfParentActivityId"] = new object[] { "EmailsOfParentActivityId", "email", "email", "parentactivityid", "activityid", "activityid", "activityid", "email_email_parentactivityid", typeof (Email[]) };
			relationProperties["EmailAsParentActivityId"] = new object[] { "EmailAsParentActivityId", "email", "email", "activityid", "parentactivityid", "activityid", "activityid", "email_email_parentactivityid", typeof (Email) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "email", "systemuserid", "createdby", "activityid", "activityid", "lk_email_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "email", "systemuserid", "createdonbehalfby", "activityid", "activityid", "lk_email_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "email", "systemuserid", "modifiedby", "activityid", "activityid", "lk_email_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "email", "systemuserid", "modifiedonbehalfby", "activityid", "activityid", "lk_email_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsSender"] = new object[] { "UserAsSender", "systemuser", "email", "systemuserid", "emailsender", "activityid", "activityid", "SystemUser_Email_EmailSender", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "email", "teamid", "owningteam", "activityid", "activityid", "team_email", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "email", "systemuserid", "owninguser", "activityid", "activityid", "user_email", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Email(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activityid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ActivityType

		public enum ActivityTypeEnum
		{
			[EnumMember]Fax = 4204,
			[EnumMember]PhoneCall = 4210,
			[EnumMember]Email = 4202,
			[EnumMember]Letter = 4207,
			[EnumMember]Appointment = 4201,
			[EnumMember]ServiceActivity = 4214,
			[EnumMember]OpportunityClose = 4208,
			[EnumMember]OrderClose = 4209,
			[EnumMember]QuoteClose = 4211,
			[EnumMember]CaseResolution = 4206,
			[EnumMember]Task = 4212,
			[EnumMember]CampaignResponse = 4401,
			[EnumMember]CampaignActivity = 4402,
			[EnumMember]BulkOperation = 4406,
			[EnumMember]RecurringAppointment = 4251,
			[EnumMember]NotificationMessage = 10016,
			[EnumMember]PushMessage = 10026,
			[EnumMember]SMS = 10031,
		}

		#endregion
	
		#region Compression

		public enum CompressionEnum
		{
			[EnumMember]Compressed = 1,
			[EnumMember]Notcompressed = 0,
		}

		#endregion
	
		#region CorrelationMethod

		public enum CorrelationMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]Skipped = 1,
			[EnumMember]XHeader = 2,
			[EnumMember]InReplyTo = 3,
			[EnumMember]TrackingToken = 4,
			[EnumMember]ConversationIndex = 5,
			[EnumMember]SmartMatching = 6,
			[EnumMember]CustomCorrelation = 7,
		}

		#endregion
	
		#region DeliveryPriority

		public enum DeliveryPriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region DeliveryReceiptRequested

		public enum DeliveryReceiptRequestedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Direction

		public enum DirectionEnum
		{
			[EnumMember]Outgoing = 1,
			[EnumMember]Incoming = 0,
		}

		#endregion
	
		#region EmailReminderStatus

		public enum EmailReminderStatusEnum
		{
			[EnumMember]NotSet = 0,
			[EnumMember]ReminderSet = 1,
			[EnumMember]ReminderExpired = 2,
			[EnumMember]ReminderInvalid = 3,
		}

		#endregion
	
		#region EmailReminderType

		public enum EmailReminderTypeEnum
		{
			[EnumMember]IfIdonotreceiveareplyby = 0,
			[EnumMember]Iftheemailisnotopenedby = 1,
			[EnumMember]Remindmeanywayat = 2,
		}

		#endregion
	
		#region Following

		public enum FollowingEnum
		{
			[EnumMember]True = 1,
			[EnumMember]False = 0,
		}

		#endregion
	
		#region IsBilled

		public enum IsBilledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Followed

		public enum FollowedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRegularActivity

		public enum IsRegularActivityEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsWorkflowCreated

		public enum IsWorkflowCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Notifications

		public enum NotificationsEnum
		{
			[EnumMember]None = 0,
			[EnumMember]ThemessagewassavedasaMicrosoftDynamics365emailrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid = 1,
			[EnumMember]Truncatedbody = 2,
		}

		#endregion
	
		#region Priority

		public enum PriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region ReadReceiptRequested

		public enum ReadReceiptRequestedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ActivityStatus

		public enum ActivityStatusEnum
		{
			[EnumMember]Open = 0,
			[EnumMember]Completed = 1,
			[EnumMember]Canceled = 2,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Draft = 1,
			[EnumMember]Completed = 2,
			[EnumMember]Sent = 3,
			[EnumMember]Received = 4,
			[EnumMember]Canceled = 5,
			[EnumMember]PendingSend = 6,
			[EnumMember]Sending = 7,
			[EnumMember]Failed = 8,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivityType = "activitytypecode";
				public const string Compression = "compressed";
				public const string CorrelationMethod = "correlationmethod";
				public const string DeliveryPriority = "deliveryprioritycode";
				public const string DeliveryReceiptRequested = "deliveryreceiptrequested";
				public const string Direction = "directioncode";
				public const string EmailReminderStatus = "emailreminderstatus";
				public const string EmailReminderType = "emailremindertype";
				public const string Following = "followemailuserpreference";
				public const string IsBilled = "isbilled";
				public const string Followed = "isemailfollowed";
				public const string IsRegularActivity = "isregularactivity";
				public const string IsWorkflowCreated = "isworkflowcreated";
				public const string Notifications = "notifications";
				public const string Priority = "prioritycode";
				public const string ReadReceiptRequested = "readreceiptrequested";
				public const string ActivityStatus = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityType 
				{
					public const string Fax_1033 = "Fax";
					public const string PhoneCall_1033 = "Phone Call";
					public const string Email_1033 = "Email";
					public const string Letter_1033 = "Letter";
					public const string Appointment_1033 = "Appointment";
					public const string ServiceActivity_1033 = "Service Activity";
					public const string OpportunityClose_1033 = "Opportunity Close";
					public const string OrderClose_1033 = "Order Close";
					public const string QuoteClose_1033 = "Quote Close";
					public const string CaseResolution_1033 = "Case Resolution";
					public const string Task_1033 = "Task";
					public const string CampaignResponse_1033 = "Campaign Response";
					public const string CampaignActivity_1033 = "Campaign Activity";
					public const string BulkOperation_1033 = "Bulk Operation";
					public const string RecurringAppointment_1033 = "Recurring Appointment";
					public const string NotificationMessage_1033 = "Notification Message";
					public const string PushMessage_1033 = "Push Message";
					public const string SMS_1033 = "SMS";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityType), label, languageCode);
					}
				}

				public static class Compression 
				{
					public const string Compressed_1033 = "Compressed";
					public const string Notcompressed_1033 = "Not compressed";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Compression), label, languageCode);
					}
				}

				public static class CorrelationMethod 
				{
					public const string None_1033 = "None";
					public const string Skipped_1033 = "Skipped";
					public const string XHeader_1033 = "XHeader";
					public const string InReplyTo_1033 = "InReplyTo";
					public const string TrackingToken_1033 = "TrackingToken";
					public const string ConversationIndex_1033 = "ConversationIndex";
					public const string SmartMatching_1033 = "SmartMatching";
					public const string CustomCorrelation_1033 = "CustomCorrelation";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(CorrelationMethod), label, languageCode);
					}
				}

				public static class DeliveryPriority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeliveryPriority), label, languageCode);
					}
				}

				public static class DeliveryReceiptRequested 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeliveryReceiptRequested), label, languageCode);
					}
				}

				public static class Direction 
				{
					public const string Outgoing_1033 = "Outgoing";
					public const string Incoming_1033 = "Incoming";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Direction), label, languageCode);
					}
				}

				public static class EmailReminderStatus 
				{
					public const string NotSet_1033 = "NotSet";
					public const string ReminderSet_1033 = "ReminderSet";
					public const string ReminderExpired_1033 = "ReminderExpired";
					public const string ReminderInvalid_1033 = "ReminderInvalid";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EmailReminderStatus), label, languageCode);
					}
				}

				public static class EmailReminderType 
				{
					public const string IfIdonotreceiveareplyby_1033 = "If I do not receive a reply by";
					public const string Iftheemailisnotopenedby_1033 = "If the email is not opened by";
					public const string Remindmeanywayat_1033 = "Remind me anyway at";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(EmailReminderType), label, languageCode);
					}
				}

				public static class Following 
				{
					public const string True_1033 = "True";
					public const string False_1033 = "False";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Following), label, languageCode);
					}
				}

				public static class IsBilled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsBilled), label, languageCode);
					}
				}

				public static class Followed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Followed), label, languageCode);
					}
				}

				public static class IsRegularActivity 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsRegularActivity), label, languageCode);
					}
				}

				public static class IsWorkflowCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsWorkflowCreated), label, languageCode);
					}
				}

				public static class Notifications 
				{
					public const string None_1033 = "None";
					public const string ThemessagewassavedasaMicrosoftDynamics365emailrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid_1033 = "The message was saved as a Microsoft Dynamics 365 email record, but not all the a" +
    "ttachments could be saved with it. An attachment cannot be saved if it is blocke" +
    "d or if its file type is invalid.";
					public const string Truncatedbody_1033 = "Truncated body.";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Notifications), label, languageCode);
					}
				}

				public static class Priority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Priority), label, languageCode);
					}
				}

				public static class ReadReceiptRequested 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ReadReceiptRequested), label, languageCode);
					}
				}

				public static class ActivityStatus 
				{
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityStatus), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Draft_1033 = "Draft";
					public const string Completed_1033 = "Completed";
					public const string Sent_1033 = "Sent";
					public const string Received_1033 = "Received";
					public const string Canceled_1033 = "Canceled";
					public const string PendingSend_1033 = "Pending Send";
					public const string Sending_1033 = "Sending";
					public const string Failed_1033 = "Failed";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AdditionalParameters = "activityadditionalparams";
			public const string EmailMessageId = "activityid";
			public const string ActivityType = "activitytypecode";
			public const string Duration = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string AttachmentCount = "attachmentcount";
			public const string AttachmentViewCount = "attachmentopencount";
			public const string ConversationIndexHash = "baseconversationindexhash";
			public const string Bcc = "bcc";
			public const string Category = "category";
			public const string Cc = "cc";
			public const string Compression = "compressed";
			public const string ConversationIndex = "conversationindex";
			public const string ConversationTrackingId = "conversationtrackingid";
			public const string CorrelationMethod = "correlationmethod";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string DelaySend = "delayedemailsendtime";
			public const string NoofDeliveryAttempts = "deliveryattempts";
			public const string DeliveryPriority = "deliveryprioritycode";
			public const string DeliveryReceiptRequested = "deliveryreceiptrequested";
			public const string Description = "description";
			public const string Direction = "directioncode";
			public const string EmailReminderExpiryTime = "emailreminderexpirytime";
			public const string EmailReminderStatus = "emailreminderstatus";
			public const string EmailReminderText = "emailremindertext";
			public const string EmailReminderType = "emailremindertype";
			public const string Sender = "emailsender";
			public const string EmailTrackingId = "emailtrackingid";
			public const string ExchangeRate = "exchangerate";
			public const string Following = "followemailuserpreference";
			public const string From_From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InReplyToMessage = "inreplyto";
			public const string IsBilled = "isbilled";
			public const string Followed = "isemailfollowed";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsUnsafe = "isunsafe";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastOpenedTime = "lastopenedtime";
			public const string LinkClickCount = "linksclickedcount";
			public const string MessageID = "messageid";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string Notifications = "notifications";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string OpenCount = "opencount";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentActivityId = "parentactivityid";
			public const string Delayemailprocessinguntil = "postponeemailprocessinguntil";
			public const string Priority = "prioritycode";
			public const string Process = "processid";
			public const string ReadReceiptRequested = "readreceiptrequested";
			public const string Regarding = "regardingobjectid";
			public const string ReminderActionCardId = "reminderactioncardid";
			public const string ReplyCount = "replycount";
			public const string ScheduledDuration = "scheduleddurationminutes";
			public const string DueDate = "scheduledend";
			public const string StartDate = "scheduledstart";
			public const string From_Sender = "sender";
			public const string SendersMailbox = "sendermailboxid";
			public const string SendersAccount = "sendersaccount";
			public const string DateSent = "senton";
			public const string Service = "serviceid";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string ProcessStage = "stageid";
			public const string ActivityStatus = "statecode";
			public const string StatusReason = "statuscode";
			public const string SubCategory = "subcategory";
			public const string Subject = "subject";
			public const string SubmittedBy = "submittedby";
			public const string IDfortemplateused = "templateid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string ToRecipients = "torecipients";
			public const string TrackingToken = "trackingtoken";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AdditionalParameters = "ActivityAdditionalParams";
				public const string EmailMessageId = "ActivityId";
				public const string ActivityType = "ActivityTypeCode";
				public const string Duration = "ActualDurationMinutes";
				public const string ActualEnd = "ActualEnd";
				public const string ActualStart = "ActualStart";
				public const string AttachmentCount = "AttachmentCount";
				public const string AttachmentViewCount = "AttachmentOpenCount";
				public const string ConversationIndexHash = "BaseConversationIndexHash";
				public const string Bcc = "bcc";
				public const string Category = "Category";
				public const string Cc = "cc";
				public const string Compression = "Compressed";
				public const string ConversationIndex = "ConversationIndex";
				public const string ConversationTrackingId = "ConversationTrackingId";
				public const string CorrelationMethod = "CorrelationMethod";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string DelaySend = "DelayedEmailSendTime";
				public const string NoofDeliveryAttempts = "DeliveryAttempts";
				public const string DeliveryPriority = "DeliveryPriorityCode";
				public const string DeliveryReceiptRequested = "DeliveryReceiptRequested";
				public const string Description = "Description";
				public const string Direction = "DirectionCode";
				public const string EmailReminderExpiryTime = "EmailReminderExpiryTime";
				public const string EmailReminderStatus = "EmailReminderStatus";
				public const string EmailReminderText = "EmailReminderText";
				public const string EmailReminderType = "EmailReminderType";
				public const string Sender = "EmailSender";
				public const string EmailTrackingId = "EmailTrackingId";
				public const string ExchangeRate = "ExchangeRate";
				public const string Following = "FollowEmailUserPreference";
				public const string From_From = "from";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string InReplyToMessage = "InReplyTo";
				public const string IsBilled = "IsBilled";
				public const string Followed = "IsEmailFollowed";
				public const string IsRegularActivity = "IsRegularActivity";
				public const string IsUnsafe = "IsUnsafe";
				public const string IsWorkflowCreated = "IsWorkflowCreated";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string LastOpenedTime = "LastOpenedTime";
				public const string LinkClickCount = "LinksClickedCount";
				public const string MessageID = "MessageId";
				public const string MimeType = "MimeType";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string Notifications = "Notifications";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string OpenCount = "OpenCount";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string ParentActivityId = "ParentActivityId";
				public const string Delayemailprocessinguntil = "PostponeEmailProcessingUntil";
				public const string Priority = "PriorityCode";
				public const string Process = "ProcessId";
				public const string ReadReceiptRequested = "ReadReceiptRequested";
				public const string Regarding = "RegardingObjectId";
				public const string ReminderActionCardId = "ReminderActionCardId";
				public const string ReplyCount = "ReplyCount";
				public const string ScheduledDuration = "ScheduledDurationMinutes";
				public const string DueDate = "ScheduledEnd";
				public const string StartDate = "ScheduledStart";
				public const string From_Sender = "Sender";
				public const string SendersMailbox = "SenderMailboxId";
				public const string SendersAccount = "SendersAccount";
				public const string DateSent = "SentOn";
				public const string Service = "ServiceId";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SortDate = "SortDate";
				public const string ProcessStage = "StageId";
				public const string ActivityStatus = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string SubCategory = "Subcategory";
				public const string Subject = "Subject";
				public const string SubmittedBy = "SubmittedBy";
				public const string IDfortemplateused = "TemplateId";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string To = "to";
				public const string ToRecipients = "ToRecipients";
				public const string TrackingToken = "TrackingToken";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AdditionalParameters
				{
					public const string _1033 = "Additional Parameters";
				}

				public static class EmailMessageId
				{
					public const string _1033 = "Email Message";
				}

				public static class ActivityType
				{
					public const string _1033 = "Activity Type";
				}

				public static class Duration
				{
					public const string _1033 = "Duration";
				}

				public static class ActualEnd
				{
					public const string _1033 = "Actual End";
				}

				public static class ActualStart
				{
					public const string _1033 = "Actual Start";
				}

				public static class AttachmentCount
				{
					public const string _1033 = "Attachment Count";
				}

				public static class AttachmentViewCount
				{
					public const string _1033 = "Attachment View Count";
				}

				public static class ConversationIndexHash
				{
					public const string _1033 = "Conversation Index (Hash)";
				}

				public static class Bcc
				{
					public const string _1033 = "Bcc";
				}

				public static class Category
				{
					public const string _1033 = "Category";
				}

				public static class Cc
				{
					public const string _1033 = "Cc";
				}

				public static class Compression
				{
					public const string _1033 = "Compression";
				}

				public static class ConversationIndex
				{
					public const string _1033 = "Conversation Index";
				}

				public static class ConversationTrackingId
				{
					public const string _1033 = "Conversation Tracking Id";
				}

				public static class CorrelationMethod
				{
					public const string _1033 = "Correlation Method";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class DelaySend
				{
					public const string _1033 = "Delay Send";
				}

				public static class NoofDeliveryAttempts
				{
					public const string _1033 = "No. of Delivery Attempts";
				}

				public static class DeliveryPriority
				{
					public const string _1033 = "Delivery Priority";
				}

				public static class DeliveryReceiptRequested
				{
					public const string _1033 = "Delivery Receipt Requested";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class Direction
				{
					public const string _1033 = "Direction";
				}

				public static class EmailReminderExpiryTime
				{
					public const string _1033 = "Email Reminder Expiry Time";
				}

				public static class EmailReminderStatus
				{
					public const string _1033 = "Email Reminder Status";
				}

				public static class EmailReminderText
				{
					public const string _1033 = "Email Reminder Text";
				}

				public static class EmailReminderType
				{
					public const string _1033 = "Email Reminder Type";
				}

				public static class Sender
				{
					public const string _1033 = "Sender";
				}

				public static class EmailTrackingId
				{
					public const string _1033 = "Email Tracking Id";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class Following
				{
					public const string _1033 = "Following";
				}

				public static class From_From
				{
					public const string _1033 = "From";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class InReplyToMessage
				{
					public const string _1033 = "In Reply To Message";
				}

				public static class IsBilled
				{
					public const string _1033 = "Is Billed";
				}

				public static class Followed
				{
					public const string _1033 = "Followed";
				}

				public static class IsRegularActivity
				{
					public const string _1033 = "Is Regular Activity";
				}

				public static class IsUnsafe
				{
					public const string _1033 = "IsUnsafe";
				}

				public static class IsWorkflowCreated
				{
					public const string _1033 = "Is Workflow Created";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class LastOpenedTime
				{
					public const string _1033 = "Last Opened Time";
				}

				public static class LinkClickCount
				{
					public const string _1033 = "Link Click Count";
				}

				public static class MessageID
				{
					public const string _1033 = "Message ID";
				}

				public static class MimeType
				{
					public const string _1033 = "Mime Type";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class Notifications
				{
					public const string _1033 = "Notifications";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OpenCount
				{
					public const string _1033 = "Open Count";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class ParentActivityId
				{
					public const string _1033 = "Parent Activity Id";
				}

				public static class Delayemailprocessinguntil
				{
					public const string _1033 = "Delay email processing until";
				}

				public static class Priority
				{
					public const string _1033 = "Priority";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class ReadReceiptRequested
				{
					public const string _1033 = "Read Receipt Requested";
				}

				public static class Regarding
				{
					public const string _1033 = "Regarding";
				}

				public static class ReminderActionCardId
				{
					public const string _1033 = "Reminder Action Card Id.";
				}

				public static class ReplyCount
				{
					public const string _1033 = "Reply Count";
				}

				public static class ScheduledDuration
				{
					public const string _1033 = "Scheduled Duration";
				}

				public static class DueDate
				{
					public const string _1033 = "Due Date";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class From_Sender
				{
					public const string _1033 = "From";
				}

				public static class SendersMailbox
				{
					public const string _1033 = "Sender\'s Mailbox";
				}

				public static class SendersAccount
				{
					public const string _1033 = "Senders Account";
				}

				public static class DateSent
				{
					public const string _1033 = "Date Sent";
				}

				public static class Service
				{
					public const string _1033 = "Service";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SortDate
				{
					public const string _1033 = "Sort Date";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class ActivityStatus
				{
					public const string _1033 = "Activity Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class SubCategory
				{
					public const string _1033 = "Sub-Category";
				}

				public static class Subject
				{
					public const string _1033 = "Subject";
				}

				public static class SubmittedBy
				{
					public const string _1033 = "Submitted By";
				}

				public static class IDfortemplateused
				{
					public const string _1033 = "ID for template used.";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class To
				{
					public const string _1033 = "To";
				}

				public static class ToRecipients
				{
					public const string _1033 = "To Recipients";
				}

				public static class TrackingToken
				{
					public const string _1033 = "Tracking Token";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfActivity = "email_activity_parties";
				public const string EmailsOfParentActivityId = "email_email_parentactivityid";
			}
			
			public static class NToOne
			{
				public const string EmailAsParentActivityId = "email_email_parentactivityid";
				public const string UserAsCreatedBy = "lk_email_createdby";
				public const string UserAsCreatedByDelegate = "lk_email_createdonbehalfby";
				public const string UserAsModifiedBy = "lk_email_modifiedby";
				public const string UserAsModifiedByDelegate = "lk_email_modifiedonbehalfby";
				public const string UserAsSender = "SystemUser_Email_EmailSender";
				public const string TeamAsOwningTeam = "team_email";
				public const string UserAsOwningUser = "user_email";

				public static class Lookups
				{
					public const string EmailAsParentActivityId = "parentactivityid";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsSender = "emailsender";
					public const string TeamAsOwningTeam = "owningteam";
					public const string UserAsOwningUser = "owninguser";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region GenericConfiguration

	/// <summary>
	/// 'ldv_genericconfiguration'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_genericconfiguration")]
	public partial class GenericConfiguration : GeneratedEntity<GenericConfiguration.RelationName>
	{
		
		public GenericConfiguration() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Generic Configuration";
		public const string SchemaName = "ldv_genericconfiguration";
		public const string EntityLogicalName = "ldv_genericconfiguration";
		public const int EntityTypeCode = 10011;
		
		#region Attributes

		[AttributeLogicalName("ldv_genericconfigurationid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (GenericConfigurationId == null || GenericConfigurationId == Guid.Empty) ? base.Id : GenericConfigurationId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_genericconfigurationid");
                    base.Id = value;
                } else {
				    GenericConfigurationId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Required][Range(0, 2147483647)] 
		/// 'ldv_ConfigurationCacheDuration'.<br />
        /// The duration to keep configurations cached in memory.
        /// </summary>
		[AttributeLogicalName("ldv_configurationcacheduration"), Required, InRange("0", "2147483647", typeof(int))]
		public int? ConfigurationCacheDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_configurationcacheduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_configurationcacheduration"))
				    value = (int?) backupAttributeCollection["ldv_configurationcacheduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ConfigurationCacheDuration");
					SetAttributeValue("ldv_configurationcacheduration", value);
				OnPropertyChanged("ConfigurationCacheDuration");
			}
		}

		[AttributeLogicalName("ldv_defaultcalendar"), Required, MaxLength(36)]
		public string DefaultCalendar
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_defaultcalendar");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultcalendar"))
				    value = (string) backupAttributeCollection["ldv_defaultcalendar"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCalendar");
					SetAttributeValue("ldv_defaultcalendar", value);
				OnPropertyChanged("DefaultCalendar");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'ldv_DefaultFromUserId'.<br />
        /// The default notification user; appears in the 'from' in emails.
        /// </summary>
		[AttributeLogicalName("ldv_defaultfromuserid"), Required]
		public Guid? DefaultFromUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_defaultfromuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultfromuserid"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultfromuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultFromUser");
                if (value != null)
				    SetAttributeValue("ldv_defaultfromuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_defaultfromuserid", value);
				OnPropertyChanged("DefaultFromUser");
			}
		}

        public string DefaultFromUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_defaultfromuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultfromuserid"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultfromuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_defaultroutinguser"), Required]
		public Guid? DefaultRoutingUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_defaultroutinguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultroutinguser"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultroutinguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultRoutingUser");
                if (value != null)
				    SetAttributeValue("ldv_defaultroutinguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_defaultroutinguser", value);
				OnPropertyChanged("DefaultRoutingUser");
			}
		}

        public string DefaultRoutingUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_defaultroutinguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultroutinguser"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultroutinguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_foxitprintingpath"), Required, MaxLength(4000)]
		public string FoxitPrintingPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_foxitprintingpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_foxitprintingpath"))
				    value = (string) backupAttributeCollection["ldv_foxitprintingpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FoxitPrintingPath");
					SetAttributeValue("ldv_foxitprintingpath", value);
				OnPropertyChanged("FoxitPrintingPath");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_genericconfigurationId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_genericconfigurationid")]
		public Guid? GenericConfigurationId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_genericconfigurationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_genericconfigurationid"))
				    value = (Guid?) backupAttributeCollection["ldv_genericconfigurationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationId");
                if (value != null)
					SetAttributeValue("ldv_genericconfigurationid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("GenericConfigurationId");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_IsCategoriseByType'.<br />
        /// Create a folder per assembly.
        /// </summary>
		[AttributeLogicalName("ldv_iscategorisebytype")]
		public bool? CategorisebyType
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_iscategorisebytype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_iscategorisebytype"))
				    value = (bool?) backupAttributeCollection["ldv_iscategorisebytype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CategorisebyType");
					SetAttributeValue("ldv_iscategorisebytype", value);
				OnPropertyChanged("CategorisebyType");
			}
		}

		[AttributeLogicalName("ldv_iscontinuenotifyonerror"), Required]
		public bool? ContinueNotifyOnError
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_iscontinuenotifyonerror");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_iscontinuenotifyonerror"))
				    value = (bool?) backupAttributeCollection["ldv_iscontinuenotifyonerror"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContinueNotifyOnError");
					SetAttributeValue("ldv_iscontinuenotifyonerror", value);
				OnPropertyChanged("ContinueNotifyOnError");
			}
		}

		[AttributeLogicalName("ldv_isnotificationscentreenabled"), Required]
		public bool? NotificationsCentreEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isnotificationscentreenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isnotificationscentreenabled"))
				    value = (bool?) backupAttributeCollection["ldv_isnotificationscentreenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationsCentreEnabled");
					SetAttributeValue("ldv_isnotificationscentreenabled", value);
				OnPropertyChanged("NotificationsCentreEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_IsReuseLogFile'.<br />
        /// This will clear the log file and start over when the size limit is reached.
        /// </summary>
		[AttributeLogicalName("ldv_isreuselogfile")]
		public bool? ReuseLogFile
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isreuselogfile");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isreuselogfile"))
				    value = (bool?) backupAttributeCollection["ldv_isreuselogfile"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReuseLogFile");
					SetAttributeValue("ldv_isreuselogfile", value);
				OnPropertyChanged("ReuseLogFile");
			}
		}

		[AttributeLogicalName("ldv_logfiledateformat"), MaxLength(4000)]
		public string LogFileDateFormat
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_logfiledateformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfiledateformat"))
				    value = (string) backupAttributeCollection["ldv_logfiledateformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogFileDateFormat");
					SetAttributeValue("ldv_logfiledateformat", value);
				OnPropertyChanged("LogFileDateFormat");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitdate")]
		public DateTime? LogFileSplitDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_logfilesplitdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_logfilesplitdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitDate");
					SetAttributeValue("ldv_logfilesplitdate", value);
				OnPropertyChanged("LogFileSplitDate");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitfrequency")]
		public LogFileSplitFrequencyEnum? LogFileSplitFrequency
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logfilesplitfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitfrequency"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logfilesplitfrequency"];
                return value == null ? (LogFileSplitFrequencyEnum?) null : (LogFileSplitFrequencyEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitFrequency");
                if (value != null)
				    SetAttributeValue("ldv_logfilesplitfrequency", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logfilesplitfrequency", value);
				OnPropertyChanged("LogFileSplitFrequency");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitmode")]
		public LogFileSplitModeEnum? LogFileSplitMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logfilesplitmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitmode"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logfilesplitmode"];
                return value == null ? (LogFileSplitModeEnum?) null : (LogFileSplitModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitMode");
                if (value != null)
				    SetAttributeValue("ldv_logfilesplitmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logfilesplitmode", value);
				OnPropertyChanged("LogFileSplitMode");
			}
		}

		[AttributeLogicalName("ldv_loglevel"), Required]
		public LogLevelEnum? LogLevel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_loglevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_loglevel"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_loglevel"];
                return value == null ? (LogLevelEnum?) null : (LogLevelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogLevel");
                if (value != null)
				    SetAttributeValue("ldv_loglevel", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_loglevel", value);
				OnPropertyChanged("LogLevel");
			}
		}

		[AttributeLogicalName("ldv_logmode"), Required]
		public LogModeEnum? LogMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logmode"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logmode"];
                return value == null ? (LogModeEnum?) null : (LogModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogMode");
                if (value != null)
				    SetAttributeValue("ldv_logmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logmode", value);
				OnPropertyChanged("LogMode");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_LogPath'.<br />
        /// The folder to contain all log files.
        /// </summary>
		[AttributeLogicalName("ldv_logpath"), MaxLength(4000)]
		public string LogPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_logpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logpath"))
				    value = (string) backupAttributeCollection["ldv_logpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogPath");
					SetAttributeValue("ldv_logpath", value);
				OnPropertyChanged("LogPath");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'ldv_MaxFileSize'.<br />
        /// In KB.
        /// </summary>
		[AttributeLogicalName("ldv_maxfilesize"), InRange("1", "2147483647", typeof(int))]
		public int? MaxFileSizeKB
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_maxfilesize");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_maxfilesize"))
				    value = (int?) backupAttributeCollection["ldv_maxfilesize"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxFileSizeKB");
					SetAttributeValue("ldv_maxfilesize", value);
				OnPropertyChanged("MaxFileSizeKB");
			}
		}

		[AttributeLogicalName("ldv_metadatacacheduration"), Required, InRange("0", "2147483647", typeof(int))]
		public int? MetadataCacheDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_metadatacacheduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_metadatacacheduration"))
				    value = (int?) backupAttributeCollection["ldv_metadatacacheduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MetadataCacheDuration");
					SetAttributeValue("ldv_metadatacacheduration", value);
				OnPropertyChanged("MetadataCacheDuration");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_organisationbaseurl"), Required, MaxLength(4000)]
		public string OrganisationBaseURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_organisationbaseurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_organisationbaseurl"))
				    value = (string) backupAttributeCollection["ldv_organisationbaseurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrganisationBaseURL");
					SetAttributeValue("ldv_organisationbaseurl", value);
				OnPropertyChanged("OrganisationBaseURL");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_OrgNameOnSSRS'.<br />
        /// E.g. XXX_MSCRM
        /// </summary>
		[AttributeLogicalName("ldv_orgnameonssrs"), Required, MaxLength(100)]
		public string OrgNameOnSSRS
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_orgnameonssrs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_orgnameonssrs"))
				    value = (string) backupAttributeCollection["ldv_orgnameonssrs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrgNameOnSSRS");
					SetAttributeValue("ldv_orgnameonssrs", value);
				OnPropertyChanged("OrgNameOnSSRS");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=4000] 
		/// 'ldv_ReportServiceURL'.<br />
        /// E.g. http://ldcrm16-XXX.cloudapp.net/ReportServer/reportexecution2005.asmx
        /// </summary>
		[AttributeLogicalName("ldv_reportserviceurl"), Required, MaxLength(4000)]
		public string ReportServiceURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_reportserviceurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_reportserviceurl"))
				    value = (string) backupAttributeCollection["ldv_reportserviceurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReportServiceURL");
					SetAttributeValue("ldv_reportserviceurl", value);
				OnPropertyChanged("ReportServiceURL");
			}
		}

		[AttributeLogicalName("ldv_ssrsdomain"), Required, MaxLength(100)]
		public string SSRSDomain
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrsdomain");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrsdomain"))
				    value = (string) backupAttributeCollection["ldv_ssrsdomain"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSDomain");
					SetAttributeValue("ldv_ssrsdomain", value);
				OnPropertyChanged("SSRSDomain");
			}
		}

		[AttributeLogicalName("ldv_ssrspassword"), Required, MaxLength(100)]
		public string SSRSPassword
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrspassword");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrspassword"))
				    value = (string) backupAttributeCollection["ldv_ssrspassword"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSPassword");
					SetAttributeValue("ldv_ssrspassword", value);
				OnPropertyChanged("SSRSPassword");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_SSRSSharedFolderPath'.<br />
        /// E.g. SharedReports/8.0.xxxx
        /// </summary>
		[AttributeLogicalName("ldv_ssrssharedfolderpath"), MaxLength(4000)]
		public string SSRSSharedFolderPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrssharedfolderpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrssharedfolderpath"))
				    value = (string) backupAttributeCollection["ldv_ssrssharedfolderpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSSharedFolderPath");
					SetAttributeValue("ldv_ssrssharedfolderpath", value);
				OnPropertyChanged("SSRSSharedFolderPath");
			}
		}

		[AttributeLogicalName("ldv_ssrsusername"), Required, MaxLength(100)]
		public string SSRSUserName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrsusername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrsusername"))
				    value = (string) backupAttributeCollection["ldv_ssrsusername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSUserName");
					SetAttributeValue("ldv_ssrsusername", value);
				OnPropertyChanged("SSRSUserName");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Generic Configuration
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Generic Configuration
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId"), AttributeLogicalName("ldv_defaultfromuserid")]
		public User UserAsDefaultFromUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsDefaultFromUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", null, value);
				OnPropertyChanged("UserAsDefaultFromUser");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser"), AttributeLogicalName("ldv_defaultroutinguser")]
		public User UserAsDefaultRoutingUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", null);
			}
			set
			{
				OnPropertyChanging("UserAsDefaultRoutingUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", null, value);
				OnPropertyChanged("UserAsDefaultRoutingUser");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_genericconfiguration_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_genericconfiguration_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_genericconfiguration_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_genericconfiguration_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_genericconfiguration_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_genericconfiguration_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_genericconfiguration_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_genericconfiguration_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_genericconfiguration_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_genericconfiguration_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_genericconfiguration_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_genericconfiguration_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_ldv_genericconfiguration'
		/// </summary>
		[RelationshipSchemaName("team_ldv_genericconfiguration"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_ldv_genericconfiguration", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_ldv_genericconfiguration", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_genericconfiguration'
		/// </summary>
		[RelationshipSchemaName("user_ldv_genericconfiguration"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_genericconfiguration", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_genericconfiguration", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsDefaultFromUser = new RelationName("UserAsDefaultFromUser");
			public static RelationName UserAsDefaultRoutingUser = new RelationName("UserAsDefaultRoutingUser");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsDefaultFromUser"] = new object[] { "UserAsDefaultFromUser", "systemuser", "ldv_genericconfiguration", "systemuserid", "ldv_defaultfromuserid", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", typeof (User) };
			relationProperties["UserAsDefaultRoutingUser"] = new object[] { "UserAsDefaultRoutingUser", "systemuser", "ldv_genericconfiguration", "systemuserid", "ldv_defaultroutinguser", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_genericconfiguration", "systemuserid", "createdby", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "lk_ldv_genericconfiguration_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_genericconfiguration", "systemuserid", "createdonbehalfby", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "lk_ldv_genericconfiguration_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_genericconfiguration", "systemuserid", "modifiedby", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "lk_ldv_genericconfiguration_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_genericconfiguration", "systemuserid", "modifiedonbehalfby", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "lk_ldv_genericconfiguration_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_genericconfiguration", "teamid", "owningteam", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "team_ldv_genericconfiguration", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_genericconfiguration", "systemuserid", "owninguser", "ldv_genericconfigurationid", "ldv_genericconfigurationid", "user_ldv_genericconfiguration", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public GenericConfiguration(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_genericconfigurationid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region CategorisebyType

		public enum CategorisebyTypeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ContinueNotifyOnError

		public enum ContinueNotifyOnErrorEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region NotificationsCentreEnabled

		public enum NotificationsCentreEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReuseLogFile

		public enum ReuseLogFileEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region LogFileSplitFrequency

		public enum LogFileSplitFrequencyEnum
		{
			[EnumMember]Hourly = 10,
			[EnumMember]Daily = 20,
			[EnumMember]Monthly = 30,
			[EnumMember]Yearly = 40,
		}

		#endregion
	
		#region LogFileSplitMode

		public enum LogFileSplitModeEnum
		{
			[EnumMember]Size = 10,
			[EnumMember]Date = 20,
			[EnumMember]Both = 30,
		}

		#endregion
	
		#region LogLevel

		public enum LogLevelEnum
		{
			[EnumMember]None = 0,
			[EnumMember]Error = 10,
			[EnumMember]Warning = 20,
			[EnumMember]Info = 30,
			[EnumMember]Debug = 40,
		}

		#endregion
	
		#region LogMode

		public enum LogModeEnum
		{
			[EnumMember]CRM = 10,
			[EnumMember]File = 20,
			[EnumMember]Both = 30,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region NotificationMessage

	/// <summary>
	/// 'ldv_notificationmessage'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationmessage")]
	public partial class NotificationMessage : GeneratedEntity<NotificationMessage.RelationName>
	{
		
		public NotificationMessage() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Message";
		public const string SchemaName = "ldv_notificationmessage";
		public const string EntityLogicalName = "ldv_notificationmessage";
		public const int EntityTypeCode = 10016;
		
		#region Attributes

		[AttributeLogicalName("activityid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityId == null || ActivityId == Guid.Empty) ? base.Id : ActivityId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activityid");
                    base.Id = value;
                } else {
				    ActivityId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=8192] 
		/// 'ActivityAdditionalParams'.<br />
        /// Additional information provided by the external application as JSON. For internal use only.
        /// </summary>
		[AttributeLogicalName("activityadditionalparams"), MaxLength(8192)]
		public string ActivityAdditionalParameters
		{
			get
			{
				var value = GetAttributeValue<string>("activityadditionalparams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityadditionalparams"))
				    value = (string) backupAttributeCollection["activityadditionalparams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityAdditionalParameters");
					SetAttributeValue("activityadditionalparams", value);
				OnPropertyChanged("ActivityAdditionalParameters");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity.
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? ActivityId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (Guid?) backupAttributeCollection["activityid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityId");
                if (value != null)
					SetAttributeValue("activityid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityId");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityTypeCode'.<br />
        /// Type of activity.
        /// </summary>
		[AttributeLogicalName("activitytypecode")]
		public string ActivityType
		{
			get
			{
				var value = GetAttributeValue<string>("activitytypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitytypecode"))
				    value = (string) backupAttributeCollection["activitytypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityType");
					SetAttributeValue("activitytypecode", value);
				OnPropertyChanged("ActivityType");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ActualDurationMinutes'.<br />
        /// Actual duration of the activity in minutes.
        /// </summary>
		[AttributeLogicalName("actualdurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ActualDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("actualdurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualdurationminutes"))
				    value = (int?) backupAttributeCollection["actualdurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualDuration");
					SetAttributeValue("actualdurationminutes", value);
				OnPropertyChanged("ActualDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ActualEnd'.<br />
        /// Actual end time of the activity.
        /// </summary>
		[AttributeLogicalName("actualend")]
		public DateTime? ActualEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualend"))
				    value = (DateTime?) backupAttributeCollection["actualend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualEnd");
					SetAttributeValue("actualend", value);
				OnPropertyChanged("ActualEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ActualStart'.<br />
        /// Actual start time of the activity.
        /// </summary>
		[AttributeLogicalName("actualstart")]
		public DateTime? ActualStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualstart"))
				    value = (DateTime?) backupAttributeCollection["actualstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualStart");
					SetAttributeValue("actualstart", value);
				OnPropertyChanged("ActualStart");
			}
		}

        /// <summary>
        ///  
		/// 'BCC'.<br />
        /// Blind Carbon-copy (bcc) recipients of the activity.
        /// </summary>
		[AttributeLogicalName("bcc")]
		public ActivityParty[] BCC
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("bcc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bcc"))
				    collection = (EntityCollection) backupAttributeCollection["bcc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("BCC");
				SetAttributeValue("bcc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("BCC");
			}
		}

        /// <summary>
        ///  
		/// 'CC'.<br />
        /// Carbon-copy (cc) recipients of the activity.
        /// </summary>
		[AttributeLogicalName("cc")]
		public ActivityParty[] CC
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("cc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("cc"))
				    collection = (EntityCollection) backupAttributeCollection["cc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("CC");
				SetAttributeValue("cc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("CC");
			}
		}

        /// <summary>
        ///  
		/// 'Community'.<br />
        /// Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.
        /// </summary>
		[AttributeLogicalName("community")]
		public SocialChannelEnum? SocialChannel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("community");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("community"))
				    value = (OptionSetValue) backupAttributeCollection["community"];
                return value == null ? (SocialChannelEnum?) null : (SocialChannelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("SocialChannel");
                if (value != null)
				    SetAttributeValue("community", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("community", value);
				OnPropertyChanged("SocialChannel");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the activity.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the activity was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? DateCreated
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateCreated");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("DateCreated");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the activitypointer.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Customers'.<br />
        /// Customer with which the activity is associated.
        /// </summary>
		[AttributeLogicalName("customers")]
		public ActivityParty[] Customers
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("customers");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customers"))
				    collection = (EntityCollection) backupAttributeCollection["customers"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Customers");
				SetAttributeValue("customers", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Customers");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryLastAttemptedOn'.<br />
        /// Date and time when the delivery of the activity was last attempted.
        /// </summary>
		[AttributeLogicalName("deliverylastattemptedon")]
		public DateTime? DateDeliveryLastAttempted
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("deliverylastattemptedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliverylastattemptedon"))
				    value = (DateTime?) backupAttributeCollection["deliverylastattemptedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateDeliveryLastAttempted");
					SetAttributeValue("deliverylastattemptedon", value);
				OnPropertyChanged("DateDeliveryLastAttempted");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryPriorityCode'.<br />
        /// Priority of delivery of the activity to the email server.
        /// </summary>
		[AttributeLogicalName("deliveryprioritycode")]
		public DeliveryPriorityEnum? DeliveryPriority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("deliveryprioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliveryprioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["deliveryprioritycode"];
                return value == null ? (DeliveryPriorityEnum?) null : (DeliveryPriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DeliveryPriority");
                if (value != null)
				    SetAttributeValue("deliveryprioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("deliveryprioritycode", value);
				OnPropertyChanged("DeliveryPriority");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=1048576] 
		/// 'Description'.<br />
        /// Description of the activity.
        /// </summary>
		[AttributeLogicalName("description"), Required, MaxLength(1048576)]
		public string Message
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Message");
					SetAttributeValue("description", value);
				OnPropertyChanged("Message");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'ExchangeItemId'.<br />
        /// The message id of activity which is returned from Exchange Server.
        /// </summary>
		[AttributeLogicalName("exchangeitemid"), MaxLength(200)]
		public string ExchangeItemID
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeitemid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeitemid"))
				    value = (string) backupAttributeCollection["exchangeitemid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeItemID");
					SetAttributeValue("exchangeitemid", value);
				OnPropertyChanged("ExchangeItemID");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the activitypointer with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'ExchangeWebLink'.<br />
        /// Shows the web link of Activity of type email.
        /// </summary>
		[AttributeLogicalName("exchangeweblink"), MaxLength(1250)]
		public string ExchangeWebLink
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeweblink");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeweblink"))
				    value = (string) backupAttributeCollection["exchangeweblink"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeWebLink");
					SetAttributeValue("exchangeweblink", value);
				OnPropertyChanged("ExchangeWebLink");
			}
		}

        /// <summary>
        ///  
		/// 'From'.<br />
        /// Person who the activity is from.
        /// </summary>
		[AttributeLogicalName("from")]
		public ActivityParty[] From
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("from");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("from"))
				    collection = (EntityCollection) backupAttributeCollection["from"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("From");
				SetAttributeValue("from", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("From");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public RecurringInstanceTypeEnum? RecurringInstanceType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (RecurringInstanceTypeEnum?) null : (RecurringInstanceTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RecurringInstanceType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("RecurringInstanceType");
			}
		}

        /// <summary>
        ///  
		/// 'IsBilled'.<br />
        /// Information regarding whether the activity was billed as part of resolving a case.
        /// </summary>
		[AttributeLogicalName("isbilled")]
		public bool? IsBilled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isbilled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isbilled"))
				    value = (bool?) backupAttributeCollection["isbilled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsBilled");
					SetAttributeValue("isbilled", value);
				OnPropertyChanged("IsBilled");
			}
		}

        /// <summary>
        ///  
		/// 'IsMapiPrivate'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("ismapiprivate")]
		public bool? IsPrivate
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismapiprivate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismapiprivate"))
				    value = (bool?) backupAttributeCollection["ismapiprivate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPrivate");
					SetAttributeValue("ismapiprivate", value);
				OnPropertyChanged("IsPrivate");
			}
		}

        /// <summary>
        ///  
		/// 'IsRegularActivity'.<br />
        /// Information regarding whether the activity is a regular activity type or event type.
        /// </summary>
		[AttributeLogicalName("isregularactivity")]
		public bool? IsRegularActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isregularactivity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isregularactivity"))
				    value = (bool?) backupAttributeCollection["isregularactivity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRegularActivity");
					SetAttributeValue("isregularactivity", value);
				OnPropertyChanged("IsRegularActivity");
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowCreated'.<br />
        /// Information regarding whether the activity was created from a workflow rule.
        /// </summary>
		[AttributeLogicalName("isworkflowcreated")]
		public bool? IsWorkflowCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isworkflowcreated"))
				    value = (bool?) backupAttributeCollection["isworkflowcreated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsWorkflowCreated");
					SetAttributeValue("isworkflowcreated", value);
				OnPropertyChanged("IsWorkflowCreated");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

		[AttributeLogicalName("ldv_contentmodifiedon")]
		public DateTime? ContentModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_contentmodifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_contentmodifiedon"))
				    value = (DateTime?) backupAttributeCollection["ldv_contentmodifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContentModifiedOn");
					SetAttributeValue("ldv_contentmodifiedon", value);
				OnPropertyChanged("ContentModifiedOn");
			}
		}

		[AttributeLogicalName("ldv_isglobalmessage")]
		public bool? GlobalMessage
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isglobalmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isglobalmessage"))
				    value = (bool?) backupAttributeCollection["ldv_isglobalmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GlobalMessage");
					SetAttributeValue("ldv_isglobalmessage", value);
				OnPropertyChanged("GlobalMessage");
			}
		}

		[AttributeLogicalName("ldv_notificationsource"), Required]
		public NotificationSourceEnum? NotificationSource
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_notificationsource");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationsource"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_notificationsource"];
                return value == null ? (NotificationSourceEnum?) null : (NotificationSourceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("NotificationSource");
                if (value != null)
				    SetAttributeValue("ldv_notificationsource", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_notificationsource", value);
				OnPropertyChanged("NotificationSource");
			}
		}

        /// <summary>
        /// [MaximumLength=36] 
		/// 'ldv_RegardingID'.<br />
        /// This should only be used from code when the 'regarding' record is an activity, as the regarding field does not accept activity records.
        /// </summary>
		[AttributeLogicalName("ldv_regardingid"), MaxLength(36)]
		public string RegardingID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingid"))
				    value = (string) backupAttributeCollection["ldv_regardingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingID");
					SetAttributeValue("ldv_regardingid", value);
				OnPropertyChanged("RegardingID");
			}
		}

        /// <summary>
        /// [Range(1, 99999)] 
		/// 'ldv_RegardingTypeCode'.<br />
        /// This should only be used from code when the 'regarding' record is an activity, as the regarding field does not accept activity records.
        /// </summary>
		[AttributeLogicalName("ldv_regardingtypecode"), InRange("1", "99999", typeof(int))]
		public int? RegardingTypeCode
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_regardingtypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingtypecode"))
				    value = (int?) backupAttributeCollection["ldv_regardingtypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingTypeCode");
					SetAttributeValue("ldv_regardingtypecode", value);
				OnPropertyChanged("RegardingTypeCode");
			}
		}

		[AttributeLogicalName("ldv_roleid")]
		public Guid? Role
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Role");
                if (value != null)
				    SetAttributeValue("ldv_roleid", new EntityReference("role", value.Value));
                else
					SetAttributeValue("ldv_roleid", value);
				OnPropertyChanged("Role");
			}
		}

        public string RoleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_teamid")]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("ldv_teamid", new EntityReference("team", value.Value));
                else
					SetAttributeValue("ldv_teamid", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_userid")]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_userid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_userid", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'LeftVoiceMail'.<br />
        /// Left the voice mail
        /// </summary>
		[AttributeLogicalName("leftvoicemail")]
		public bool? LeftVoiceMail
		{
			get
			{
				var value = GetAttributeValue<bool?>("leftvoicemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("leftvoicemail"))
				    value = (bool?) backupAttributeCollection["leftvoicemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LeftVoiceMail");
					SetAttributeValue("leftvoicemail", value);
				OnPropertyChanged("LeftVoiceMail");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of user who last modified the activity.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when activity was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? LastUpdated
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastUpdated");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("LastUpdated");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the activitypointer.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        ///  
		/// 'OptionalAttendees'.<br />
        /// List of optional attendees for the activity.
        /// </summary>
		[AttributeLogicalName("optionalattendees")]
		public ActivityParty[] OptionalAttendees
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("optionalattendees");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("optionalattendees"))
				    collection = (EntityCollection) backupAttributeCollection["optionalattendees"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("OptionalAttendees");
				SetAttributeValue("optionalattendees", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("OptionalAttendees");
			}
		}

        /// <summary>
        ///  
		/// 'Organizer'.<br />
        /// Person who organized the activity.
        /// </summary>
		[AttributeLogicalName("organizer")]
		public ActivityParty[] Organizer
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("organizer");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizer"))
				    collection = (EntityCollection) backupAttributeCollection["organizer"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Organizer");
				SetAttributeValue("organizer", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Organizer");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier of the business unit that owns the activity.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team that owns the activity.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user that owns the activity.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Partners'.<br />
        /// Outsource vendor with which activity is associated.
        /// </summary>
		[AttributeLogicalName("partners")]
		public ActivityParty[] OutsourceVendors
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("partners");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partners"))
				    collection = (EntityCollection) backupAttributeCollection["partners"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("OutsourceVendors");
				SetAttributeValue("partners", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("OutsourceVendors");
			}
		}

        /// <summary>
        ///  
		/// 'PostponeActivityProcessingUntil'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("postponeactivityprocessinguntil")]
		public DateTime? Delayactivityprocessinguntil
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("postponeactivityprocessinguntil"))
				    value = (DateTime?) backupAttributeCollection["postponeactivityprocessinguntil"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Delayactivityprocessinguntil");
					SetAttributeValue("postponeactivityprocessinguntil", value);
				OnPropertyChanged("Delayactivityprocessinguntil");
			}
		}

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Priority of the activity.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityEnum? Priority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityEnum?) null : (PriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Priority");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("Priority");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Unique identifier of the Process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// Unique identifier of the object with which the activity is associated.
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Regarding");
					SetAttributeValue("regardingobjectid", value);
				OnPropertyChanged("Regarding");
			}
		}

        public string RegardingName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'RequiredAttendees'.<br />
        /// List of required attendees for the activity.
        /// </summary>
		[AttributeLogicalName("requiredattendees")]
		public ActivityParty[] RequiredAttendees
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("requiredattendees");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("requiredattendees"))
				    collection = (EntityCollection) backupAttributeCollection["requiredattendees"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("RequiredAttendees");
				SetAttributeValue("requiredattendees", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("RequiredAttendees");
			}
		}

        /// <summary>
        ///  
		/// 'Resources'.<br />
        /// Users or facility/equipment that are required for the activity.
        /// </summary>
		[AttributeLogicalName("resources")]
		public ActivityParty[] Resources
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("resources");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resources"))
				    collection = (EntityCollection) backupAttributeCollection["resources"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Resources");
				SetAttributeValue("resources", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Resources");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ScheduledDurationMinutes'.<br />
        /// Scheduled duration of the activity, specified in minutes.
        /// </summary>
		[AttributeLogicalName("scheduleddurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ScheduledDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("scheduleddurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduleddurationminutes"))
				    value = (int?) backupAttributeCollection["scheduleddurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledDuration");
					SetAttributeValue("scheduleddurationminutes", value);
				OnPropertyChanged("ScheduledDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? DueDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DueDate");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("DueDate");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("StartDate");
			}
		}

        /// <summary>
        ///  
		/// 'SenderMailboxId'.<br />
        /// Unique identifier of the mailbox associated with the sender of the email message.
        /// </summary>
		[AttributeLogicalName("sendermailboxid")]
		public Guid? SendersMailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SendersMailbox");
                if (value != null)
				    SetAttributeValue("sendermailboxid", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("sendermailboxid", value);
				OnPropertyChanged("SendersMailbox");
			}
		}

        public string SendersMailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SentOn'.<br />
        /// Date and time when the activity was sent.
        /// </summary>
		[AttributeLogicalName("senton")]
		public DateTime? DateSent
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("senton");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("senton"))
				    value = (DateTime?) backupAttributeCollection["senton"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateSent");
					SetAttributeValue("senton", value);
				OnPropertyChanged("DateSent");
			}
		}

        /// <summary>
        ///  
		/// 'SeriesId'.<br />
        /// Uniqueidentifier specifying the id of recurring series of an instance.
        /// </summary>
		[AttributeLogicalName("seriesid")]
		public Guid? SeriesId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("seriesid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("seriesid"))
				    value = (Guid?) backupAttributeCollection["seriesid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SeriesId");
					SetAttributeValue("seriesid", value);
				OnPropertyChanged("SeriesId");
			}
		}

        /// <summary>
        ///  
		/// 'ServiceId'.<br />
        /// Unique identifier of an associated service.
        /// </summary>
		[AttributeLogicalName("serviceid")]
		public Guid? Service
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Service");
                if (value != null)
				    SetAttributeValue("serviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("serviceid", value);
				OnPropertyChanged("Service");
			}
		}

        public string ServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the case record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SortDate'.<br />
        /// Shows the date and time by which the activities are sorted.
        /// </summary>
		[AttributeLogicalName("sortdate")]
		public DateTime? SortDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("sortdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sortdate"))
				    value = (DateTime?) backupAttributeCollection["sortdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SortDate");
					SetAttributeValue("sortdate", value);
				OnPropertyChanged("SortDate");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Unique identifier of the Stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Status of the activity.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public ActivityStatusEnum? ActivityStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (ActivityStatusEnum?) null : (ActivityStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ActivityStatus");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("ActivityStatus");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Reason for the status of the activity.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=400] 
		/// 'Subject'.<br />
        /// Subject associated with the activity.
        /// </summary>
		[AttributeLogicalName("subject"), Required, MaxLength(400)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("subject");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subject"))
				    value = (string) backupAttributeCollection["subject"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("subject", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'To'.<br />
        /// Person who is the receiver of the activity.
        /// </summary>
		[AttributeLogicalName("to")]
		public ActivityParty[] To
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("to");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("to"))
				    collection = (EntityCollection) backupAttributeCollection["to"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("To");
				SetAttributeValue("to", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("To");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the activitypointer.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the activity.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId")]
		public NotificationMessageRole[] NotificationMessageRolesOfNotificationMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageRolesOfNotificationMessage");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfNotificationMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfNotificationMessage");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId")]
		public NotificationMessageUser[] NotificationMessageUsersOfNotificationMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageUsersOfNotificationMessage");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId")]
		public NotificationRead[] NotificationReadsOfNotificationMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationReadsOfNotificationMessage");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_activity_parties'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_activity_parties")]
		public ActivityParty[] ActivityPartysOfActivity
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("ldv_notificationmessage_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("ldv_notificationmessage_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_createdby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_owninguser'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_owninguser"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_owninguser", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_owninguser", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_team_owningteam'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_team_owningteam"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("ldv_notificationmessage_team_owningteam", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("ldv_notificationmessage_team_owningteam", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_notificationmessage_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessage_UserId"), AttributeLogicalName("ldv_userid")]
		public User UserAsUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessage_UserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessage_UserId", null, value);
				OnPropertyChanged("UserAsUser");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_team_ldv_notificationmessage_TeamId'
		/// </summary>
		[RelationshipSchemaName("ldv_team_ldv_notificationmessage_TeamId"), AttributeLogicalName("ldv_teamid")]
		public Team TeamAsTeam
		{
			get
			{
				return GetRelatedEntity<Team>("ldv_team_ldv_notificationmessage_TeamId", null);
			}
			set
			{
				OnPropertyChanging("TeamAsTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("ldv_team_ldv_notificationmessage_TeamId", null, value);
				OnPropertyChanged("TeamAsTeam");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageRolesOfNotificationMessage = new RelationName("NotificationMessageRolesOfNotificationMessage");
			public static RelationName NotificationMessageTeamsOfNotificationMessage = new RelationName("NotificationMessageTeamsOfNotificationMessage");
			public static RelationName NotificationMessageUsersOfNotificationMessage = new RelationName("NotificationMessageUsersOfNotificationMessage");
			public static RelationName NotificationReadsOfNotificationMessage = new RelationName("NotificationReadsOfNotificationMessage");
			public static RelationName ActivityPartysOfActivity = new RelationName("ActivityPartysOfActivity");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsUser = new RelationName("UserAsUser");
			public static RelationName TeamAsTeam = new RelationName("TeamAsTeam");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageRolesOfNotificationMessage"] = new object[] { "NotificationMessageRolesOfNotificationMessage", "ldv_notificationmessagerole", "ldv_notificationmessage", "ldv_notificationmessageid", "activityid", "activityid", "activityid", "ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageTeamsOfNotificationMessage"] = new object[] { "NotificationMessageTeamsOfNotificationMessage", "ldv_notificationmessageteam", "ldv_notificationmessage", "ldv_notificationmessageid", "activityid", "activityid", "activityid", "ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageUsersOfNotificationMessage"] = new object[] { "NotificationMessageUsersOfNotificationMessage", "ldv_notificationmessageuser", "ldv_notificationmessage", "ldv_notificationmessageid", "activityid", "activityid", "activityid", "ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationReadsOfNotificationMessage"] = new object[] { "NotificationReadsOfNotificationMessage", "ldv_notificationread", "ldv_notificationmessage", "ldv_notificationmessageid", "activityid", "activityid", "activityid", "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", typeof (NotificationRead[]) };
			relationProperties["ActivityPartysOfActivity"] = new object[] { "ActivityPartysOfActivity", "activityparty", "ldv_notificationmessage", "activityid", "activityid", "activityid", "activityid", "ldv_notificationmessage_activity_parties", typeof (ActivityParty[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationmessage", "systemuserid", "createdby", "activityid", "activityid", "ldv_notificationmessage_systemuser_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationmessage", "systemuserid", "createdonbehalfby", "activityid", "activityid", "ldv_notificationmessage_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationmessage", "systemuserid", "modifiedby", "activityid", "activityid", "ldv_notificationmessage_systemuser_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationmessage", "systemuserid", "modifiedonbehalfby", "activityid", "activityid", "ldv_notificationmessage_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationmessage", "systemuserid", "owninguser", "activityid", "activityid", "ldv_notificationmessage_systemuser_owninguser", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_notificationmessage", "teamid", "owningteam", "activityid", "activityid", "ldv_notificationmessage_team_owningteam", typeof (Team) };
			relationProperties["UserAsUser"] = new object[] { "UserAsUser", "systemuser", "ldv_notificationmessage", "systemuserid", "ldv_userid", "activityid", "activityid", "ldv_systemuser_ldv_notificationmessage_UserId", typeof (User) };
			relationProperties["TeamAsTeam"] = new object[] { "TeamAsTeam", "team", "ldv_notificationmessage", "teamid", "ldv_teamid", "activityid", "activityid", "ldv_team_ldv_notificationmessage_TeamId", typeof (Team) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationMessage(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activityid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ActivityType

		public enum ActivityTypeEnum
		{
			[EnumMember]Fax = 4204,
			[EnumMember]PhoneCall = 4210,
			[EnumMember]Email = 4202,
			[EnumMember]Letter = 4207,
			[EnumMember]Appointment = 4201,
			[EnumMember]ServiceActivity = 4214,
			[EnumMember]OpportunityClose = 4208,
			[EnumMember]OrderClose = 4209,
			[EnumMember]QuoteClose = 4211,
			[EnumMember]CaseResolution = 4206,
			[EnumMember]Task = 4212,
			[EnumMember]CampaignResponse = 4401,
			[EnumMember]CampaignActivity = 4402,
			[EnumMember]BulkOperation = 4406,
			[EnumMember]RecurringAppointment = 4251,
			[EnumMember]NotificationMessage = 10016,
			[EnumMember]PushMessage = 10026,
			[EnumMember]SMS = 10031,
		}

		#endregion
	
		#region SocialChannel

		public enum SocialChannelEnum
		{
			[EnumMember]Facebook = 1,
			[EnumMember]Twitter = 2,
			[EnumMember]Other = 0,
		}

		#endregion
	
		#region DeliveryPriority

		public enum DeliveryPriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region RecurringInstanceType

		public enum RecurringInstanceTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsBilled

		public enum IsBilledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRegularActivity

		public enum IsRegularActivityEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsWorkflowCreated

		public enum IsWorkflowCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GlobalMessage

		public enum GlobalMessageEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region NotificationSource

		public enum NotificationSourceEnum
		{
			[EnumMember]Manual = 1,
			[EnumMember]Email = 2,
			[EnumMember]Task = 3,
			[EnumMember]Other = 999,
		}

		#endregion
	
		#region LeftVoiceMail

		public enum LeftVoiceMailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Priority

		public enum PriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region ActivityStatus

		public enum ActivityStatusEnum
		{
			[EnumMember]Open = 0,
			[EnumMember]Completed = 1,
			[EnumMember]Canceled = 2,
			[EnumMember]Scheduled = 3,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Draft = 753240000,
			[EnumMember]Open = 1,
			[EnumMember]Completed = 2,
			[EnumMember]Canceled = 3,
			[EnumMember]Scheduled = 4,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivityType = "activitytypecode";
				public const string SocialChannel = "community";
				public const string DeliveryPriority = "deliveryprioritycode";
				public const string RecurringInstanceType = "instancetypecode";
				public const string IsBilled = "isbilled";
				public const string IsPrivate = "ismapiprivate";
				public const string IsRegularActivity = "isregularactivity";
				public const string IsWorkflowCreated = "isworkflowcreated";
				public const string GlobalMessage = "ldv_isglobalmessage";
				public const string NotificationSource = "ldv_notificationsource";
				public const string LeftVoiceMail = "leftvoicemail";
				public const string Priority = "prioritycode";
				public const string ActivityStatus = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityType 
				{
					public const string Fax_1033 = "Fax";
					public const string PhoneCall_1033 = "Phone Call";
					public const string Email_1033 = "Email";
					public const string Letter_1033 = "Letter";
					public const string Appointment_1033 = "Appointment";
					public const string ServiceActivity_1033 = "Service Activity";
					public const string OpportunityClose_1033 = "Opportunity Close";
					public const string OrderClose_1033 = "Order Close";
					public const string QuoteClose_1033 = "Quote Close";
					public const string CaseResolution_1033 = "Case Resolution";
					public const string Task_1033 = "Task";
					public const string CampaignResponse_1033 = "Campaign Response";
					public const string CampaignActivity_1033 = "Campaign Activity";
					public const string BulkOperation_1033 = "Bulk Operation";
					public const string RecurringAppointment_1033 = "Recurring Appointment";
					public const string NotificationMessage_1033 = "Notification Message";
					public const string PushMessage_1033 = "Push Message";
					public const string SMS_1033 = "SMS";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityType), label, languageCode);
					}
				}

				public static class SocialChannel 
				{
					public const string Facebook_1033 = "Facebook";
					public const string Twitter_1033 = "Twitter";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SocialChannel), label, languageCode);
					}
				}

				public static class DeliveryPriority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeliveryPriority), label, languageCode);
					}
				}

				public static class RecurringInstanceType 
				{
					public const string NotRecurring_1033 = "Not Recurring";
					public const string RecurringMaster_1033 = "Recurring Master";
					public const string RecurringInstance_1033 = "Recurring Instance";
					public const string RecurringException_1033 = "Recurring Exception";
					public const string RecurringFutureException_1033 = "Recurring Future Exception";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RecurringInstanceType), label, languageCode);
					}
				}

				public static class IsBilled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsBilled), label, languageCode);
					}
				}

				public static class IsPrivate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPrivate), label, languageCode);
					}
				}

				public static class IsRegularActivity 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsRegularActivity), label, languageCode);
					}
				}

				public static class IsWorkflowCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsWorkflowCreated), label, languageCode);
					}
				}

				public static class GlobalMessage 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GlobalMessage), label, languageCode);
					}
				}

				public static class NotificationSource 
				{
					public const string Manual_1033 = "Manual";
					public const string Email_1033 = "Email";
					public const string Task_1033 = "Task";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(NotificationSource), label, languageCode);
					}
				}

				public static class LeftVoiceMail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(LeftVoiceMail), label, languageCode);
					}
				}

				public static class Priority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Priority), label, languageCode);
					}
				}

				public static class ActivityStatus 
				{
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";
					public const string Scheduled_1033 = "Scheduled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityStatus), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Draft_1033 = "Draft";
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";
					public const string Scheduled_1033 = "Scheduled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string ActivityAdditionalParameters = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityType = "activitytypecode";
			public const string ActualDuration = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string BCC = "bcc";
			public const string CC = "cc";
			public const string SocialChannel = "community";
			public const string CreatedBy = "createdby";
			public const string DateCreated = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string Customers = "customers";
			public const string DateDeliveryLastAttempted = "deliverylastattemptedon";
			public const string DeliveryPriority = "deliveryprioritycode";
			public const string Message = "description";
			public const string ExchangeItemID = "exchangeitemid";
			public const string ExchangeRate = "exchangerate";
			public const string ExchangeWebLink = "exchangeweblink";
			public const string From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string RecurringInstanceType = "instancetypecode";
			public const string IsBilled = "isbilled";
			public const string IsPrivate = "ismapiprivate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ContentModifiedOn = "ldv_contentmodifiedon";
			public const string GlobalMessage = "ldv_isglobalmessage";
			public const string NotificationSource = "ldv_notificationsource";
			public const string RegardingID = "ldv_regardingid";
			public const string RegardingTypeCode = "ldv_regardingtypecode";
			public const string Role = "ldv_roleid";
			public const string Team = "ldv_teamid";
			public const string User = "ldv_userid";
			public const string LeftVoiceMail = "leftvoicemail";
			public const string ModifiedBy = "modifiedby";
			public const string LastUpdated = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string OutsourceVendors = "partners";
			public const string Delayactivityprocessinguntil = "postponeactivityprocessinguntil";
			public const string Priority = "prioritycode";
			public const string Process = "processid";
			public const string Regarding = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string Resources = "resources";
			public const string ScheduledDuration = "scheduleddurationminutes";
			public const string DueDate = "scheduledend";
			public const string StartDate = "scheduledstart";
			public const string SendersMailbox = "sendermailboxid";
			public const string DateSent = "senton";
			public const string SeriesId = "seriesid";
			public const string Service = "serviceid";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string ProcessStage = "stageid";
			public const string ActivityStatus = "statecode";
			public const string StatusReason = "statuscode";
			public const string Title = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string ActivityAdditionalParameters = "ActivityAdditionalParams";
				public const string ActivityId = "ActivityId";
				public const string ActivityType = "ActivityTypeCode";
				public const string ActualDuration = "ActualDurationMinutes";
				public const string ActualEnd = "ActualEnd";
				public const string ActualStart = "ActualStart";
				public const string BCC = "BCC";
				public const string CC = "CC";
				public const string SocialChannel = "Community";
				public const string CreatedBy = "CreatedBy";
				public const string DateCreated = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string Customers = "Customers";
				public const string DateDeliveryLastAttempted = "DeliveryLastAttemptedOn";
				public const string DeliveryPriority = "DeliveryPriorityCode";
				public const string Message = "Description";
				public const string ExchangeItemID = "ExchangeItemId";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExchangeWebLink = "ExchangeWebLink";
				public const string From = "From";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string RecurringInstanceType = "InstanceTypeCode";
				public const string IsBilled = "IsBilled";
				public const string IsPrivate = "IsMapiPrivate";
				public const string IsRegularActivity = "IsRegularActivity";
				public const string IsWorkflowCreated = "IsWorkflowCreated";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string ContentModifiedOn = "ldv_ContentModifiedOn";
				public const string GlobalMessage = "ldv_IsGlobalMessage";
				public const string NotificationSource = "ldv_NotificationSource";
				public const string RegardingID = "ldv_RegardingID";
				public const string RegardingTypeCode = "ldv_RegardingTypeCode";
				public const string Role = "ldv_RoleId";
				public const string Team = "ldv_TeamId";
				public const string User = "ldv_UserId";
				public const string LeftVoiceMail = "LeftVoiceMail";
				public const string ModifiedBy = "ModifiedBy";
				public const string LastUpdated = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string OptionalAttendees = "OptionalAttendees";
				public const string Organizer = "Organizer";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string OutsourceVendors = "Partners";
				public const string Delayactivityprocessinguntil = "PostponeActivityProcessingUntil";
				public const string Priority = "PriorityCode";
				public const string Process = "ProcessId";
				public const string Regarding = "RegardingObjectId";
				public const string RequiredAttendees = "RequiredAttendees";
				public const string Resources = "Resources";
				public const string ScheduledDuration = "ScheduledDurationMinutes";
				public const string DueDate = "ScheduledEnd";
				public const string StartDate = "ScheduledStart";
				public const string SendersMailbox = "SenderMailboxId";
				public const string DateSent = "SentOn";
				public const string SeriesId = "SeriesId";
				public const string Service = "ServiceId";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SortDate = "SortDate";
				public const string ProcessStage = "StageId";
				public const string ActivityStatus = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string Title = "Subject";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string To = "To";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityAdditionalParameters
				{
					public const string _1033 = "Activity Additional Parameters";
				}

				public static class ActivityId
				{
					public const string _1033 = "Activity";
				}

				public static class ActivityType
				{
					public const string _1033 = "Activity Type";
				}

				public static class ActualDuration
				{
					public const string _1033 = "Actual Duration";
				}

				public static class ActualEnd
				{
					public const string _1033 = "Actual End";
				}

				public static class ActualStart
				{
					public const string _1033 = "Actual Start";
				}

				public static class BCC
				{
					public const string _1033 = "BCC";
				}

				public static class CC
				{
					public const string _1033 = "CC";
				}

				public static class SocialChannel
				{
					public const string _1033 = "Social Channel";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class DateCreated
				{
					public const string _1033 = "Date Created";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class Customers
				{
					public const string _1033 = "Customers";
				}

				public static class DateDeliveryLastAttempted
				{
					public const string _1033 = "Date Delivery Last Attempted";
				}

				public static class DeliveryPriority
				{
					public const string _1033 = "Delivery Priority";
				}

				public static class Message
				{
					public const string _1033 = "Message";
				}

				public static class ExchangeItemID
				{
					public const string _1033 = "Exchange Item ID";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ExchangeWebLink
				{
					public const string _1033 = "Exchange WebLink";
				}

				public static class From
				{
					public const string _1033 = "From";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class RecurringInstanceType
				{
					public const string _1033 = "Recurring Instance Type";
				}

				public static class IsBilled
				{
					public const string _1033 = "Is Billed";
				}

				public static class IsPrivate
				{
					public const string _1033 = "Is Private";
				}

				public static class IsRegularActivity
				{
					public const string _1033 = "Is Regular Activity";
				}

				public static class IsWorkflowCreated
				{
					public const string _1033 = "Is Workflow Created";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class ContentModifiedOn
				{
					public const string _1033 = "Content Modified On";
				}

				public static class GlobalMessage
				{
					public const string _1033 = "Global Message";
				}

				public static class NotificationSource
				{
					public const string _1033 = "Notification Source";
				}

				public static class RegardingID
				{
					public const string _1033 = "Regarding ID";
				}

				public static class RegardingTypeCode
				{
					public const string _1033 = "Regarding Type Code";
				}

				public static class Role
				{
					public const string _1033 = "Role";
				}

				public static class Team
				{
					public const string _1033 = "Team";
				}

				public static class User
				{
					public const string _1033 = "User";
				}

				public static class LeftVoiceMail
				{
					public const string _1033 = "Left Voice Mail";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class LastUpdated
				{
					public const string _1033 = "Last Updated";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OptionalAttendees
				{
					public const string _1033 = "Optional Attendees";
				}

				public static class Organizer
				{
					public const string _1033 = "Organizer";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class OutsourceVendors
				{
					public const string _1033 = "Outsource Vendors";
				}

				public static class Delayactivityprocessinguntil
				{
					public const string _1033 = "Delay activity processing until";
				}

				public static class Priority
				{
					public const string _1033 = "Priority";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class Regarding
				{
					public const string _1033 = "Regarding";
				}

				public static class RequiredAttendees
				{
					public const string _1033 = "Required Attendees";
				}

				public static class Resources
				{
					public const string _1033 = "Resources";
				}

				public static class ScheduledDuration
				{
					public const string _1033 = "Scheduled Duration";
				}

				public static class DueDate
				{
					public const string _1033 = "Due Date";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class SendersMailbox
				{
					public const string _1033 = "Sender\'s Mailbox";
				}

				public static class DateSent
				{
					public const string _1033 = "Date Sent";
				}

				public static class SeriesId
				{
					public const string _1033 = "Series Id";
				}

				public static class Service
				{
					public const string _1033 = "Service";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SortDate
				{
					public const string _1033 = "Sort Date";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class ActivityStatus
				{
					public const string _1033 = "Activity Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class To
				{
					public const string _1033 = "To";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string NotificationMessageRolesOfNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId";
				public const string NotificationMessageTeamsOfNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId";
				public const string NotificationMessageUsersOfNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId";
				public const string NotificationReadsOfNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId";
				public const string ActivityPartysOfActivity = "ldv_notificationmessage_activity_parties";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedBy = "ldv_notificationmessage_systemuser_createdby";
				public const string UserAsCreatedByDelegate = "ldv_notificationmessage_systemuser_createdonbehalfby";
				public const string UserAsModifiedBy = "ldv_notificationmessage_systemuser_modifiedby";
				public const string UserAsModifiedByDelegate = "ldv_notificationmessage_systemuser_modifiedonbehalfby";
				public const string UserAsOwningUser = "ldv_notificationmessage_systemuser_owninguser";
				public const string TeamAsOwningTeam = "ldv_notificationmessage_team_owningteam";
				public const string UserAsUser = "ldv_systemuser_ldv_notificationmessage_UserId";
				public const string TeamAsTeam = "ldv_team_ldv_notificationmessage_TeamId";

				public static class Lookups
				{
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsOwningUser = "owninguser";
					public const string TeamAsOwningTeam = "owningteam";
					public const string UserAsUser = "ldv_userid";
					public const string TeamAsTeam = "ldv_teamid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region NotificationMessageRole

	/// <summary>
	/// 'ldv_notificationmessagerole'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationmessagerole")]
	public partial class NotificationMessageRole : GeneratedEntity<NotificationMessageRole.RelationName>
	{
		
		public NotificationMessageRole() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Message Role";
		public const string SchemaName = "ldv_notificationmessagerole";
		public const string EntityLogicalName = "ldv_notificationmessagerole";
		public const int EntityTypeCode = 10017;
		
		#region Attributes

		[AttributeLogicalName("ldv_notificationmessageroleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (NotificationMessageRoleId == null || NotificationMessageRoleId == Guid.Empty) ? base.Id : NotificationMessageRoleId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_notificationmessageroleid");
                    base.Id = value;
                } else {
				    NotificationMessageRoleId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_notificationmessageid"), Required]
		public Guid? NotificationMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("NotificationMessage");
                if (value != null)
				    SetAttributeValue("ldv_notificationmessageid", new EntityReference("ldv_notificationmessage", value.Value));
                else
					SetAttributeValue("ldv_notificationmessageid", value);
				OnPropertyChanged("NotificationMessage");
			}
		}

        public string NotificationMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_notificationmessageroleId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_notificationmessageroleid")]
		public Guid? NotificationMessageRoleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_notificationmessageroleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageroleid"))
				    value = (Guid?) backupAttributeCollection["ldv_notificationmessageroleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRoleId");
                if (value != null)
					SetAttributeValue("ldv_notificationmessageroleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("NotificationMessageRoleId");
			}
		}

		[AttributeLogicalName("ldv_roleid"), Required]
		public Guid? Role
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Role");
                if (value != null)
				    SetAttributeValue("ldv_roleid", new EntityReference("role", value.Value));
                else
					SetAttributeValue("ldv_roleid", value);
				OnPropertyChanged("Role");
			}
		}

        public string RoleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Notification Message Role
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Notification Message Role
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId"), AttributeLogicalName("ldv_notificationmessageid")]
		public NotificationMessage NotificationMessageAsNotificationMessage
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageAsNotificationMessage");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessagerole_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessagerole_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessagerole_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessagerole_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessagerole_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessagerole_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessagerole_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessagerole_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessagerole_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessagerole_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessagerole_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessagerole_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_ldv_notificationmessagerole'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessagerole"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_ldv_notificationmessagerole", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_ldv_notificationmessagerole", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_notificationmessagerole'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessagerole"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_notificationmessagerole", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_notificationmessagerole", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsNotificationMessage = new RelationName("NotificationMessageAsNotificationMessage");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsNotificationMessage"] = new object[] { "NotificationMessageAsNotificationMessage", "ldv_notificationmessage", "ldv_notificationmessagerole", "activityid", "ldv_notificationmessageid", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId", typeof (NotificationMessage) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationmessagerole", "systemuserid", "createdby", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "lk_ldv_notificationmessagerole_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationmessagerole", "systemuserid", "createdonbehalfby", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "lk_ldv_notificationmessagerole_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationmessagerole", "systemuserid", "modifiedby", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "lk_ldv_notificationmessagerole_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationmessagerole", "systemuserid", "modifiedonbehalfby", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "lk_ldv_notificationmessagerole_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_notificationmessagerole", "teamid", "owningteam", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "team_ldv_notificationmessagerole", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationmessagerole", "systemuserid", "owninguser", "ldv_notificationmessageroleid", "ldv_notificationmessageroleid", "user_ldv_notificationmessagerole", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationMessageRole(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_notificationmessageroleid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Name = "ldv_name";
			public const string NotificationMessage = "ldv_notificationmessageid";
			public const string NotificationMessageRoleId = "ldv_notificationmessageroleid";
			public const string Role = "ldv_roleid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string Name = "ldv_name";
				public const string NotificationMessage = "ldv_NotificationMessageId";
				public const string NotificationMessageRoleId = "ldv_notificationmessageroleId";
				public const string Role = "ldv_RoleId";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class NotificationMessage
				{
					public const string _1033 = "Notification Message";
				}

				public static class NotificationMessageRoleId
				{
					public const string _1033 = "Notification Message Role";
				}

				public static class Role
				{
					public const string _1033 = "Role";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string NotificationMessageAsNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationmessagerole_NotificationMessageId";
				public const string UserAsCreatedBy = "lk_ldv_notificationmessagerole_createdby";
				public const string UserAsCreatedByDelegate = "lk_ldv_notificationmessagerole_createdonbehalfby";
				public const string UserAsModifiedBy = "lk_ldv_notificationmessagerole_modifiedby";
				public const string UserAsModifiedByDelegate = "lk_ldv_notificationmessagerole_modifiedonbehalfby";
				public const string TeamAsOwningTeam = "team_ldv_notificationmessagerole";
				public const string UserAsOwningUser = "user_ldv_notificationmessagerole";

				public static class Lookups
				{
					public const string NotificationMessageAsNotificationMessage = "ldv_notificationmessageid";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string TeamAsOwningTeam = "owningteam";
					public const string UserAsOwningUser = "owninguser";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region NotificationMessageTeam

	/// <summary>
	/// 'ldv_notificationmessageteam'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationmessageteam")]
	public partial class NotificationMessageTeam : GeneratedEntity<NotificationMessageTeam.RelationName>
	{
		
		public NotificationMessageTeam() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Message Team";
		public const string SchemaName = "ldv_notificationmessageteam";
		public const string EntityLogicalName = "ldv_notificationmessageteam";
		public const int EntityTypeCode = 10018;
		
		#region Attributes

		[AttributeLogicalName("ldv_notificationmessageteamid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (NotificationMessageTeamId == null || NotificationMessageTeamId == Guid.Empty) ? base.Id : NotificationMessageTeamId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_notificationmessageteamid");
                    base.Id = value;
                } else {
				    NotificationMessageTeamId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_notificationmessageid"), Required]
		public Guid? NotificationMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("NotificationMessage");
                if (value != null)
				    SetAttributeValue("ldv_notificationmessageid", new EntityReference("ldv_notificationmessage", value.Value));
                else
					SetAttributeValue("ldv_notificationmessageid", value);
				OnPropertyChanged("NotificationMessage");
			}
		}

        public string NotificationMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_notificationmessageteamId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_notificationmessageteamid")]
		public Guid? NotificationMessageTeamId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_notificationmessageteamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageteamid"))
				    value = (Guid?) backupAttributeCollection["ldv_notificationmessageteamid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamId");
                if (value != null)
					SetAttributeValue("ldv_notificationmessageteamid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("NotificationMessageTeamId");
			}
		}

		[AttributeLogicalName("ldv_teamid"), Required]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("ldv_teamid", new EntityReference("team", value.Value));
                else
					SetAttributeValue("ldv_teamid", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Notification Message Team
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Notification Message Team
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId"), AttributeLogicalName("ldv_notificationmessageid")]
		public NotificationMessage NotificationMessageAsNotificationMessage
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageAsNotificationMessage");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_team_ldv_notificationmessageteam_TeamId'
		/// </summary>
		[RelationshipSchemaName("ldv_team_ldv_notificationmessageteam_TeamId"), AttributeLogicalName("ldv_teamid")]
		public Team TeamAsTeam
		{
			get
			{
				return GetRelatedEntity<Team>("ldv_team_ldv_notificationmessageteam_TeamId", null);
			}
			set
			{
				OnPropertyChanging("TeamAsTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("ldv_team_ldv_notificationmessageteam_TeamId", null, value);
				OnPropertyChanged("TeamAsTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageteam_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageteam_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageteam_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageteam_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageteam_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageteam_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageteam_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageteam_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageteam_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageteam_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageteam_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageteam_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_ldv_notificationmessageteam'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessageteam"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_ldv_notificationmessageteam", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_ldv_notificationmessageteam", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_notificationmessageteam'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessageteam"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_notificationmessageteam", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_notificationmessageteam", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsNotificationMessage = new RelationName("NotificationMessageAsNotificationMessage");
			public static RelationName TeamAsTeam = new RelationName("TeamAsTeam");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsNotificationMessage"] = new object[] { "NotificationMessageAsNotificationMessage", "ldv_notificationmessage", "ldv_notificationmessageteam", "activityid", "ldv_notificationmessageid", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId", typeof (NotificationMessage) };
			relationProperties["TeamAsTeam"] = new object[] { "TeamAsTeam", "team", "ldv_notificationmessageteam", "teamid", "ldv_teamid", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "ldv_team_ldv_notificationmessageteam_TeamId", typeof (Team) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationmessageteam", "systemuserid", "createdby", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "lk_ldv_notificationmessageteam_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationmessageteam", "systemuserid", "createdonbehalfby", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "lk_ldv_notificationmessageteam_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationmessageteam", "systemuserid", "modifiedby", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "lk_ldv_notificationmessageteam_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationmessageteam", "systemuserid", "modifiedonbehalfby", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "lk_ldv_notificationmessageteam_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_notificationmessageteam", "teamid", "owningteam", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "team_ldv_notificationmessageteam", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationmessageteam", "systemuserid", "owninguser", "ldv_notificationmessageteamid", "ldv_notificationmessageteamid", "user_ldv_notificationmessageteam", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationMessageTeam(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_notificationmessageteamid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Name = "ldv_name";
			public const string NotificationMessage = "ldv_notificationmessageid";
			public const string NotificationMessageTeamId = "ldv_notificationmessageteamid";
			public const string Team = "ldv_teamid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string Name = "ldv_name";
				public const string NotificationMessage = "ldv_NotificationMessageId";
				public const string NotificationMessageTeamId = "ldv_notificationmessageteamId";
				public const string Team = "ldv_TeamId";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class NotificationMessage
				{
					public const string _1033 = "Notification Message";
				}

				public static class NotificationMessageTeamId
				{
					public const string _1033 = "Notification Message Team";
				}

				public static class Team
				{
					public const string _1033 = "Team";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string NotificationMessageAsNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationmessageteam_NotificationMessageId";
				public const string TeamAsTeam = "ldv_team_ldv_notificationmessageteam_TeamId";
				public const string UserAsCreatedBy = "lk_ldv_notificationmessageteam_createdby";
				public const string UserAsCreatedByDelegate = "lk_ldv_notificationmessageteam_createdonbehalfby";
				public const string UserAsModifiedBy = "lk_ldv_notificationmessageteam_modifiedby";
				public const string UserAsModifiedByDelegate = "lk_ldv_notificationmessageteam_modifiedonbehalfby";
				public const string TeamAsOwningTeam = "team_ldv_notificationmessageteam";
				public const string UserAsOwningUser = "user_ldv_notificationmessageteam";

				public static class Lookups
				{
					public const string NotificationMessageAsNotificationMessage = "ldv_notificationmessageid";
					public const string TeamAsTeam = "ldv_teamid";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string TeamAsOwningTeam = "owningteam";
					public const string UserAsOwningUser = "owninguser";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region NotificationMessageUser

	/// <summary>
	/// 'ldv_notificationmessageuser'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationmessageuser")]
	public partial class NotificationMessageUser : GeneratedEntity<NotificationMessageUser.RelationName>
	{
		
		public NotificationMessageUser() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Message User";
		public const string SchemaName = "ldv_notificationmessageuser";
		public const string EntityLogicalName = "ldv_notificationmessageuser";
		public const int EntityTypeCode = 10019;
		
		#region Attributes

		[AttributeLogicalName("ldv_notificationmessageuserid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (NotificationMessageUserId == null || NotificationMessageUserId == Guid.Empty) ? base.Id : NotificationMessageUserId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_notificationmessageuserid");
                    base.Id = value;
                } else {
				    NotificationMessageUserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_notificationmessageid"), Required]
		public Guid? NotificationMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("NotificationMessage");
                if (value != null)
				    SetAttributeValue("ldv_notificationmessageid", new EntityReference("ldv_notificationmessage", value.Value));
                else
					SetAttributeValue("ldv_notificationmessageid", value);
				OnPropertyChanged("NotificationMessage");
			}
		}

        public string NotificationMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_notificationmessageuserId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_notificationmessageuserid")]
		public Guid? NotificationMessageUserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_notificationmessageuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageuserid"))
				    value = (Guid?) backupAttributeCollection["ldv_notificationmessageuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUserId");
                if (value != null)
					SetAttributeValue("ldv_notificationmessageuserid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("NotificationMessageUserId");
			}
		}

		[AttributeLogicalName("ldv_userid"), Required]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_userid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_userid", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Notification Message User
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Notification Message User
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId"), AttributeLogicalName("ldv_notificationmessageid")]
		public NotificationMessage NotificationMessageAsNotificationMessage
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageAsNotificationMessage");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_notificationmessageuser_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessageuser_UserId"), AttributeLogicalName("ldv_userid")]
		public User UserAsUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessageuser_UserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessageuser_UserId", null, value);
				OnPropertyChanged("UserAsUser");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageuser_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageuser_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageuser_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageuser_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageuser_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageuser_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageuser_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationmessageuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationmessageuser_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationmessageuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_ldv_notificationmessageuser'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessageuser"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_ldv_notificationmessageuser", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_ldv_notificationmessageuser", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_notificationmessageuser'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessageuser"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_notificationmessageuser", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_notificationmessageuser", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsNotificationMessage = new RelationName("NotificationMessageAsNotificationMessage");
			public static RelationName UserAsUser = new RelationName("UserAsUser");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsNotificationMessage"] = new object[] { "NotificationMessageAsNotificationMessage", "ldv_notificationmessage", "ldv_notificationmessageuser", "activityid", "ldv_notificationmessageid", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "ldv_ldv_notificationmessage_ldv_notificationmessageuser_NotificationMessageId", typeof (NotificationMessage) };
			relationProperties["UserAsUser"] = new object[] { "UserAsUser", "systemuser", "ldv_notificationmessageuser", "systemuserid", "ldv_userid", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "ldv_systemuser_ldv_notificationmessageuser_UserId", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationmessageuser", "systemuserid", "createdby", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "lk_ldv_notificationmessageuser_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationmessageuser", "systemuserid", "createdonbehalfby", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "lk_ldv_notificationmessageuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationmessageuser", "systemuserid", "modifiedby", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "lk_ldv_notificationmessageuser_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationmessageuser", "systemuserid", "modifiedonbehalfby", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "lk_ldv_notificationmessageuser_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_notificationmessageuser", "teamid", "owningteam", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "team_ldv_notificationmessageuser", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationmessageuser", "systemuserid", "owninguser", "ldv_notificationmessageuserid", "ldv_notificationmessageuserid", "user_ldv_notificationmessageuser", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationMessageUser(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_notificationmessageuserid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region NotificationRead

	/// <summary>
	/// 'ldv_notificationread'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationread")]
	public partial class NotificationRead : GeneratedEntity<NotificationRead.RelationName>
	{
		
		public NotificationRead() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Read";
		public const string SchemaName = "ldv_notificationread";
		public const string EntityLogicalName = "ldv_notificationread";
		public const int EntityTypeCode = 10020;
		
		#region Attributes

		[AttributeLogicalName("ldv_notificationreadid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (NotificationReadId == null || NotificationReadId == Guid.Empty) ? base.Id : NotificationReadId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_notificationreadid");
                    base.Id = value;
                } else {
				    NotificationReadId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? ReadOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReadOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("ReadOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_notificationmessageid"), Required]
		public Guid? NotificationMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("NotificationMessage");
                if (value != null)
				    SetAttributeValue("ldv_notificationmessageid", new EntityReference("ldv_notificationmessage", value.Value));
                else
					SetAttributeValue("ldv_notificationmessageid", value);
				OnPropertyChanged("NotificationMessage");
			}
		}

        public string NotificationMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_notificationreadId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_notificationreadid")]
		public Guid? NotificationReadId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_notificationreadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationreadid"))
				    value = (Guid?) backupAttributeCollection["ldv_notificationreadid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationReadId");
                if (value != null)
					SetAttributeValue("ldv_notificationreadid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("NotificationReadId");
			}
		}

		[AttributeLogicalName("ldv_userid"), Required]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_userid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_userid", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Notification Read
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Notification Read
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId"), AttributeLogicalName("ldv_notificationmessageid")]
		public NotificationMessage NotificationMessageAsNotificationMessage
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageAsNotificationMessage");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_notificationread_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationread_UserId"), AttributeLogicalName("ldv_userid")]
		public User UserAsUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_notificationread_UserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_notificationread_UserId", null, value);
				OnPropertyChanged("UserAsUser");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationread"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_ldv_notificationread", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_ldv_notificationread", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationread"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_notificationread", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_notificationread", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsNotificationMessage = new RelationName("NotificationMessageAsNotificationMessage");
			public static RelationName UserAsUser = new RelationName("UserAsUser");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsNotificationMessage"] = new object[] { "NotificationMessageAsNotificationMessage", "ldv_notificationmessage", "ldv_notificationread", "activityid", "ldv_notificationmessageid", "ldv_notificationreadid", "ldv_notificationreadid", "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", typeof (NotificationMessage) };
			relationProperties["UserAsUser"] = new object[] { "UserAsUser", "systemuser", "ldv_notificationread", "systemuserid", "ldv_userid", "ldv_notificationreadid", "ldv_notificationreadid", "ldv_systemuser_ldv_notificationread_UserId", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationread", "systemuserid", "createdby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationread", "systemuserid", "createdonbehalfby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationread", "systemuserid", "modifiedby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationread", "systemuserid", "modifiedonbehalfby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "ldv_notificationread", "teamid", "owningteam", "ldv_notificationreadid", "ldv_notificationreadid", "team_ldv_notificationread", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationread", "systemuserid", "owninguser", "ldv_notificationreadid", "ldv_notificationreadid", "user_ldv_notificationread", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationRead(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_notificationreadid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region User

	/// <summary>
	/// 'SystemUser'.<br />
	/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuser")]
	public partial class User : GeneratedEntity<User.RelationName>
	{
		
		public User() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "User";
		public const string SchemaName = "SystemUser";
		public const string EntityLogicalName = "systemuser";
		public const int EntityTypeCode = 8;
		
		#region Attributes

		[AttributeLogicalName("systemuserid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (UserId == null || UserId == Guid.Empty) ? base.Id : UserId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    UserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccessMode'.<br />
        /// Type of user.
        /// </summary>
		[AttributeLogicalName("accessmode")]
		public AccessModeEnum? AccessMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accessmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accessmode"))
				    value = (OptionSetValue) backupAttributeCollection["accessmode"];
                return value == null ? (AccessModeEnum?) null : (AccessModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AccessMode");
                if (value != null)
				    SetAttributeValue("accessmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accessmode", value);
				OnPropertyChanged("AccessMode");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addressid"))
				    value = (Guid?) backupAttributeCollection["address1_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ID");
					SetAttributeValue("address1_addressid", value);
				OnPropertyChanged("Address1ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Type of address for address 1, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_addresstypecode"];
                return value == null ? (Address1AddressTypeEnum?) null : (Address1AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1AddressType");
                if (value != null)
				    SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_addresstypecode", value);
				OnPropertyChanged("Address1AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_City'.<br />
        /// City name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_city"), MaxLength(128)]
		public string City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_city"))
				    value = (string) backupAttributeCollection["address1_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("City");
					SetAttributeValue("address1_city", value);
				OnPropertyChanged("City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite"), MaxLength(1000)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_composite"))
				    value = (string) backupAttributeCollection["address1_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("address1_composite", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_Country'.<br />
        /// Country/region name in address 1.
        /// </summary>
		[AttributeLogicalName("address1_country"), MaxLength(128)]
		public string CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_country"))
				    value = (string) backupAttributeCollection["address1_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CountryRegion");
					SetAttributeValue("address1_country", value);
				OnPropertyChanged("CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_County'.<br />
        /// County name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_county"), MaxLength(128)]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_county"))
				    value = (string) backupAttributeCollection["address1_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1County");
					SetAttributeValue("address1_county", value);
				OnPropertyChanged("Address1County");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Fax'.<br />
        /// Fax number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_fax"), MaxLength(64)]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_fax"))
				    value = (string) backupAttributeCollection["address1_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Fax");
					SetAttributeValue("address1_fax", value);
				OnPropertyChanged("Address1Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Latitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_latitude"))
				    value = (double?) backupAttributeCollection["address1_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Latitude");
					SetAttributeValue("address1_latitude", value);
				OnPropertyChanged("Address1Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line1'.<br />
        /// First line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line1"), MaxLength(1024)]
		public string Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line1"))
				    value = (string) backupAttributeCollection["address1_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street1");
					SetAttributeValue("address1_line1", value);
				OnPropertyChanged("Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line2'.<br />
        /// Second line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line2"), MaxLength(1024)]
		public string Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line2"))
				    value = (string) backupAttributeCollection["address1_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street2");
					SetAttributeValue("address1_line2", value);
				OnPropertyChanged("Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line3'.<br />
        /// Third line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line3"), MaxLength(1024)]
		public string Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line3"))
				    value = (string) backupAttributeCollection["address1_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street3");
					SetAttributeValue("address1_line3", value);
				OnPropertyChanged("Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Longitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_longitude"))
				    value = (double?) backupAttributeCollection["address1_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Longitude");
					SetAttributeValue("address1_longitude", value);
				OnPropertyChanged("Address1Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address1_Name'.<br />
        /// Name to enter for address 1.
        /// </summary>
		[AttributeLogicalName("address1_name"), MaxLength(100)]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_name"))
				    value = (string) backupAttributeCollection["address1_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Name");
					SetAttributeValue("address1_name", value);
				OnPropertyChanged("Address1Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostalCode'.<br />
        /// ZIP Code or postal code for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postalcode"), MaxLength(40)]
		public string ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postalcode"))
				    value = (string) backupAttributeCollection["address1_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ZIPPostalCode");
					SetAttributeValue("address1_postalcode", value);
				OnPropertyChanged("ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Post office box number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox"), MaxLength(40)]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postofficebox"))
				    value = (string) backupAttributeCollection["address1_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PostOfficeBox");
					SetAttributeValue("address1_postofficebox", value);
				OnPropertyChanged("Address1PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Method of shipment for address 1.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_shippingmethodcode"];
                return value == null ? (Address1ShippingMethodEnum?) null : (Address1ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1ShippingMethod");
                if (value != null)
				    SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_shippingmethodcode", value);
				OnPropertyChanged("Address1ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_StateOrProvince'.<br />
        /// State or province for address 1.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince"), MaxLength(128)]
		public string StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_stateorprovince"))
				    value = (string) backupAttributeCollection["address1_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StateProvince");
					SetAttributeValue("address1_stateorprovince", value);
				OnPropertyChanged("StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Telephone1'.<br />
        /// First telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone1"), MaxLength(64)]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone1"))
				    value = (string) backupAttributeCollection["address1_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MainPhone");
					SetAttributeValue("address1_telephone1", value);
				OnPropertyChanged("MainPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Second telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone2"), MaxLength(50)]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone2"))
				    value = (string) backupAttributeCollection["address1_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherPhone");
					SetAttributeValue("address1_telephone2", value);
				OnPropertyChanged("OtherPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Third telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone3"), MaxLength(50)]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone3"))
				    value = (string) backupAttributeCollection["address1_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Pager");
					SetAttributeValue("address1_telephone3", value);
				OnPropertyChanged("Pager");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 1.
        /// </summary>
		[AttributeLogicalName("address1_upszone"), MaxLength(4)]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_upszone"))
				    value = (string) backupAttributeCollection["address1_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UPSZone");
					SetAttributeValue("address1_upszone", value);
				OnPropertyChanged("Address1UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_utcoffset"))
				    value = (int?) backupAttributeCollection["address1_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UTCOffset");
					SetAttributeValue("address1_utcoffset", value);
				OnPropertyChanged("Address1UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addressid"))
				    value = (Guid?) backupAttributeCollection["address2_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ID");
					SetAttributeValue("address2_addressid", value);
				OnPropertyChanged("Address2ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Type of address for address 2, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_addresstypecode"];
                return value == null ? (Address2AddressTypeEnum?) null : (Address2AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2AddressType");
                if (value != null)
				    SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_addresstypecode", value);
				OnPropertyChanged("Address2AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_City'.<br />
        /// City name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_city"), MaxLength(128)]
		public string OtherCity
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_city"))
				    value = (string) backupAttributeCollection["address2_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCity");
					SetAttributeValue("address2_city", value);
				OnPropertyChanged("OtherCity");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite"), MaxLength(1000)]
		public string OtherAddress
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_composite"))
				    value = (string) backupAttributeCollection["address2_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherAddress");
					SetAttributeValue("address2_composite", value);
				OnPropertyChanged("OtherAddress");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_Country'.<br />
        /// Country/region name in address 2.
        /// </summary>
		[AttributeLogicalName("address2_country"), MaxLength(128)]
		public string OtherCountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_country"))
				    value = (string) backupAttributeCollection["address2_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCountryRegion");
					SetAttributeValue("address2_country", value);
				OnPropertyChanged("OtherCountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_County'.<br />
        /// County name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_county"), MaxLength(128)]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_county"))
				    value = (string) backupAttributeCollection["address2_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2County");
					SetAttributeValue("address2_county", value);
				OnPropertyChanged("Address2County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Fax'.<br />
        /// Fax number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_fax"), MaxLength(50)]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_fax"))
				    value = (string) backupAttributeCollection["address2_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Fax");
					SetAttributeValue("address2_fax", value);
				OnPropertyChanged("Address2Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Latitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_latitude"))
				    value = (double?) backupAttributeCollection["address2_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Latitude");
					SetAttributeValue("address2_latitude", value);
				OnPropertyChanged("Address2Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line1'.<br />
        /// First line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line1"), MaxLength(1024)]
		public string OtherStreet1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line1"))
				    value = (string) backupAttributeCollection["address2_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet1");
					SetAttributeValue("address2_line1", value);
				OnPropertyChanged("OtherStreet1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line2'.<br />
        /// Second line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line2"), MaxLength(1024)]
		public string OtherStreet2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line2"))
				    value = (string) backupAttributeCollection["address2_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet2");
					SetAttributeValue("address2_line2", value);
				OnPropertyChanged("OtherStreet2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line3'.<br />
        /// Third line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line3"), MaxLength(1024)]
		public string OtherStreet3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line3"))
				    value = (string) backupAttributeCollection["address2_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet3");
					SetAttributeValue("address2_line3", value);
				OnPropertyChanged("OtherStreet3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Longitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_longitude"))
				    value = (double?) backupAttributeCollection["address2_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Longitude");
					SetAttributeValue("address2_longitude", value);
				OnPropertyChanged("Address2Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_Name'.<br />
        /// Name to enter for address 2.
        /// </summary>
		[AttributeLogicalName("address2_name"), MaxLength(100)]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_name"))
				    value = (string) backupAttributeCollection["address2_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Name");
					SetAttributeValue("address2_name", value);
				OnPropertyChanged("Address2Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostalCode'.<br />
        /// ZIP Code or postal code for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postalcode"), MaxLength(40)]
		public string OtherZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postalcode"))
				    value = (string) backupAttributeCollection["address2_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherZIPPostalCode");
					SetAttributeValue("address2_postalcode", value);
				OnPropertyChanged("OtherZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Post office box number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox"), MaxLength(40)]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postofficebox"))
				    value = (string) backupAttributeCollection["address2_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PostOfficeBox");
					SetAttributeValue("address2_postofficebox", value);
				OnPropertyChanged("Address2PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Method of shipment for address 2.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_shippingmethodcode"];
                return value == null ? (Address2ShippingMethodEnum?) null : (Address2ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2ShippingMethod");
                if (value != null)
				    SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_shippingmethodcode", value);
				OnPropertyChanged("Address2ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_StateOrProvince'.<br />
        /// State or province for address 2.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince"), MaxLength(128)]
		public string OtherStateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_stateorprovince"))
				    value = (string) backupAttributeCollection["address2_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStateProvince");
					SetAttributeValue("address2_stateorprovince", value);
				OnPropertyChanged("OtherStateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// First telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone1"), MaxLength(50)]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone1"))
				    value = (string) backupAttributeCollection["address2_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone1");
					SetAttributeValue("address2_telephone1", value);
				OnPropertyChanged("Address2Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Second telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone2"), MaxLength(50)]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone2"))
				    value = (string) backupAttributeCollection["address2_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone2");
					SetAttributeValue("address2_telephone2", value);
				OnPropertyChanged("Address2Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Third telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone3"), MaxLength(50)]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone3"))
				    value = (string) backupAttributeCollection["address2_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone3");
					SetAttributeValue("address2_telephone3", value);
				OnPropertyChanged("Address2Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 2.
        /// </summary>
		[AttributeLogicalName("address2_upszone"), MaxLength(4)]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_upszone"))
				    value = (string) backupAttributeCollection["address2_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UPSZone");
					SetAttributeValue("address2_upszone", value);
				OnPropertyChanged("Address2UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_utcoffset"))
				    value = (int?) backupAttributeCollection["address2_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UTCOffset");
					SetAttributeValue("address2_utcoffset", value);
				OnPropertyChanged("Address2UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'ApplicationId'.<br />
        /// The identifier for the application. This is used to access data in another application.
        /// </summary>
		[AttributeLogicalName("applicationid")]
		public Guid? ApplicationID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("applicationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationid"))
				    value = (Guid?) backupAttributeCollection["applicationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationID");
					SetAttributeValue("applicationid", value);
				OnPropertyChanged("ApplicationID");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ApplicationIdUri'.<br />
        /// The URI used as a unique logical identifier for the external app. This can be used to validate the application.
        /// </summary>
		[AttributeLogicalName("applicationiduri"), MaxLength(1024)]
		public string ApplicationIDURI
		{
			get
			{
				var value = GetAttributeValue<string>("applicationiduri");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationiduri"))
				    value = (string) backupAttributeCollection["applicationiduri"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationIDURI");
					SetAttributeValue("applicationiduri", value);
				OnPropertyChanged("ApplicationIDURI");
			}
		}

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// This is the application directory object Id.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("azureactivedirectoryobjectid"))
				    value = (Guid?) backupAttributeCollection["azureactivedirectoryobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AzureADObjectID");
					SetAttributeValue("azureactivedirectoryobjectid", value);
				OnPropertyChanged("AzureADObjectID");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("BusinessUnit");
                if (value != null)
				    SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("businessunitid", value);
				OnPropertyChanged("BusinessUnit");
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CalendarId'.<br />
        /// Fiscal calendar associated with the user.
        /// </summary>
		[AttributeLogicalName("calendarid")]
		public Guid? Calendar
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Calendar");
                if (value != null)
				    SetAttributeValue("calendarid", new EntityReference("calendar", value.Value));
                else
					SetAttributeValue("calendarid", value);
				OnPropertyChanged("Calendar");
			}
		}

        public string CalendarName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CALType'.<br />
        /// License type of user.
        /// </summary>
		[AttributeLogicalName("caltype")]
		public LicenseTypeEnum? LicenseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caltype"))
				    value = (OptionSetValue) backupAttributeCollection["caltype"];
                return value == null ? (LicenseTypeEnum?) null : (LicenseTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LicenseType");
                if (value != null)
				    SetAttributeValue("caltype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("caltype", value);
				OnPropertyChanged("LicenseType");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the systemuser.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DefaultFiltersPopulated'.<br />
        /// Indicates if default outlook filters have been populated.
        /// </summary>
		[AttributeLogicalName("defaultfilterspopulated")]
		public bool? DefaultFiltersPopulated
		{
			get
			{
				var value = GetAttributeValue<bool?>("defaultfilterspopulated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultfilterspopulated"))
				    value = (bool?) backupAttributeCollection["defaultfilterspopulated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultFiltersPopulated");
					SetAttributeValue("defaultfilterspopulated", value);
				OnPropertyChanged("DefaultFiltersPopulated");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMailbox'.<br />
        /// Select the mailbox associated with this user.
        /// </summary>
		[AttributeLogicalName("defaultmailbox")]
		public Guid? Mailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Mailbox");
                if (value != null)
				    SetAttributeValue("defaultmailbox", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("defaultmailbox", value);
				OnPropertyChanged("Mailbox");
			}
		}

        public string MailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=200] 
		/// 'DefaultOdbFolderName'.<br />
        /// Type a default folder name for the user's OneDrive For Business location.
        /// </summary>
		[AttributeLogicalName("defaultodbfoldername"), MaxLength(200)]
		public string DefaultOneDriveforBusinessFolderName
		{
			get
			{
				var value = GetAttributeValue<string>("defaultodbfoldername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultodbfoldername"))
				    value = (string) backupAttributeCollection["defaultodbfoldername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultOneDriveforBusinessFolderName");
					SetAttributeValue("defaultodbfoldername", value);
				OnPropertyChanged("DefaultOneDriveforBusinessFolderName");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the user.
        /// </summary>
		[AttributeLogicalName("disabledreason"), MaxLength(500)]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("disabledreason"))
				    value = (string) backupAttributeCollection["disabledreason"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisabledReason");
					SetAttributeValue("disabledreason", value);
				OnPropertyChanged("DisabledReason");
			}
		}

        /// <summary>
        ///  
		/// 'DisplayInServiceViews'.<br />
        /// Whether to display the user in service views.
        /// </summary>
		[AttributeLogicalName("displayinserviceviews")]
		public bool? DisplayinServiceViews
		{
			get
			{
				var value = GetAttributeValue<bool?>("displayinserviceviews");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("displayinserviceviews"))
				    value = (bool?) backupAttributeCollection["displayinserviceviews"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisplayinServiceViews");
					SetAttributeValue("displayinserviceviews", value);
				OnPropertyChanged("DisplayinServiceViews");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'DomainName'.<br />
        /// Active Directory domain of which the user is a member.
        /// </summary>
		[AttributeLogicalName("domainname"), MaxLength(1024)]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("domainname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("domainname"))
				    value = (string) backupAttributeCollection["domainname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserName");
					SetAttributeValue("domainname", value);
				OnPropertyChanged("UserName");
			}
		}

        /// <summary>
        ///  
		/// 'EmailRouterAccessApproval'.<br />
        /// Shows the status of the primary email address.
        /// </summary>
		[AttributeLogicalName("emailrouteraccessapproval")]
		public PrimaryEmailStatusEnum? PrimaryEmailStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailrouteraccessapproval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailrouteraccessapproval"))
				    value = (OptionSetValue) backupAttributeCollection["emailrouteraccessapproval"];
                return value == null ? (PrimaryEmailStatusEnum?) null : (PrimaryEmailStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmailStatus");
                if (value != null)
				    SetAttributeValue("emailrouteraccessapproval", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailrouteraccessapproval", value);
				OnPropertyChanged("PrimaryEmailStatus");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EmployeeId'.<br />
        /// Employee identifier for the user.
        /// </summary>
		[AttributeLogicalName("employeeid"), MaxLength(100)]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("employeeid"))
				    value = (string) backupAttributeCollection["employeeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Employee");
					SetAttributeValue("employeeid", value);
				OnPropertyChanged("Employee");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the systemuser with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'FirstName'.<br />
        /// First name of the user.
        /// </summary>
		[AttributeLogicalName("firstname"), Required, MaxLength(64)]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstname"))
				    value = (string) backupAttributeCollection["firstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FirstName");
					SetAttributeValue("firstname", value);
				OnPropertyChanged("FirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'FullName'.<br />
        /// Full name of the user.
        /// </summary>
		[AttributeLogicalName("fullname"), MaxLength(200)]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullname"))
				    value = (string) backupAttributeCollection["fullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FullName");
					SetAttributeValue("fullname", value);
				OnPropertyChanged("FullName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'GovernmentId'.<br />
        /// Government identifier for the user.
        /// </summary>
		[AttributeLogicalName("governmentid"), MaxLength(100)]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("governmentid"))
				    value = (string) backupAttributeCollection["governmentid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Government");
					SetAttributeValue("governmentid", value);
				OnPropertyChanged("Government");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'HomePhone'.<br />
        /// Home phone number for the user.
        /// </summary>
		[AttributeLogicalName("homephone"), MaxLength(50)]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("homephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homephone"))
				    value = (string) backupAttributeCollection["homephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomePhone");
					SetAttributeValue("homephone", value);
				OnPropertyChanged("HomePhone");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailDeliveryMethod'.<br />
        /// Incoming email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("incomingemaildeliverymethod")]
		public IncomingEmailDeliveryMethodEnum? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incomingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["incomingemaildeliverymethod"];
                return value == null ? (IncomingEmailDeliveryMethodEnum?) null : (IncomingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("IncomingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("incomingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("incomingemaildeliverymethod", value);
				OnPropertyChanged("IncomingEmailDeliveryMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'InternalEMailAddress'.<br />
        /// Internal email address for the user.
        /// </summary>
		[AttributeLogicalName("internalemailaddress"), MaxLength(100)]
		public string PrimaryEmail
		{
			get
			{
				var value = GetAttributeValue<string>("internalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("internalemailaddress"))
				    value = (string) backupAttributeCollection["internalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmail");
					SetAttributeValue("internalemailaddress", value);
				OnPropertyChanged("PrimaryEmail");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'InviteStatusCode'.<br />
        /// User invitation status.
        /// </summary>
		[AttributeLogicalName("invitestatuscode"), Required]
		public InvitationStatusEnum? InvitationStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invitestatuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invitestatuscode"))
				    value = (OptionSetValue) backupAttributeCollection["invitestatuscode"];
                return value == null ? (InvitationStatusEnum?) null : (InvitationStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("InvitationStatus");
                if (value != null)
				    SetAttributeValue("invitestatuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("invitestatuscode", value);
				OnPropertyChanged("InvitationStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information about whether the user is enabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? Status
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdisabled"))
				    value = (bool?) backupAttributeCollection["isdisabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Status");
					SetAttributeValue("isdisabled", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailAddressApprovedByO365Admin'.<br />
        /// Shows the status of approval of the email address by O365 Admin.
        /// </summary>
		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public bool? EmailAddressO365AdminApprovalStatus
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailaddressapprovedbyo365admin"))
				    value = (bool?) backupAttributeCollection["isemailaddressapprovedbyo365admin"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddressO365AdminApprovalStatus");
					SetAttributeValue("isemailaddressapprovedbyo365admin", value);
				OnPropertyChanged("EmailAddressO365AdminApprovalStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsIntegrationUser'.<br />
        /// Check if user is an integration user.
        /// </summary>
		[AttributeLogicalName("isintegrationuser")]
		public bool? Integrationusermode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isintegrationuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isintegrationuser"))
				    value = (bool?) backupAttributeCollection["isintegrationuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Integrationusermode");
					SetAttributeValue("isintegrationuser", value);
				OnPropertyChanged("Integrationusermode");
			}
		}

        /// <summary>
        ///  
		/// 'IsLicensed'.<br />
        /// Information about whether the user is licensed.
        /// </summary>
		[AttributeLogicalName("islicensed")]
		public bool? UserLicensed
		{
			get
			{
				var value = GetAttributeValue<bool?>("islicensed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("islicensed"))
				    value = (bool?) backupAttributeCollection["islicensed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicensed");
					SetAttributeValue("islicensed", value);
				OnPropertyChanged("UserLicensed");
			}
		}

        /// <summary>
        ///  
		/// 'IsSyncWithDirectory'.<br />
        /// Information about whether the user is synced with the directory.
        /// </summary>
		[AttributeLogicalName("issyncwithdirectory")]
		public bool? UserSynced
		{
			get
			{
				var value = GetAttributeValue<bool?>("issyncwithdirectory");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("issyncwithdirectory"))
				    value = (bool?) backupAttributeCollection["issyncwithdirectory"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserSynced");
					SetAttributeValue("issyncwithdirectory", value);
				OnPropertyChanged("UserSynced");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'JobTitle'.<br />
        /// Job title of the user.
        /// </summary>
		[AttributeLogicalName("jobtitle"), MaxLength(100)]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("jobtitle"))
				    value = (string) backupAttributeCollection["jobtitle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("JobTitle");
					SetAttributeValue("jobtitle", value);
				OnPropertyChanged("JobTitle");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'LastName'.<br />
        /// Last name of the user.
        /// </summary>
		[AttributeLogicalName("lastname"), Required, MaxLength(64)]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastname"))
				    value = (string) backupAttributeCollection["lastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastName");
					SetAttributeValue("lastname", value);
				OnPropertyChanged("LastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'MiddleName'.<br />
        /// Middle name of the user.
        /// </summary>
		[AttributeLogicalName("middlename"), MaxLength(50)]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("middlename"))
				    value = (string) backupAttributeCollection["middlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MiddleName");
					SetAttributeValue("middlename", value);
				OnPropertyChanged("MiddleName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'MobileAlertEMail'.<br />
        /// Mobile alert email address for the user.
        /// </summary>
		[AttributeLogicalName("mobilealertemail"), MaxLength(100)]
		public string MobileAlertEmail
		{
			get
			{
				var value = GetAttributeValue<string>("mobilealertemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilealertemail"))
				    value = (string) backupAttributeCollection["mobilealertemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobileAlertEmail");
					SetAttributeValue("mobilealertemail", value);
				OnPropertyChanged("MobileAlertEmail");
			}
		}

        /// <summary>
        ///  
		/// 'MobileOfflineProfileId'.<br />
        /// Items contained with a particular SystemUser.
        /// </summary>
		[AttributeLogicalName("mobileofflineprofileid")]
		public Guid? MobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MobileOfflineProfile");
                if (value != null)
				    SetAttributeValue("mobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
					SetAttributeValue("mobileofflineprofileid", value);
				OnPropertyChanged("MobileOfflineProfile");
			}
		}

        public string MobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=64] 
		/// 'MobilePhone'.<br />
        /// Mobile phone number for the user.
        /// </summary>
		[AttributeLogicalName("mobilephone"), MaxLength(64)]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilephone"))
				    value = (string) backupAttributeCollection["mobilephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobilePhone");
					SetAttributeValue("mobilephone", value);
				OnPropertyChanged("MobilePhone");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the systemuser.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("new_team")]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("new_team", new EntityReference("team", value.Value));
                else
					SetAttributeValue("new_team", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=50] 
		/// 'NickName'.<br />
        /// Nickname of the user.
        /// </summary>
		[AttributeLogicalName("nickname"), MaxLength(50)]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nickname"))
				    value = (string) backupAttributeCollection["nickname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Nickname");
					SetAttributeValue("nickname", value);
				OnPropertyChanged("Nickname");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the user.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (Guid?) backupAttributeCollection["organizationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Organization");
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("Organization");
			}
		}

        /// <summary>
        ///  
		/// 'OutgoingEmailDeliveryMethod'.<br />
        /// Outgoing email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public OutgoingEmailDeliveryMethodEnum? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("outgoingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("outgoingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["outgoingemaildeliverymethod"];
                return value == null ? (OutgoingEmailDeliveryMethodEnum?) null : (OutgoingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("OutgoingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("outgoingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("outgoingemaildeliverymethod", value);
				OnPropertyChanged("OutgoingEmailDeliveryMethod");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ParentSystemUserId'.<br />
        /// Unique identifier of the manager of the user.
        /// </summary>
		[AttributeLogicalName("parentsystemuserid")]
		public Guid? Manager
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Manager");
                if (value != null)
				    SetAttributeValue("parentsystemuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("parentsystemuserid", value);
				OnPropertyChanged("Manager");
			}
		}

        public string ManagerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportHi'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passporthi"), InRange("0", "1000000000", typeof(int))]
		public int? PassportHi
		{
			get
			{
				var value = GetAttributeValue<int?>("passporthi");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passporthi"))
				    value = (int?) backupAttributeCollection["passporthi"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportHi");
					SetAttributeValue("passporthi", value);
				OnPropertyChanged("PassportHi");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportLo'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passportlo"), InRange("0", "1000000000", typeof(int))]
		public int? PassportLo
		{
			get
			{
				var value = GetAttributeValue<int?>("passportlo");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passportlo"))
				    value = (int?) backupAttributeCollection["passportlo"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportLo");
					SetAttributeValue("passportlo", value);
				OnPropertyChanged("PassportLo");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'PersonalEMailAddress'.<br />
        /// Personal email address of the user.
        /// </summary>
		[AttributeLogicalName("personalemailaddress"), MaxLength(100)]
		public string Email2
		{
			get
			{
				var value = GetAttributeValue<string>("personalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("personalemailaddress"))
				    value = (string) backupAttributeCollection["personalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email2");
					SetAttributeValue("personalemailaddress", value);
				OnPropertyChanged("Email2");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'PhotoUrl'.<br />
        /// URL for the Website on which a photo of the user is located.
        /// </summary>
		[AttributeLogicalName("photourl"), MaxLength(200)]
		public string PhotoURL
		{
			get
			{
				var value = GetAttributeValue<string>("photourl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("photourl"))
				    value = (string) backupAttributeCollection["photourl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PhotoURL");
					SetAttributeValue("photourl", value);
				OnPropertyChanged("PhotoURL");
			}
		}

        /// <summary>
        ///  
		/// 'PositionId'.<br />
        /// User's position in hierarchical security model.
        /// </summary>
		[AttributeLogicalName("positionid")]
		public Guid? Position
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Position");
                if (value != null)
				    SetAttributeValue("positionid", new EntityReference("position", value.Value));
                else
					SetAttributeValue("positionid", value);
				OnPropertyChanged("Position");
			}
		}

        public string PositionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredAddressCode'.<br />
        /// Preferred address for the user.
        /// </summary>
		[AttributeLogicalName("preferredaddresscode")]
		public PreferredAddressEnum? PreferredAddress
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredaddresscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredaddresscode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredaddresscode"];
                return value == null ? (PreferredAddressEnum?) null : (PreferredAddressEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredAddress");
                if (value != null)
				    SetAttributeValue("preferredaddresscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredaddresscode", value);
				OnPropertyChanged("PreferredAddress");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEmailCode'.<br />
        /// Preferred email address for the user.
        /// </summary>
		[AttributeLogicalName("preferredemailcode")]
		public PreferredEmailEnum? PreferredEmail
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredemailcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredemailcode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredemailcode"];
                return value == null ? (PreferredEmailEnum?) null : (PreferredEmailEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredEmail");
                if (value != null)
				    SetAttributeValue("preferredemailcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredemailcode", value);
				OnPropertyChanged("PreferredEmail");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredPhoneCode'.<br />
        /// Preferred phone number for the user.
        /// </summary>
		[AttributeLogicalName("preferredphonecode")]
		public PreferredPhoneEnum? PreferredPhone
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredphonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredphonecode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredphonecode"];
                return value == null ? (PreferredPhoneEnum?) null : (PreferredPhoneEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredPhone");
                if (value != null)
				    SetAttributeValue("preferredphonecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredphonecode", value);
				OnPropertyChanged("PreferredPhone");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the user.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultQueue");
                if (value != null)
				    SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
					SetAttributeValue("queueid", value);
				OnPropertyChanged("DefaultQueue");
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Salutation'.<br />
        /// Salutation for correspondence with the user.
        /// </summary>
		[AttributeLogicalName("salutation"), MaxLength(20)]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salutation"))
				    value = (string) backupAttributeCollection["salutation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Salutation");
					SetAttributeValue("salutation", value);
				OnPropertyChanged("Salutation");
			}
		}

        /// <summary>
        ///  
		/// 'SetupUser'.<br />
        /// Check if user is a setup user.
        /// </summary>
		[AttributeLogicalName("setupuser")]
		public bool? RestrictedAccessMode
		{
			get
			{
				var value = GetAttributeValue<bool?>("setupuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setupuser"))
				    value = (bool?) backupAttributeCollection["setupuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RestrictedAccessMode");
					SetAttributeValue("setupuser", value);
				OnPropertyChanged("RestrictedAccessMode");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'SharePointEmailAddress'.<br />
        /// SharePoint Work Email Address
        /// </summary>
		[AttributeLogicalName("sharepointemailaddress"), MaxLength(1024)]
		public string SharePointEmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("sharepointemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharepointemailaddress"))
				    value = (string) backupAttributeCollection["sharepointemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SharePointEmailAddress");
					SetAttributeValue("sharepointemailaddress", value);
				OnPropertyChanged("SharePointEmailAddress");
			}
		}

        /// <summary>
        ///  
		/// 'SiteId'.<br />
        /// Site at which the user is located.
        /// </summary>
		[AttributeLogicalName("siteid")]
		public Guid? Site
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Site");
                if (value != null)
				    SetAttributeValue("siteid", new EntityReference("site", value.Value));
                else
					SetAttributeValue("siteid", value);
				OnPropertyChanged("Site");
			}
		}

        public string SiteName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Skills'.<br />
        /// Skill set of the user.
        /// </summary>
		[AttributeLogicalName("skills"), MaxLength(100)]
		public string Skills
		{
			get
			{
				var value = GetAttributeValue<string>("skills");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("skills"))
				    value = (string) backupAttributeCollection["skills"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Skills");
					SetAttributeValue("skills", value);
				OnPropertyChanged("Skills");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier for the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? UserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserId");
                if (value != null)
					SetAttributeValue("systemuserid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("UserId");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// Unique identifier of the territory to which the user is assigned.
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Territory");
                if (value != null)
				    SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
					SetAttributeValue("territoryid", value);
				OnPropertyChanged("Territory");
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Title'.<br />
        /// Title of the user.
        /// </summary>
		[AttributeLogicalName("title"), MaxLength(128)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("title"))
				    value = (string) backupAttributeCollection["title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("title", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the systemuser.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'UserLicenseType'.<br />
        /// Shows the type of user license.
        /// </summary>
		[AttributeLogicalName("userlicensetype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? UserLicenseType
		{
			get
			{
				var value = GetAttributeValue<int?>("userlicensetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("userlicensetype"))
				    value = (int?) backupAttributeCollection["userlicensetype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicenseType");
					SetAttributeValue("userlicensetype", value);
				OnPropertyChanged("UserLicenseType");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the user.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionnumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("Versionnumber");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'WindowsLiveID'.<br />
        /// Windows Live ID
        /// </summary>
		[AttributeLogicalName("windowsliveid"), MaxLength(1024)]
		public string WindowsLiveID
		{
			get
			{
				var value = GetAttributeValue<string>("windowsliveid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("windowsliveid"))
				    value = (string) backupAttributeCollection["windowsliveid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WindowsLiveID");
					SetAttributeValue("windowsliveid", value);
				OnPropertyChanged("WindowsLiveID");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YammerEmailAddress'.<br />
        /// User's Yammer login email address
        /// </summary>
		[AttributeLogicalName("yammeremailaddress"), MaxLength(200)]
		public string YammerEmail
		{
			get
			{
				var value = GetAttributeValue<string>("yammeremailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeremailaddress"))
				    value = (string) backupAttributeCollection["yammeremailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerEmail");
					SetAttributeValue("yammeremailaddress", value);
				OnPropertyChanged("YammerEmail");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'YammerUserId'.<br />
        /// User's Yammer ID
        /// </summary>
		[AttributeLogicalName("yammeruserid"), MaxLength(128)]
		public string YammerUserID
		{
			get
			{
				var value = GetAttributeValue<string>("yammeruserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeruserid"))
				    value = (string) backupAttributeCollection["yammeruserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerUserID");
					SetAttributeValue("yammeruserid", value);
				OnPropertyChanged("YammerUserID");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiFirstName'.<br />
        /// Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifirstname"), MaxLength(64)]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifirstname"))
				    value = (string) backupAttributeCollection["yomifirstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFirstName");
					SetAttributeValue("yomifirstname", value);
				OnPropertyChanged("YomiFirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YomiFullName'.<br />
        /// Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifullname"), MaxLength(200)]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifullname"))
				    value = (string) backupAttributeCollection["yomifullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFullName");
					SetAttributeValue("yomifullname", value);
				OnPropertyChanged("YomiFullName");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiLastName'.<br />
        /// Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomilastname"), MaxLength(64)]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomilastname"))
				    value = (string) backupAttributeCollection["yomilastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiLastName");
					SetAttributeValue("yomilastname", value);
				OnPropertyChanged("YomiLastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'YomiMiddleName'.<br />
        /// Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomimiddlename"), MaxLength(50)]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomimiddlename"))
				    value = (string) backupAttributeCollection["yomimiddlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiMiddleName");
					SetAttributeValue("yomimiddlename", value);
				OnPropertyChanged("YomiMiddleName");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_createdby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdby")]
		public NotificationMessage[] NotificationMessagesOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdby", null, value);
				OnPropertyChanged("NotificationMessagesOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdonbehalfby")]
		public NotificationMessage[] NotificationMessagesOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationMessagesOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedby")]
		public NotificationMessage[] NotificationMessagesOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedby", null, value);
				OnPropertyChanged("NotificationMessagesOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedonbehalfby")]
		public NotificationMessage[] NotificationMessagesOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationMessagesOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_owninguser'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_owninguser")]
		public NotificationMessage[] NotificationMessagesOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_owninguser", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_owninguser", null, value);
				OnPropertyChanged("NotificationMessagesOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId")]
		public GenericConfiguration[] GenericConfigurationsOfDefaultFromUser
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfDefaultFromUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", null, value);
				OnPropertyChanged("GenericConfigurationsOfDefaultFromUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser")]
		public GenericConfiguration[] GenericConfigurationsOfDefaultRoutingUser
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfDefaultRoutingUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", null, value);
				OnPropertyChanged("GenericConfigurationsOfDefaultRoutingUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_notificationmessage_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessage_UserId")]
		public NotificationMessage[] NotificationMessagesOfUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_systemuser_ldv_notificationmessage_UserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_systemuser_ldv_notificationmessage_UserId", null, value);
				OnPropertyChanged("NotificationMessagesOfUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_notificationmessageuser_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessageuser_UserId")]
		public NotificationMessageUser[] NotificationMessageUsersOfUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("ldv_systemuser_ldv_notificationmessageuser_UserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("ldv_systemuser_ldv_notificationmessageuser_UserId", null, value);
				OnPropertyChanged("NotificationMessageUsersOfUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_notificationread_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationread_UserId")]
		public NotificationRead[] NotificationReadsOfUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("ldv_systemuser_ldv_notificationread_UserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("ldv_systemuser_ldv_notificationread_UserId", null, value);
				OnPropertyChanged("NotificationReadsOfUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_email_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_email_createdby")]
		public Email[] EmailsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("lk_email_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("lk_email_createdby", null, value);
				OnPropertyChanged("EmailsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_email_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_email_createdonbehalfby")]
		public Email[] EmailsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("lk_email_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("lk_email_createdonbehalfby", null, value);
				OnPropertyChanged("EmailsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_email_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_email_modifiedby")]
		public Email[] EmailsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("lk_email_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("lk_email_modifiedby", null, value);
				OnPropertyChanged("EmailsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_email_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_email_modifiedonbehalfby")]
		public Email[] EmailsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("lk_email_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("lk_email_modifiedonbehalfby", null, value);
				OnPropertyChanged("EmailsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_genericconfiguration_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_createdby")]
		public GenericConfiguration[] GenericConfigurationsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_createdby", null, value);
				OnPropertyChanged("GenericConfigurationsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_genericconfiguration_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_createdonbehalfby")]
		public GenericConfiguration[] GenericConfigurationsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_createdonbehalfby", null, value);
				OnPropertyChanged("GenericConfigurationsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_genericconfiguration_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_modifiedby")]
		public GenericConfiguration[] GenericConfigurationsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_modifiedby", null, value);
				OnPropertyChanged("GenericConfigurationsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_genericconfiguration_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_genericconfiguration_modifiedonbehalfby")]
		public GenericConfiguration[] GenericConfigurationsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("lk_ldv_genericconfiguration_modifiedonbehalfby", null, value);
				OnPropertyChanged("GenericConfigurationsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessagerole_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_createdby")]
		public NotificationMessageRole[] NotificationMessageRolesOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_createdby", null, value);
				OnPropertyChanged("NotificationMessageRolesOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessagerole_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_createdonbehalfby")]
		public NotificationMessageRole[] NotificationMessageRolesOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageRolesOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessagerole_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_modifiedby")]
		public NotificationMessageRole[] NotificationMessageRolesOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_modifiedby", null, value);
				OnPropertyChanged("NotificationMessageRolesOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessagerole_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessagerole_modifiedonbehalfby")]
		public NotificationMessageRole[] NotificationMessageRolesOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("lk_ldv_notificationmessagerole_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageRolesOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageteam_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_createdby")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_createdby", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageteam_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_createdonbehalfby")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageteam_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_modifiedby")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_modifiedby", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageteam_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageteam_modifiedonbehalfby")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("lk_ldv_notificationmessageteam_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageuser_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_createdby")]
		public NotificationMessageUser[] NotificationMessageUsersOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_createdby", null, value);
				OnPropertyChanged("NotificationMessageUsersOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_createdonbehalfby")]
		public NotificationMessageUser[] NotificationMessageUsersOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageUsersOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_modifiedby")]
		public NotificationMessageUser[] NotificationMessageUsersOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_modifiedby", null, value);
				OnPropertyChanged("NotificationMessageUsersOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationmessageuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationmessageuser_modifiedonbehalfby")]
		public NotificationMessageUser[] NotificationMessageUsersOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("lk_ldv_notificationmessageuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationMessageUsersOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdby")]
		public NotificationRead[] NotificationReadsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdby", null, value);
				OnPropertyChanged("NotificationReadsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdonbehalfby")]
		public NotificationRead[] NotificationReadsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationReadsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedby")]
		public NotificationRead[] NotificationReadsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedby", null, value);
				OnPropertyChanged("NotificationReadsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedonbehalfby")]
		public NotificationRead[] NotificationReadsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationReadsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_task_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_task_createdby")]
		public Task[] TasksOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("lk_task_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("lk_task_createdby", null, value);
				OnPropertyChanged("TasksOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_task_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_task_createdonbehalfby")]
		public Task[] TasksOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("lk_task_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("lk_task_createdonbehalfby", null, value);
				OnPropertyChanged("TasksOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_task_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_task_modifiedby")]
		public Task[] TasksOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("lk_task_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("lk_task_modifiedby", null, value);
				OnPropertyChanged("TasksOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_task_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_task_modifiedonbehalfby")]
		public Task[] TasksOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("lk_task_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("lk_task_modifiedonbehalfby", null, value);
				OnPropertyChanged("TasksOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_team_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_createdonbehalfby")]
		public Team[] TeamsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("lk_team_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("lk_team_createdonbehalfby", null, value);
				OnPropertyChanged("TeamsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_team_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_modifiedonbehalfby")]
		public Team[] TeamsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("lk_team_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("lk_team_modifiedonbehalfby", null, value);
				OnPropertyChanged("TeamsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_administratorid'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_administratorid")]
		public Team[] TeamsOfAdministrator
		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("lk_teambase_administratorid", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfAdministrator");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("lk_teambase_administratorid", null, value);
				OnPropertyChanged("TeamsOfAdministrator");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_createdby")]
		public Team[] TeamsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("lk_teambase_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("lk_teambase_createdby", null, value);
				OnPropertyChanged("TeamsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_teambase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_modifiedby")]
		public Team[] TeamsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("lk_teambase_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("lk_teambase_modifiedby", null, value);
				OnPropertyChanged("TeamsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'system_user_activity_parties'
		/// </summary>
		[RelationshipSchemaName("system_user_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("system_user_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("system_user_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'SystemUser_Email_EmailSender'
		/// </summary>
		[RelationshipSchemaName("SystemUser_Email_EmailSender")]
		public Email[] EmailsOfSender
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("SystemUser_Email_EmailSender", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfSender");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("SystemUser_Email_EmailSender", null, value);
				OnPropertyChanged("EmailsOfSender");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_email'
		/// </summary>
		[RelationshipSchemaName("user_email")]
		public Email[] EmailsOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("user_email", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("user_email", null, value);
				OnPropertyChanged("EmailsOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_genericconfiguration'
		/// </summary>
		[RelationshipSchemaName("user_ldv_genericconfiguration")]
		public GenericConfiguration[] GenericConfigurationsOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("user_ldv_genericconfiguration", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("user_ldv_genericconfiguration", null, value);
				OnPropertyChanged("GenericConfigurationsOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_notificationmessagerole'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessagerole")]
		public NotificationMessageRole[] NotificationMessageRolesOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("user_ldv_notificationmessagerole", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("user_ldv_notificationmessagerole", null, value);
				OnPropertyChanged("NotificationMessageRolesOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_notificationmessageteam'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessageteam")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("user_ldv_notificationmessageteam", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("user_ldv_notificationmessageteam", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_notificationmessageuser'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationmessageuser")]
		public NotificationMessageUser[] NotificationMessageUsersOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("user_ldv_notificationmessageuser", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("user_ldv_notificationmessageuser", null, value);
				OnPropertyChanged("NotificationMessageUsersOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationread")]
		public NotificationRead[] NotificationReadsOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("user_ldv_notificationread", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("user_ldv_notificationread", null, value);
				OnPropertyChanged("NotificationReadsOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfManager
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfManager");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_task'
		/// </summary>
		[RelationshipSchemaName("user_task")]
		public Task[] TasksOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("user_task", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("user_task", null, value);
				OnPropertyChanged("TasksOfOwningUser");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'new_team_systemuser_Team'
		/// </summary>
		[RelationshipSchemaName("new_team_systemuser_Team"), AttributeLogicalName("new_team")]
		public Team TeamAsTeam
		{
			get
			{
				return GetRelatedEntity<Team>("new_team_systemuser_Team", null);
			}
			set
			{
				OnPropertyChanging("TeamAsTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("new_team_systemuser_Team", null, value);
				OnPropertyChanged("TeamAsTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentsystemuserid")]
		public User UserAsManager
		{
			get
			{
				return GetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsManager");
			}
		}
		
		/// <summary>
		/// N:N, 'teammembership_association'
		/// </summary>
		[RelationshipSchemaName("teammembership_association")]
		public Team[] TeamsOfteammembership_association

		{
			get
			{
				var enumerable = GetRelatedEntities<Team>("teammembership_association", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TeamsOfteammembership_association");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Team>("teammembership_association", null, value);
				OnPropertyChanged("TeamsOfteammembership_association");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessagesOfCreatedBy = new RelationName("NotificationMessagesOfCreatedBy");
			public static RelationName NotificationMessagesOfCreatedByDelegate = new RelationName("NotificationMessagesOfCreatedByDelegate");
			public static RelationName NotificationMessagesOfModifiedBy = new RelationName("NotificationMessagesOfModifiedBy");
			public static RelationName NotificationMessagesOfModifiedByDelegate = new RelationName("NotificationMessagesOfModifiedByDelegate");
			public static RelationName NotificationMessagesOfOwningUser = new RelationName("NotificationMessagesOfOwningUser");
			public static RelationName GenericConfigurationsOfDefaultFromUser = new RelationName("GenericConfigurationsOfDefaultFromUser");
			public static RelationName GenericConfigurationsOfDefaultRoutingUser = new RelationName("GenericConfigurationsOfDefaultRoutingUser");
			public static RelationName NotificationMessagesOfUser = new RelationName("NotificationMessagesOfUser");
			public static RelationName NotificationMessageUsersOfUser = new RelationName("NotificationMessageUsersOfUser");
			public static RelationName NotificationReadsOfUser = new RelationName("NotificationReadsOfUser");
			public static RelationName EmailsOfCreatedBy = new RelationName("EmailsOfCreatedBy");
			public static RelationName EmailsOfCreatedByDelegate = new RelationName("EmailsOfCreatedByDelegate");
			public static RelationName EmailsOfModifiedBy = new RelationName("EmailsOfModifiedBy");
			public static RelationName EmailsOfModifiedByDelegate = new RelationName("EmailsOfModifiedByDelegate");
			public static RelationName GenericConfigurationsOfCreatedBy = new RelationName("GenericConfigurationsOfCreatedBy");
			public static RelationName GenericConfigurationsOfCreatedByDelegate = new RelationName("GenericConfigurationsOfCreatedByDelegate");
			public static RelationName GenericConfigurationsOfModifiedBy = new RelationName("GenericConfigurationsOfModifiedBy");
			public static RelationName GenericConfigurationsOfModifiedByDelegate = new RelationName("GenericConfigurationsOfModifiedByDelegate");
			public static RelationName NotificationMessageRolesOfCreatedBy = new RelationName("NotificationMessageRolesOfCreatedBy");
			public static RelationName NotificationMessageRolesOfCreatedByDelegate = new RelationName("NotificationMessageRolesOfCreatedByDelegate");
			public static RelationName NotificationMessageRolesOfModifiedBy = new RelationName("NotificationMessageRolesOfModifiedBy");
			public static RelationName NotificationMessageRolesOfModifiedByDelegate = new RelationName("NotificationMessageRolesOfModifiedByDelegate");
			public static RelationName NotificationMessageTeamsOfCreatedBy = new RelationName("NotificationMessageTeamsOfCreatedBy");
			public static RelationName NotificationMessageTeamsOfCreatedByDelegate = new RelationName("NotificationMessageTeamsOfCreatedByDelegate");
			public static RelationName NotificationMessageTeamsOfModifiedBy = new RelationName("NotificationMessageTeamsOfModifiedBy");
			public static RelationName NotificationMessageTeamsOfModifiedByDelegate = new RelationName("NotificationMessageTeamsOfModifiedByDelegate");
			public static RelationName NotificationMessageUsersOfCreatedBy = new RelationName("NotificationMessageUsersOfCreatedBy");
			public static RelationName NotificationMessageUsersOfCreatedByDelegate = new RelationName("NotificationMessageUsersOfCreatedByDelegate");
			public static RelationName NotificationMessageUsersOfModifiedBy = new RelationName("NotificationMessageUsersOfModifiedBy");
			public static RelationName NotificationMessageUsersOfModifiedByDelegate = new RelationName("NotificationMessageUsersOfModifiedByDelegate");
			public static RelationName NotificationReadsOfCreatedBy = new RelationName("NotificationReadsOfCreatedBy");
			public static RelationName NotificationReadsOfCreatedByDelegate = new RelationName("NotificationReadsOfCreatedByDelegate");
			public static RelationName NotificationReadsOfModifiedBy = new RelationName("NotificationReadsOfModifiedBy");
			public static RelationName NotificationReadsOfModifiedByDelegate = new RelationName("NotificationReadsOfModifiedByDelegate");
			public static RelationName UsersOfCreatedByDelegate = new RelationName("UsersOfCreatedByDelegate");
			public static RelationName UsersOfModifiedByDelegate = new RelationName("UsersOfModifiedByDelegate");
			public static RelationName UsersOfCreatedBy = new RelationName("UsersOfCreatedBy");
			public static RelationName UsersOfModifiedBy = new RelationName("UsersOfModifiedBy");
			public static RelationName TasksOfCreatedBy = new RelationName("TasksOfCreatedBy");
			public static RelationName TasksOfCreatedByDelegate = new RelationName("TasksOfCreatedByDelegate");
			public static RelationName TasksOfModifiedBy = new RelationName("TasksOfModifiedBy");
			public static RelationName TasksOfModifiedByDelegate = new RelationName("TasksOfModifiedByDelegate");
			public static RelationName TeamsOfCreatedByDelegate = new RelationName("TeamsOfCreatedByDelegate");
			public static RelationName TeamsOfModifiedByDelegate = new RelationName("TeamsOfModifiedByDelegate");
			public static RelationName TeamsOfAdministrator = new RelationName("TeamsOfAdministrator");
			public static RelationName TeamsOfCreatedBy = new RelationName("TeamsOfCreatedBy");
			public static RelationName TeamsOfModifiedBy = new RelationName("TeamsOfModifiedBy");
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName EmailsOfSender = new RelationName("EmailsOfSender");
			public static RelationName EmailsOfOwningUser = new RelationName("EmailsOfOwningUser");
			public static RelationName GenericConfigurationsOfOwningUser = new RelationName("GenericConfigurationsOfOwningUser");
			public static RelationName NotificationMessageRolesOfOwningUser = new RelationName("NotificationMessageRolesOfOwningUser");
			public static RelationName NotificationMessageTeamsOfOwningUser = new RelationName("NotificationMessageTeamsOfOwningUser");
			public static RelationName NotificationMessageUsersOfOwningUser = new RelationName("NotificationMessageUsersOfOwningUser");
			public static RelationName NotificationReadsOfOwningUser = new RelationName("NotificationReadsOfOwningUser");
			public static RelationName UsersOfManager = new RelationName("UsersOfManager");
			public static RelationName TasksOfOwningUser = new RelationName("TasksOfOwningUser");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName TeamAsTeam = new RelationName("TeamAsTeam");
			public static RelationName UserAsManager = new RelationName("UserAsManager");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessagesOfCreatedBy"] = new object[] { "NotificationMessagesOfCreatedBy", "ldv_notificationmessage", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_createdby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfCreatedByDelegate"] = new object[] { "NotificationMessagesOfCreatedByDelegate", "ldv_notificationmessage", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_createdonbehalfby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfModifiedBy"] = new object[] { "NotificationMessagesOfModifiedBy", "ldv_notificationmessage", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_modifiedby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfModifiedByDelegate"] = new object[] { "NotificationMessagesOfModifiedByDelegate", "ldv_notificationmessage", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_modifiedonbehalfby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfOwningUser"] = new object[] { "NotificationMessagesOfOwningUser", "ldv_notificationmessage", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_owninguser", typeof (NotificationMessage[]) };
			relationProperties["GenericConfigurationsOfDefaultFromUser"] = new object[] { "GenericConfigurationsOfDefaultFromUser", "ldv_genericconfiguration", "systemuser", "ldv_defaultfromuserid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_genericconfiguration_DefaultFromUserId", typeof (GenericConfiguration[]) };
			relationProperties["GenericConfigurationsOfDefaultRoutingUser"] = new object[] { "GenericConfigurationsOfDefaultRoutingUser", "ldv_genericconfiguration", "systemuser", "ldv_defaultroutinguser", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_genericconfiguration_DefaultRoutingUser", typeof (GenericConfiguration[]) };
			relationProperties["NotificationMessagesOfUser"] = new object[] { "NotificationMessagesOfUser", "ldv_notificationmessage", "systemuser", "ldv_userid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_notificationmessage_UserId", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessageUsersOfUser"] = new object[] { "NotificationMessageUsersOfUser", "ldv_notificationmessageuser", "systemuser", "ldv_userid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_notificationmessageuser_UserId", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationReadsOfUser"] = new object[] { "NotificationReadsOfUser", "ldv_notificationread", "systemuser", "ldv_userid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_notificationread_UserId", typeof (NotificationRead[]) };
			relationProperties["EmailsOfCreatedBy"] = new object[] { "EmailsOfCreatedBy", "email", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_email_createdby", typeof (Email[]) };
			relationProperties["EmailsOfCreatedByDelegate"] = new object[] { "EmailsOfCreatedByDelegate", "email", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_email_createdonbehalfby", typeof (Email[]) };
			relationProperties["EmailsOfModifiedBy"] = new object[] { "EmailsOfModifiedBy", "email", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_email_modifiedby", typeof (Email[]) };
			relationProperties["EmailsOfModifiedByDelegate"] = new object[] { "EmailsOfModifiedByDelegate", "email", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_email_modifiedonbehalfby", typeof (Email[]) };
			relationProperties["GenericConfigurationsOfCreatedBy"] = new object[] { "GenericConfigurationsOfCreatedBy", "ldv_genericconfiguration", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_genericconfiguration_createdby", typeof (GenericConfiguration[]) };
			relationProperties["GenericConfigurationsOfCreatedByDelegate"] = new object[] { "GenericConfigurationsOfCreatedByDelegate", "ldv_genericconfiguration", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_genericconfiguration_createdonbehalfby", typeof (GenericConfiguration[]) };
			relationProperties["GenericConfigurationsOfModifiedBy"] = new object[] { "GenericConfigurationsOfModifiedBy", "ldv_genericconfiguration", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_genericconfiguration_modifiedby", typeof (GenericConfiguration[]) };
			relationProperties["GenericConfigurationsOfModifiedByDelegate"] = new object[] { "GenericConfigurationsOfModifiedByDelegate", "ldv_genericconfiguration", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_genericconfiguration_modifiedonbehalfby", typeof (GenericConfiguration[]) };
			relationProperties["NotificationMessageRolesOfCreatedBy"] = new object[] { "NotificationMessageRolesOfCreatedBy", "ldv_notificationmessagerole", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessagerole_createdby", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageRolesOfCreatedByDelegate"] = new object[] { "NotificationMessageRolesOfCreatedByDelegate", "ldv_notificationmessagerole", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessagerole_createdonbehalfby", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageRolesOfModifiedBy"] = new object[] { "NotificationMessageRolesOfModifiedBy", "ldv_notificationmessagerole", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessagerole_modifiedby", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageRolesOfModifiedByDelegate"] = new object[] { "NotificationMessageRolesOfModifiedByDelegate", "ldv_notificationmessagerole", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessagerole_modifiedonbehalfby", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageTeamsOfCreatedBy"] = new object[] { "NotificationMessageTeamsOfCreatedBy", "ldv_notificationmessageteam", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageteam_createdby", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageTeamsOfCreatedByDelegate"] = new object[] { "NotificationMessageTeamsOfCreatedByDelegate", "ldv_notificationmessageteam", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageteam_createdonbehalfby", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageTeamsOfModifiedBy"] = new object[] { "NotificationMessageTeamsOfModifiedBy", "ldv_notificationmessageteam", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageteam_modifiedby", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageTeamsOfModifiedByDelegate"] = new object[] { "NotificationMessageTeamsOfModifiedByDelegate", "ldv_notificationmessageteam", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageteam_modifiedonbehalfby", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageUsersOfCreatedBy"] = new object[] { "NotificationMessageUsersOfCreatedBy", "ldv_notificationmessageuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageuser_createdby", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationMessageUsersOfCreatedByDelegate"] = new object[] { "NotificationMessageUsersOfCreatedByDelegate", "ldv_notificationmessageuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageuser_createdonbehalfby", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationMessageUsersOfModifiedBy"] = new object[] { "NotificationMessageUsersOfModifiedBy", "ldv_notificationmessageuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageuser_modifiedby", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationMessageUsersOfModifiedByDelegate"] = new object[] { "NotificationMessageUsersOfModifiedByDelegate", "ldv_notificationmessageuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationmessageuser_modifiedonbehalfby", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationReadsOfCreatedBy"] = new object[] { "NotificationReadsOfCreatedBy", "ldv_notificationread", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_createdby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfCreatedByDelegate"] = new object[] { "NotificationReadsOfCreatedByDelegate", "ldv_notificationread", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_createdonbehalfby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfModifiedBy"] = new object[] { "NotificationReadsOfModifiedBy", "ldv_notificationread", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_modifiedby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfModifiedByDelegate"] = new object[] { "NotificationReadsOfModifiedByDelegate", "ldv_notificationread", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_modifiedonbehalfby", typeof (NotificationRead[]) };
			relationProperties["UsersOfCreatedByDelegate"] = new object[] { "UsersOfCreatedByDelegate", "systemuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User[]) };
			relationProperties["UsersOfModifiedByDelegate"] = new object[] { "UsersOfModifiedByDelegate", "systemuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User[]) };
			relationProperties["UsersOfCreatedBy"] = new object[] { "UsersOfCreatedBy", "systemuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User[]) };
			relationProperties["UsersOfModifiedBy"] = new object[] { "UsersOfModifiedBy", "systemuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User[]) };
			relationProperties["TasksOfCreatedBy"] = new object[] { "TasksOfCreatedBy", "task", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_task_createdby", typeof (Task[]) };
			relationProperties["TasksOfCreatedByDelegate"] = new object[] { "TasksOfCreatedByDelegate", "task", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_task_createdonbehalfby", typeof (Task[]) };
			relationProperties["TasksOfModifiedBy"] = new object[] { "TasksOfModifiedBy", "task", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_task_modifiedby", typeof (Task[]) };
			relationProperties["TasksOfModifiedByDelegate"] = new object[] { "TasksOfModifiedByDelegate", "task", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_task_modifiedonbehalfby", typeof (Task[]) };
			relationProperties["TeamsOfCreatedByDelegate"] = new object[] { "TeamsOfCreatedByDelegate", "team", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_team_createdonbehalfby", typeof (Team[]) };
			relationProperties["TeamsOfModifiedByDelegate"] = new object[] { "TeamsOfModifiedByDelegate", "team", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_team_modifiedonbehalfby", typeof (Team[]) };
			relationProperties["TeamsOfAdministrator"] = new object[] { "TeamsOfAdministrator", "team", "systemuser", "administratorid", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_administratorid", typeof (Team[]) };
			relationProperties["TeamsOfCreatedBy"] = new object[] { "TeamsOfCreatedBy", "team", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_createdby", typeof (Team[]) };
			relationProperties["TeamsOfModifiedBy"] = new object[] { "TeamsOfModifiedBy", "team", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_teambase_modifiedby", typeof (Team[]) };
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "systemuser", "partyid", "systemuserid", "systemuserid", "systemuserid", "system_user_activity_parties", typeof (ActivityParty[]) };
			relationProperties["EmailsOfSender"] = new object[] { "EmailsOfSender", "email", "systemuser", "emailsender", "systemuserid", "systemuserid", "systemuserid", "SystemUser_Email_EmailSender", typeof (Email[]) };
			relationProperties["EmailsOfOwningUser"] = new object[] { "EmailsOfOwningUser", "email", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_email", typeof (Email[]) };
			relationProperties["GenericConfigurationsOfOwningUser"] = new object[] { "GenericConfigurationsOfOwningUser", "ldv_genericconfiguration", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_genericconfiguration", typeof (GenericConfiguration[]) };
			relationProperties["NotificationMessageRolesOfOwningUser"] = new object[] { "NotificationMessageRolesOfOwningUser", "ldv_notificationmessagerole", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_notificationmessagerole", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageTeamsOfOwningUser"] = new object[] { "NotificationMessageTeamsOfOwningUser", "ldv_notificationmessageteam", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_notificationmessageteam", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageUsersOfOwningUser"] = new object[] { "NotificationMessageUsersOfOwningUser", "ldv_notificationmessageuser", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_notificationmessageuser", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationReadsOfOwningUser"] = new object[] { "NotificationReadsOfOwningUser", "ldv_notificationread", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_notificationread", typeof (NotificationRead[]) };
			relationProperties["UsersOfManager"] = new object[] { "UsersOfManager", "systemuser", "systemuser", "parentsystemuserid", "systemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User[]) };
			relationProperties["TasksOfOwningUser"] = new object[] { "TasksOfOwningUser", "task", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_task", typeof (Task[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "systemuser", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "systemuser", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "systemuser", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "systemuser", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User) };
			relationProperties["TeamAsTeam"] = new object[] { "TeamAsTeam", "team", "systemuser", "teamid", "new_team", "systemuserid", "systemuserid", "new_team_systemuser_Team", typeof (Team) };
			relationProperties["UserAsManager"] = new object[] { "UserAsManager", "systemuser", "systemuser", "systemuserid", "parentsystemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public User(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["systemuserid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region AccessMode

		public enum AccessModeEnum
		{
			[EnumMember]ReadWrite = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Read = 2,
			[EnumMember]SupportUser = 3,
			[EnumMember]Noninteractive = 4,
			[EnumMember]DelegatedAdmin = 5,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region LicenseType

		public enum LicenseTypeEnum
		{
			[EnumMember]Professional = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Basic = 2,
			[EnumMember]DeviceProfessional = 3,
			[EnumMember]DeviceBasic = 4,
			[EnumMember]Essential = 5,
			[EnumMember]DeviceEssential = 6,
			[EnumMember]Enterprise = 7,
			[EnumMember]DeviceEnterprise = 8,
			[EnumMember]Sales = 9,
			[EnumMember]Service = 10,
			[EnumMember]FieldService = 11,
			[EnumMember]ProjectService = 12,
		}

		#endregion
	
		#region DefaultFiltersPopulated

		public enum DefaultFiltersPopulatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DisplayinServiceViews

		public enum DisplayinServiceViewsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PrimaryEmailStatus

		public enum PrimaryEmailStatusEnum
		{
			[EnumMember]Empty = 0,
			[EnumMember]Approved = 1,
			[EnumMember]PendingApproval = 2,
			[EnumMember]Rejected = 3,
		}

		#endregion
	
		#region IncomingEmailDeliveryMethod

		public enum IncomingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
			[EnumMember]ForwardMailbox = 3,
		}

		#endregion
	
		#region InvitationStatus

		public enum InvitationStatusEnum
		{
			[EnumMember]InvitationNotSent = 0,
			[EnumMember]Invited = 1,
			[EnumMember]InvitationNearExpired = 2,
			[EnumMember]InvitationExpired = 3,
			[EnumMember]InvitationAccepted = 4,
			[EnumMember]InvitationRejected = 5,
			[EnumMember]InvitationRevoked = 6,
		}

		#endregion
	
		#region IsActiveDirectoryUser

		public enum IsActiveDirectoryUserEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Disabled = 1,
			[EnumMember]Enabled = 0,
		}

		#endregion
	
		#region EmailAddressO365AdminApprovalStatus

		public enum EmailAddressO365AdminApprovalStatusEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Integrationusermode

		public enum IntegrationusermodeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserLicensed

		public enum UserLicensedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserSynced

		public enum UserSyncedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region OutgoingEmailDeliveryMethod

		public enum OutgoingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
		}

		#endregion
	
		#region PreferredAddress

		public enum PreferredAddressEnum
		{
			[EnumMember]MailingAddress = 1,
			[EnumMember]OtherAddress = 2,
		}

		#endregion
	
		#region PreferredEmail

		public enum PreferredEmailEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region PreferredPhone

		public enum PreferredPhoneEnum
		{
			[EnumMember]MainPhone = 1,
			[EnumMember]OtherPhone = 2,
			[EnumMember]HomePhone = 3,
			[EnumMember]MobilePhone = 4,
		}

		#endregion
	
		#region RestrictedAccessMode

		public enum RestrictedAccessModeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region Task

	/// <summary>
	/// 'Task'.<br />
	/// Generic activity representing work needed to be done.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("task")]
	public partial class Task : GeneratedEntity<Task.RelationName>
	{
		
		public Task() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Task";
		public const string SchemaName = "Task";
		public const string EntityLogicalName = "task";
		public const int EntityTypeCode = 4212;
		
		#region Attributes

		[AttributeLogicalName("activityid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (TaskId == null || TaskId == Guid.Empty) ? base.Id : TaskId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activityid");
                    base.Id = value;
                } else {
				    TaskId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=8192] 
		/// 'ActivityAdditionalParams'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("activityadditionalparams"), MaxLength(8192)]
		public string AdditionalParameters
		{
			get
			{
				var value = GetAttributeValue<string>("activityadditionalparams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityadditionalparams"))
				    value = (string) backupAttributeCollection["activityadditionalparams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AdditionalParameters");
					SetAttributeValue("activityadditionalparams", value);
				OnPropertyChanged("AdditionalParameters");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the task.
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? TaskId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (Guid?) backupAttributeCollection["activityid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TaskId");
                if (value != null)
					SetAttributeValue("activityid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("TaskId");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityTypeCode'.<br />
        /// Type of activity.
        /// </summary>
		[AttributeLogicalName("activitytypecode")]
		public string ActivityType
		{
			get
			{
				var value = GetAttributeValue<string>("activitytypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitytypecode"))
				    value = (string) backupAttributeCollection["activitytypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityType");
					SetAttributeValue("activitytypecode", value);
				OnPropertyChanged("ActivityType");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ActualDurationMinutes'.<br />
        /// Type the number of minutes spent on the task. The duration is used in reporting.
        /// </summary>
		[AttributeLogicalName("actualdurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? Duration
		{
			get
			{
				var value = GetAttributeValue<int?>("actualdurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualdurationminutes"))
				    value = (int?) backupAttributeCollection["actualdurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Duration");
					SetAttributeValue("actualdurationminutes", value);
				OnPropertyChanged("Duration");
			}
		}

        /// <summary>
        ///  
		/// 'ActualEnd'.<br />
        /// Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.
        /// </summary>
		[AttributeLogicalName("actualend")]
		public DateTime? ActualEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualend"))
				    value = (DateTime?) backupAttributeCollection["actualend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualEnd");
					SetAttributeValue("actualend", value);
				OnPropertyChanged("ActualEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ActualStart'.<br />
        /// Enter the actual start date and time for the task. By default, it displays when the task was created.
        /// </summary>
		[AttributeLogicalName("actualstart")]
		public DateTime? ActualStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualstart"))
				    value = (DateTime?) backupAttributeCollection["actualstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualStart");
					SetAttributeValue("actualstart", value);
				OnPropertyChanged("ActualStart");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Category'.<br />
        /// Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.
        /// </summary>
		[AttributeLogicalName("category"), MaxLength(250)]
		public string Category
		{
			get
			{
				var value = GetAttributeValue<string>("category");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("category"))
				    value = (string) backupAttributeCollection["category"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Category");
					SetAttributeValue("category", value);
				OnPropertyChanged("Category");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CrmTaskAssignedUniqueId'.<br />
        /// Assigned Task Unique Id
        /// </summary>
		[AttributeLogicalName("crmtaskassigneduniqueid")]
		public Guid? AssignedTaskUniqueId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("crmtaskassigneduniqueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("crmtaskassigneduniqueid"))
				    value = (Guid?) backupAttributeCollection["crmtaskassigneduniqueid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AssignedTaskUniqueId");
					SetAttributeValue("crmtaskassigneduniqueid", value);
				OnPropertyChanged("AssignedTaskUniqueId");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the task.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsBilled'.<br />
        /// Information which specifies whether the task was billed as part of resolving a case.
        /// </summary>
		[AttributeLogicalName("isbilled")]
		public bool? IsBilled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isbilled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isbilled"))
				    value = (bool?) backupAttributeCollection["isbilled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsBilled");
					SetAttributeValue("isbilled", value);
				OnPropertyChanged("IsBilled");
			}
		}

        /// <summary>
        ///  
		/// 'IsRegularActivity'.<br />
        /// Information regarding whether the activity is a regular activity type or event type.
        /// </summary>
		[AttributeLogicalName("isregularactivity")]
		public bool? IsRegularActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isregularactivity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isregularactivity"))
				    value = (bool?) backupAttributeCollection["isregularactivity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRegularActivity");
					SetAttributeValue("isregularactivity", value);
				OnPropertyChanged("IsRegularActivity");
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowCreated'.<br />
        /// Information which specifies if the task was created from a workflow rule.
        /// </summary>
		[AttributeLogicalName("isworkflowcreated")]
		public bool? IsWorkflowCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isworkflowcreated"))
				    value = (bool?) backupAttributeCollection["isworkflowcreated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsWorkflowCreated");
					SetAttributeValue("isworkflowcreated", value);
				OnPropertyChanged("IsWorkflowCreated");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

		[AttributeLogicalName("ldv_customer")]
		public EntityReference Customer
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_customer");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customer"))
				    value = (EntityReference) backupAttributeCollection["ldv_customer"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Customer");
					SetAttributeValue("ldv_customer", value);
				OnPropertyChanged("Customer");
			}
		}

        public string CustomerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_customer");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customer"))
				    value = (EntityReference) backupAttributeCollection["ldv_customer"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_isautoclosed")]
		public bool? AutoClosed
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isautoclosed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isautoclosed"))
				    value = (bool?) backupAttributeCollection["ldv_isautoclosed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AutoClosed");
					SetAttributeValue("ldv_isautoclosed", value);
				OnPropertyChanged("AutoClosed");
			}
		}

		[AttributeLogicalName("ldv_ispickrecord")]
		public bool? PickRecord
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_ispickrecord");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ispickrecord"))
				    value = (bool?) backupAttributeCollection["ldv_ispickrecord"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PickRecord");
					SetAttributeValue("ldv_ispickrecord", value);
				OnPropertyChanged("PickRecord");
			}
		}

		[AttributeLogicalName("ldv_mainslainstanceid")]
		public Guid? MainSLAInstance
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_mainslainstanceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_mainslainstanceid"))
				    value = (EntityReference) backupAttributeCollection["ldv_mainslainstanceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MainSLAInstance");
                if (value != null)
				    SetAttributeValue("ldv_mainslainstanceid", new EntityReference("ldv_slainstance", value.Value));
                else
					SetAttributeValue("ldv_mainslainstanceid", value);
				OnPropertyChanged("MainSLAInstance");
			}
		}

        public string MainSLAInstanceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_mainslainstanceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_mainslainstanceid"))
				    value = (EntityReference) backupAttributeCollection["ldv_mainslainstanceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_roottaskstepid")]
		public Guid? RootTaskStage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_roottaskstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roottaskstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roottaskstepid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("RootTaskStage");
                if (value != null)
				    SetAttributeValue("ldv_roottaskstepid", new EntityReference("ldv_taskstep", value.Value));
                else
					SetAttributeValue("ldv_roottaskstepid", value);
				OnPropertyChanged("RootTaskStage");
			}
		}

        public string RootTaskStageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_roottaskstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roottaskstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roottaskstepid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_slaconfiguration")]
		public Guid? SLAConfiguration
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_slaconfiguration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_slaconfiguration"))
				    value = (EntityReference) backupAttributeCollection["ldv_slaconfiguration"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLAConfiguration");
                if (value != null)
				    SetAttributeValue("ldv_slaconfiguration", new EntityReference("ldv_slaconfiguration", value.Value));
                else
					SetAttributeValue("ldv_slaconfiguration", value);
				OnPropertyChanged("SLAConfiguration");
			}
		}

        public string SLAConfigurationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_slaconfiguration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_slaconfiguration"))
				    value = (EntityReference) backupAttributeCollection["ldv_slaconfiguration"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_subjectinarabic"), MaxLength(100)]
		public string SubjectInArabic
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_subjectinarabic");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_subjectinarabic"))
				    value = (string) backupAttributeCollection["ldv_subjectinarabic"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SubjectInArabic");
					SetAttributeValue("ldv_subjectinarabic", value);
				OnPropertyChanged("SubjectInArabic");
			}
		}

		[AttributeLogicalName("ldv_taskconfigurationid")]
		public Guid? TaskConfiguration
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TaskConfiguration");
                if (value != null)
				    SetAttributeValue("ldv_taskconfigurationid", new EntityReference("ldv_taskconfiguration", value.Value));
                else
					SetAttributeValue("ldv_taskconfigurationid", value);
				OnPropertyChanged("TaskConfiguration");
			}
		}

        public string TaskConfigurationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_taskconfigurationstageid")]
		public Guid? TaskConfigurationStage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationstageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationstageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationstageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TaskConfigurationStage");
                if (value != null)
				    SetAttributeValue("ldv_taskconfigurationstageid", new EntityReference("ldv_taskconfigurationstage", value.Value));
                else
					SetAttributeValue("ldv_taskconfigurationstageid", value);
				OnPropertyChanged("TaskConfigurationStage");
			}
		}

        public string TaskConfigurationStageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationstageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationstageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationstageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_taskconfigurationstepid")]
		public Guid? TaskConfigurationStep
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationstepid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TaskConfigurationStep");
                if (value != null)
				    SetAttributeValue("ldv_taskconfigurationstepid", new EntityReference("ldv_taskconfigurationstep", value.Value));
                else
					SetAttributeValue("ldv_taskconfigurationstepid", value);
				OnPropertyChanged("TaskConfigurationStep");
			}
		}

        public string TaskConfigurationStepName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_taskconfigurationstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskconfigurationstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskconfigurationstepid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_TaskStepId'.<br />
        /// Unique identifier for Task Step associated with Task.
        /// </summary>
		[AttributeLogicalName("ldv_taskstepid")]
		public Guid? TaskStage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_taskstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskstepid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TaskStage");
                if (value != null)
				    SetAttributeValue("ldv_taskstepid", new EntityReference("ldv_taskstep", value.Value));
                else
					SetAttributeValue("ldv_taskstepid", value);
				OnPropertyChanged("TaskStage");
			}
		}

        public string TaskStageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_taskstepid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_taskstepid"))
				    value = (EntityReference) backupAttributeCollection["ldv_taskstepid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Shows the record owner's business unit.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team that owns the task.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user that owns the task.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 100)] 
		/// 'PercentComplete'.<br />
        /// Type the percentage complete value for the task to track tasks to completion.
        /// </summary>
		[AttributeLogicalName("percentcomplete"), InRange("0", "100", typeof(int))]
		public int? PercentComplete
		{
			get
			{
				var value = GetAttributeValue<int?>("percentcomplete");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("percentcomplete"))
				    value = (int?) backupAttributeCollection["percentcomplete"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PercentComplete");
					SetAttributeValue("percentcomplete", value);
				OnPropertyChanged("PercentComplete");
			}
		}

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Select the priority so that preferred customers or critical issues are handled quickly.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityEnum? Priority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityEnum?) null : (PriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Priority");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("Priority");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// Unique identifier of the object with which the task is associated.
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Regarding");
					SetAttributeValue("regardingobjectid", value);
				OnPropertyChanged("Regarding");
			}
		}

        public string RegardingName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ScheduledDurationMinutes'.<br />
        /// Scheduled duration of the task, specified in minutes.
        /// </summary>
		[AttributeLogicalName("scheduleddurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ScheduledDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("scheduleddurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduleddurationminutes"))
				    value = (int?) backupAttributeCollection["scheduleddurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledDuration");
					SetAttributeValue("scheduleddurationminutes", value);
				OnPropertyChanged("ScheduledDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Enter the expected due date and time.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? DueDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DueDate");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("DueDate");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Enter the expected due date and time.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("StartDate");
			}
		}

        /// <summary>
        ///  
		/// 'ServiceId'.<br />
        /// Choose the service that is associated with this activity.
        /// </summary>
		[AttributeLogicalName("serviceid")]
		public Guid? Service
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Service");
                if (value != null)
				    SetAttributeValue("serviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("serviceid", value);
				OnPropertyChanged("Service");
			}
		}

        public string ServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the Task record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this Task. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SortDate'.<br />
        /// Shows the date and time by which the activities are sorted.
        /// </summary>
		[AttributeLogicalName("sortdate")]
		public DateTime? SortDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("sortdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sortdate"))
				    value = (DateTime?) backupAttributeCollection["sortdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SortDate");
					SetAttributeValue("sortdate", value);
				OnPropertyChanged("SortDate");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public ActivityStatusEnum? ActivityStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (ActivityStatusEnum?) null : (ActivityStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ActivityStatus");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("ActivityStatus");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the task's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Subcategory'.<br />
        /// Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.
        /// </summary>
		[AttributeLogicalName("subcategory"), MaxLength(250)]
		public string SubCategory
		{
			get
			{
				var value = GetAttributeValue<string>("subcategory");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subcategory"))
				    value = (string) backupAttributeCollection["subcategory"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SubCategory");
					SetAttributeValue("subcategory", value);
				OnPropertyChanged("SubCategory");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=200] 
		/// 'Subject'.<br />
        /// Type a short description about the objective or primary topic of the task.
        /// </summary>
		[AttributeLogicalName("subject"), Required, MaxLength(200)]
		public string Subject
		{
			get
			{
				var value = GetAttributeValue<string>("subject");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subject"))
				    value = (string) backupAttributeCollection["subject"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Subject");
					SetAttributeValue("subject", value);
				OnPropertyChanged("Subject");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the task.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'task_activity_parties'
		/// </summary>
		[RelationshipSchemaName("task_activity_parties")]
		public ActivityParty[] ActivityPartysOfActivity
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("task_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("task_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_task_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_task_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_task_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_task_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_task_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_task_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_task_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_task_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_task_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_task_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_task_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_task_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_task_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_task_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_task_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_task_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'team_task'
		/// </summary>
		[RelationshipSchemaName("team_task"), AttributeLogicalName("owningteam")]
		public Team TeamAsOwningTeam
		{
			get
			{
				return GetRelatedEntity<Team>("team_task", null);
			}
			set
			{
				OnPropertyChanging("TeamAsOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Team>("team_task", null, value);
				OnPropertyChanged("TeamAsOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'user_task'
		/// </summary>
		[RelationshipSchemaName("user_task"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_task", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_task", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfActivity = new RelationName("ActivityPartysOfActivity");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName TeamAsOwningTeam = new RelationName("TeamAsOwningTeam");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfActivity"] = new object[] { "ActivityPartysOfActivity", "activityparty", "task", "activityid", "activityid", "activityid", "activityid", "task_activity_parties", typeof (ActivityParty[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "task", "systemuserid", "createdby", "activityid", "activityid", "lk_task_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "task", "systemuserid", "createdonbehalfby", "activityid", "activityid", "lk_task_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "task", "systemuserid", "modifiedby", "activityid", "activityid", "lk_task_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "task", "systemuserid", "modifiedonbehalfby", "activityid", "activityid", "lk_task_modifiedonbehalfby", typeof (User) };
			relationProperties["TeamAsOwningTeam"] = new object[] { "TeamAsOwningTeam", "team", "task", "teamid", "owningteam", "activityid", "activityid", "team_task", typeof (Team) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "task", "systemuserid", "owninguser", "activityid", "activityid", "user_task", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Task(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activityid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ActivityType

		public enum ActivityTypeEnum
		{
			[EnumMember]Fax = 4204,
			[EnumMember]PhoneCall = 4210,
			[EnumMember]Email = 4202,
			[EnumMember]Letter = 4207,
			[EnumMember]Appointment = 4201,
			[EnumMember]ServiceActivity = 4214,
			[EnumMember]OpportunityClose = 4208,
			[EnumMember]OrderClose = 4209,
			[EnumMember]QuoteClose = 4211,
			[EnumMember]CaseResolution = 4206,
			[EnumMember]Task = 4212,
			[EnumMember]CampaignResponse = 4401,
			[EnumMember]CampaignActivity = 4402,
			[EnumMember]BulkOperation = 4406,
			[EnumMember]RecurringAppointment = 4251,
			[EnumMember]NotificationMessage = 10016,
			[EnumMember]PushMessage = 10026,
			[EnumMember]SMS = 10031,
		}

		#endregion
	
		#region IsBilled

		public enum IsBilledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRegularActivity

		public enum IsRegularActivityEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsWorkflowCreated

		public enum IsWorkflowCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region AutoClosed

		public enum AutoClosedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PickRecord

		public enum PickRecordEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Priority

		public enum PriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region ActivityStatus

		public enum ActivityStatusEnum
		{
			[EnumMember]Open = 0,
			[EnumMember]Completed = 1,
			[EnumMember]Canceled = 2,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]NotStarted = 2,
			[EnumMember]InProgress = 3,
			[EnumMember]Waitingonsomeoneelse = 4,
			[EnumMember]Completed = 5,
			[EnumMember]Canceled = 6,
			[EnumMember]Deferred = 7,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivityType = "activitytypecode";
				public const string IsBilled = "isbilled";
				public const string IsRegularActivity = "isregularactivity";
				public const string IsWorkflowCreated = "isworkflowcreated";
				public const string AutoClosed = "ldv_isautoclosed";
				public const string PickRecord = "ldv_ispickrecord";
				public const string Priority = "prioritycode";
				public const string ActivityStatus = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityType 
				{
					public const string Fax_1033 = "Fax";
					public const string PhoneCall_1033 = "Phone Call";
					public const string Email_1033 = "Email";
					public const string Letter_1033 = "Letter";
					public const string Appointment_1033 = "Appointment";
					public const string ServiceActivity_1033 = "Service Activity";
					public const string OpportunityClose_1033 = "Opportunity Close";
					public const string OrderClose_1033 = "Order Close";
					public const string QuoteClose_1033 = "Quote Close";
					public const string CaseResolution_1033 = "Case Resolution";
					public const string Task_1033 = "Task";
					public const string CampaignResponse_1033 = "Campaign Response";
					public const string CampaignActivity_1033 = "Campaign Activity";
					public const string BulkOperation_1033 = "Bulk Operation";
					public const string RecurringAppointment_1033 = "Recurring Appointment";
					public const string NotificationMessage_1033 = "Notification Message";
					public const string PushMessage_1033 = "Push Message";
					public const string SMS_1033 = "SMS";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityType), label, languageCode);
					}
				}

				public static class IsBilled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsBilled), label, languageCode);
					}
				}

				public static class IsRegularActivity 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsRegularActivity), label, languageCode);
					}
				}

				public static class IsWorkflowCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsWorkflowCreated), label, languageCode);
					}
				}

				public static class AutoClosed 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(AutoClosed), label, languageCode);
					}
				}

				public static class PickRecord 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(PickRecord), label, languageCode);
					}
				}

				public static class Priority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Priority), label, languageCode);
					}
				}

				public static class ActivityStatus 
				{
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityStatus), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string NotStarted_1033 = "Not Started";
					public const string InProgress_1033 = "In Progress";
					public const string Waitingonsomeoneelse_1033 = "Waiting on someone else";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";
					public const string Deferred_1033 = "Deferred";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string AdditionalParameters = "activityadditionalparams";
			public const string TaskId = "activityid";
			public const string ActivityType = "activitytypecode";
			public const string Duration = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string Category = "category";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string AssignedTaskUniqueId = "crmtaskassigneduniqueid";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsBilled = "isbilled";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string Customer = "ldv_customer";
			public const string AutoClosed = "ldv_isautoclosed";
			public const string PickRecord = "ldv_ispickrecord";
			public const string MainSLAInstance = "ldv_mainslainstanceid";
			public const string RootTaskStage = "ldv_roottaskstepid";
			public const string SLAConfiguration = "ldv_slaconfiguration";
			public const string SubjectInArabic = "ldv_subjectinarabic";
			public const string TaskConfiguration = "ldv_taskconfigurationid";
			public const string TaskConfigurationStage = "ldv_taskconfigurationstageid";
			public const string TaskConfigurationStep = "ldv_taskconfigurationstepid";
			public const string TaskStage = "ldv_taskstepid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PercentComplete = "percentcomplete";
			public const string Priority = "prioritycode";
			public const string Process = "processid";
			public const string Regarding = "regardingobjectid";
			public const string ScheduledDuration = "scheduleddurationminutes";
			public const string DueDate = "scheduledend";
			public const string StartDate = "scheduledstart";
			public const string Service = "serviceid";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string ProcessStage = "stageid";
			public const string ActivityStatus = "statecode";
			public const string StatusReason = "statuscode";
			public const string SubCategory = "subcategory";
			public const string Subject = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string AdditionalParameters = "ActivityAdditionalParams";
				public const string TaskId = "ActivityId";
				public const string ActivityType = "ActivityTypeCode";
				public const string Duration = "ActualDurationMinutes";
				public const string ActualEnd = "ActualEnd";
				public const string ActualStart = "ActualStart";
				public const string Category = "Category";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string AssignedTaskUniqueId = "CrmTaskAssignedUniqueId";
				public const string Description = "Description";
				public const string ExchangeRate = "ExchangeRate";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IsBilled = "IsBilled";
				public const string IsRegularActivity = "IsRegularActivity";
				public const string IsWorkflowCreated = "IsWorkflowCreated";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string Customer = "ldv_Customer";
				public const string AutoClosed = "ldv_IsAutoClosed";
				public const string PickRecord = "ldv_IsPickRecord";
				public const string MainSLAInstance = "ldv_MainSLAInstanceId";
				public const string RootTaskStage = "ldv_RootTaskStepId";
				public const string SLAConfiguration = "ldv_SLAConfiguration";
				public const string SubjectInArabic = "ldv_subjectinarabic";
				public const string TaskConfiguration = "ldv_TaskConfigurationId";
				public const string TaskConfigurationStage = "ldv_TaskConfigurationStageId";
				public const string TaskConfigurationStep = "ldv_TaskConfigurationStepId";
				public const string TaskStage = "ldv_TaskStepId";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string PercentComplete = "PercentComplete";
				public const string Priority = "PriorityCode";
				public const string Process = "ProcessId";
				public const string Regarding = "RegardingObjectId";
				public const string ScheduledDuration = "ScheduledDurationMinutes";
				public const string DueDate = "ScheduledEnd";
				public const string StartDate = "ScheduledStart";
				public const string Service = "ServiceId";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SortDate = "SortDate";
				public const string ProcessStage = "StageId";
				public const string ActivityStatus = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string SubCategory = "Subcategory";
				public const string Subject = "Subject";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class AdditionalParameters
				{
					public const string _1033 = "Additional Parameters";
				}

				public static class TaskId
				{
					public const string _1033 = "Task";
				}

				public static class ActivityType
				{
					public const string _1033 = "Activity Type";
				}

				public static class Duration
				{
					public const string _1033 = "Duration";
				}

				public static class ActualEnd
				{
					public const string _1033 = "Actual End";
				}

				public static class ActualStart
				{
					public const string _1033 = "Actual Start";
				}

				public static class Category
				{
					public const string _1033 = "Category";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class AssignedTaskUniqueId
				{
					public const string _1033 = "Assigned Task Unique Id";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IsBilled
				{
					public const string _1033 = "Is Billed";
				}

				public static class IsRegularActivity
				{
					public const string _1033 = "Is Regular Activity";
				}

				public static class IsWorkflowCreated
				{
					public const string _1033 = "Is Workflow Created";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class Customer
				{
					public const string _1033 = "Customer";
				}

				public static class AutoClosed
				{
					public const string _1033 = "Auto Closed";
				}

				public static class PickRecord
				{
					public const string _1033 = "Pick Record";
				}

				public static class MainSLAInstance
				{
					public const string _1033 = "Main SLA Instance";
				}

				public static class RootTaskStage
				{
					public const string _1033 = "Root Task Stage";
				}

				public static class SLAConfiguration
				{
					public const string _1033 = "SLA Configuration";
				}

				public static class SubjectInArabic
				{
					public const string _1033 = "Subject In Arabic";
				}

				public static class TaskConfiguration
				{
					public const string _1033 = "Task Configuration";
				}

				public static class TaskConfigurationStage
				{
					public const string _1033 = "Task Configuration Stage";
				}

				public static class TaskConfigurationStep
				{
					public const string _1033 = "Task Configuration Step";
				}

				public static class TaskStage
				{
					public const string _1033 = "Task Stage";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class PercentComplete
				{
					public const string _1033 = "Percent Complete";
				}

				public static class Priority
				{
					public const string _1033 = "Priority";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class Regarding
				{
					public const string _1033 = "Regarding";
				}

				public static class ScheduledDuration
				{
					public const string _1033 = "Scheduled Duration";
				}

				public static class DueDate
				{
					public const string _1033 = "Due Date";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class Service
				{
					public const string _1033 = "Service";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SortDate
				{
					public const string _1033 = "Sort Date";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class ActivityStatus
				{
					public const string _1033 = "Activity Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class SubCategory
				{
					public const string _1033 = "Sub-Category";
				}

				public static class Subject
				{
					public const string _1033 = "Subject";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string ActivityPartysOfActivity = "task_activity_parties";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedBy = "lk_task_createdby";
				public const string UserAsCreatedByDelegate = "lk_task_createdonbehalfby";
				public const string UserAsModifiedBy = "lk_task_modifiedby";
				public const string UserAsModifiedByDelegate = "lk_task_modifiedonbehalfby";
				public const string TeamAsOwningTeam = "team_task";
				public const string UserAsOwningUser = "user_task";

				public static class Lookups
				{
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string TeamAsOwningTeam = "owningteam";
					public const string UserAsOwningUser = "owninguser";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region Team

	/// <summary>
	/// 'Team'.<br />
	/// Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("team")]
	public partial class Team : GeneratedEntity<Team.RelationName>
	{
		
		public Team() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Team";
		public const string SchemaName = "Team";
		public const string EntityLogicalName = "team";
		public const int EntityTypeCode = 9;
		
		#region Attributes

		[AttributeLogicalName("teamid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (TeamId == null || TeamId == Guid.Empty) ? base.Id : TeamId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("teamid");
                    base.Id = value;
                } else {
				    TeamId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AdministratorId'.<br />
        /// Unique identifier of the user primary responsible for the team.
        /// </summary>
		[AttributeLogicalName("administratorid")]
		public Guid? Administrator
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("administratorid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("administratorid"))
				    value = (EntityReference) backupAttributeCollection["administratorid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Administrator");
                if (value != null)
				    SetAttributeValue("administratorid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("administratorid", value);
				OnPropertyChanged("Administrator");
			}
		}

        public string AdministratorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("administratorid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("administratorid"))
				    value = (EntityReference) backupAttributeCollection["administratorid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the team is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("BusinessUnit");
                if (value != null)
				    SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("businessunitid", value);
				OnPropertyChanged("BusinessUnit");
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the team.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the team was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the team.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Description of the team.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress'.<br />
        /// Email address for the team.
        /// </summary>
		[AttributeLogicalName("emailaddress"), MaxLength(100)]
		public string Email
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress"))
				    value = (string) backupAttributeCollection["emailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email");
					SetAttributeValue("emailaddress", value);
				OnPropertyChanged("Email");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the team with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsDefault'.<br />
        /// Information about whether the team is a default business unit team.
        /// </summary>
		[AttributeLogicalName("isdefault")]
		public bool? IsDefault
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdefault");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdefault"))
				    value = (bool?) backupAttributeCollection["isdefault"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsDefault");
					SetAttributeValue("isdefault", value);
				OnPropertyChanged("IsDefault");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the team.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the team was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the team.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=160] 
		/// 'Name'.<br />
        /// Name of the team.
        /// </summary>
		[AttributeLogicalName("name"), MaxLength(160)]
		public string TeamName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TeamName");
					SetAttributeValue("name", value);
				OnPropertyChanged("TeamName");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the team.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (Guid?) backupAttributeCollection["organizationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Organization");
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("Organization");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the team.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultQueue");
                if (value != null)
				    SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
					SetAttributeValue("queueid", value);
				OnPropertyChanged("DefaultQueue");
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// Choose the record that the team relates to.
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference RegardingObjectId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingObjectId");
					SetAttributeValue("regardingobjectid", value);
				OnPropertyChanged("RegardingObjectId");
			}
		}

        public string RegardingObjectIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'SystemManaged'.<br />
        /// Select whether the team will be managed by the system.
        /// </summary>
		[AttributeLogicalName("systemmanaged")]
		public bool? IsSystemManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("systemmanaged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemmanaged"))
				    value = (bool?) backupAttributeCollection["systemmanaged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsSystemManaged");
					SetAttributeValue("systemmanaged", value);
				OnPropertyChanged("IsSystemManaged");
			}
		}

        /// <summary>
        ///  
		/// 'TeamId'.<br />
        /// Unique identifier for the team.
        /// </summary>
		[AttributeLogicalName("teamid")]
		public Guid? TeamId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("teamid"))
				    value = (Guid?) backupAttributeCollection["teamid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TeamId");
                if (value != null)
					SetAttributeValue("teamid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("TeamId");
			}
		}

        /// <summary>
        ///  
		/// 'TeamTemplateId'.<br />
        /// Shows the team template that is associated with the team.
        /// </summary>
		[AttributeLogicalName("teamtemplateid")]
		public Guid? TeamTemplateIdentifier
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("teamtemplateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("teamtemplateid"))
				    value = (EntityReference) backupAttributeCollection["teamtemplateid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("TeamTemplateIdentifier");
                if (value != null)
				    SetAttributeValue("teamtemplateid", new EntityReference("teamtemplate", value.Value));
                else
					SetAttributeValue("teamtemplateid", value);
				OnPropertyChanged("TeamTemplateIdentifier");
			}
		}

        public string TeamTemplateIdentifierName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("teamtemplateid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("teamtemplateid"))
				    value = (EntityReference) backupAttributeCollection["teamtemplateid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'TeamType'.<br />
        /// Select the team type.
        /// </summary>
		[AttributeLogicalName("teamtype")]
		public TeamTypeEnum? TeamType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("teamtype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("teamtype"))
				    value = (OptionSetValue) backupAttributeCollection["teamtype"];
                return value == null ? (TeamTypeEnum?) null : (TeamTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("TeamType");
                if (value != null)
				    SetAttributeValue("teamtype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("teamtype", value);
				OnPropertyChanged("TeamType");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the team.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the team.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionnumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("Versionnumber");
			}
		}

        /// <summary>
        /// [MaximumLength=160] 
		/// 'YomiName'.<br />
        /// Pronunciation of the full name of the team, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yominame"), MaxLength(160)]
		public string YomiName
		{
			get
			{
				var value = GetAttributeValue<string>("yominame");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yominame"))
				    value = (string) backupAttributeCollection["yominame"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiName");
					SetAttributeValue("yominame", value);
				OnPropertyChanged("YomiName");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_team_owningteam'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_team_owningteam")]
		public NotificationMessage[] NotificationMessagesOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_team_owningteam", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_team_owningteam", null, value);
				OnPropertyChanged("NotificationMessagesOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_team_ldv_notificationmessage_TeamId'
		/// </summary>
		[RelationshipSchemaName("ldv_team_ldv_notificationmessage_TeamId")]
		public NotificationMessage[] NotificationMessagesOfTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_team_ldv_notificationmessage_TeamId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_team_ldv_notificationmessage_TeamId", null, value);
				OnPropertyChanged("NotificationMessagesOfTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_team_ldv_notificationmessageteam_TeamId'
		/// </summary>
		[RelationshipSchemaName("ldv_team_ldv_notificationmessageteam_TeamId")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("ldv_team_ldv_notificationmessageteam_TeamId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("ldv_team_ldv_notificationmessageteam_TeamId", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'new_team_systemuser_Team'
		/// </summary>
		[RelationshipSchemaName("new_team_systemuser_Team")]
		public User[] UsersOfTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("new_team_systemuser_Team", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("new_team_systemuser_Team", null, value);
				OnPropertyChanged("UsersOfTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_email'
		/// </summary>
		[RelationshipSchemaName("team_email")]
		public Email[] EmailsOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<Email>("team_email", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("EmailsOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Email>("team_email", null, value);
				OnPropertyChanged("EmailsOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_ldv_genericconfiguration'
		/// </summary>
		[RelationshipSchemaName("team_ldv_genericconfiguration")]
		public GenericConfiguration[] GenericConfigurationsOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<GenericConfiguration>("team_ldv_genericconfiguration", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationsOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<GenericConfiguration>("team_ldv_genericconfiguration", null, value);
				OnPropertyChanged("GenericConfigurationsOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_ldv_notificationmessagerole'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessagerole")]
		public NotificationMessageRole[] NotificationMessageRolesOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageRole>("team_ldv_notificationmessagerole", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageRolesOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageRole>("team_ldv_notificationmessagerole", null, value);
				OnPropertyChanged("NotificationMessageRolesOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_ldv_notificationmessageteam'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessageteam")]
		public NotificationMessageTeam[] NotificationMessageTeamsOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageTeam>("team_ldv_notificationmessageteam", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageTeamsOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageTeam>("team_ldv_notificationmessageteam", null, value);
				OnPropertyChanged("NotificationMessageTeamsOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_ldv_notificationmessageuser'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationmessageuser")]
		public NotificationMessageUser[] NotificationMessageUsersOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessageUser>("team_ldv_notificationmessageuser", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessageUsersOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessageUser>("team_ldv_notificationmessageuser", null, value);
				OnPropertyChanged("NotificationMessageUsersOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("team_ldv_notificationread")]
		public NotificationRead[] NotificationReadsOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("team_ldv_notificationread", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("team_ldv_notificationread", null, value);
				OnPropertyChanged("NotificationReadsOfOwningTeam");
			}
		}
		
		/// <summary>
		/// 1:N, 'team_task'
		/// </summary>
		[RelationshipSchemaName("team_task")]
		public Task[] TasksOfOwningTeam
		{
			get
			{
				var enumerable = GetRelatedEntities<Task>("team_task", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("TasksOfOwningTeam");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Task>("team_task", null, value);
				OnPropertyChanged("TasksOfOwningTeam");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_team_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_team_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_team_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_team_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_team_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_team_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_team_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_administratorid'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_administratorid"), AttributeLogicalName("administratorid")]
		public User UserAsAdministrator
		{
			get
			{
				return GetRelatedEntity<User>("lk_teambase_administratorid", null);
			}
			set
			{
				OnPropertyChanging("UserAsAdministrator");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_administratorid", null, value);
				OnPropertyChanged("UserAsAdministrator");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_teambase_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_teambase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_teambase_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_teambase_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_teambase_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:N, 'teammembership_association'
		/// </summary>
		[RelationshipSchemaName("teammembership_association")]
		public User[] UsersOfteammembership_association

		{
			get
			{
				var enumerable = GetRelatedEntities<User>("teammembership_association", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfteammembership_association");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("teammembership_association", null, value);
				OnPropertyChanged("UsersOfteammembership_association");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessagesOfOwningTeam = new RelationName("NotificationMessagesOfOwningTeam");
			public static RelationName NotificationMessagesOfTeam = new RelationName("NotificationMessagesOfTeam");
			public static RelationName NotificationMessageTeamsOfTeam = new RelationName("NotificationMessageTeamsOfTeam");
			public static RelationName UsersOfTeam = new RelationName("UsersOfTeam");
			public static RelationName EmailsOfOwningTeam = new RelationName("EmailsOfOwningTeam");
			public static RelationName GenericConfigurationsOfOwningTeam = new RelationName("GenericConfigurationsOfOwningTeam");
			public static RelationName NotificationMessageRolesOfOwningTeam = new RelationName("NotificationMessageRolesOfOwningTeam");
			public static RelationName NotificationMessageTeamsOfOwningTeam = new RelationName("NotificationMessageTeamsOfOwningTeam");
			public static RelationName NotificationMessageUsersOfOwningTeam = new RelationName("NotificationMessageUsersOfOwningTeam");
			public static RelationName NotificationReadsOfOwningTeam = new RelationName("NotificationReadsOfOwningTeam");
			public static RelationName TasksOfOwningTeam = new RelationName("TasksOfOwningTeam");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsAdministrator = new RelationName("UserAsAdministrator");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessagesOfOwningTeam"] = new object[] { "NotificationMessagesOfOwningTeam", "ldv_notificationmessage", "team", "owningteam", "teamid", "teamid", "teamid", "ldv_notificationmessage_team_owningteam", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfTeam"] = new object[] { "NotificationMessagesOfTeam", "ldv_notificationmessage", "team", "ldv_teamid", "teamid", "teamid", "teamid", "ldv_team_ldv_notificationmessage_TeamId", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessageTeamsOfTeam"] = new object[] { "NotificationMessageTeamsOfTeam", "ldv_notificationmessageteam", "team", "ldv_teamid", "teamid", "teamid", "teamid", "ldv_team_ldv_notificationmessageteam_TeamId", typeof (NotificationMessageTeam[]) };
			relationProperties["UsersOfTeam"] = new object[] { "UsersOfTeam", "systemuser", "team", "new_team", "teamid", "teamid", "teamid", "new_team_systemuser_Team", typeof (User[]) };
			relationProperties["EmailsOfOwningTeam"] = new object[] { "EmailsOfOwningTeam", "email", "team", "owningteam", "teamid", "teamid", "teamid", "team_email", typeof (Email[]) };
			relationProperties["GenericConfigurationsOfOwningTeam"] = new object[] { "GenericConfigurationsOfOwningTeam", "ldv_genericconfiguration", "team", "owningteam", "teamid", "teamid", "teamid", "team_ldv_genericconfiguration", typeof (GenericConfiguration[]) };
			relationProperties["NotificationMessageRolesOfOwningTeam"] = new object[] { "NotificationMessageRolesOfOwningTeam", "ldv_notificationmessagerole", "team", "owningteam", "teamid", "teamid", "teamid", "team_ldv_notificationmessagerole", typeof (NotificationMessageRole[]) };
			relationProperties["NotificationMessageTeamsOfOwningTeam"] = new object[] { "NotificationMessageTeamsOfOwningTeam", "ldv_notificationmessageteam", "team", "owningteam", "teamid", "teamid", "teamid", "team_ldv_notificationmessageteam", typeof (NotificationMessageTeam[]) };
			relationProperties["NotificationMessageUsersOfOwningTeam"] = new object[] { "NotificationMessageUsersOfOwningTeam", "ldv_notificationmessageuser", "team", "owningteam", "teamid", "teamid", "teamid", "team_ldv_notificationmessageuser", typeof (NotificationMessageUser[]) };
			relationProperties["NotificationReadsOfOwningTeam"] = new object[] { "NotificationReadsOfOwningTeam", "ldv_notificationread", "team", "owningteam", "teamid", "teamid", "teamid", "team_ldv_notificationread", typeof (NotificationRead[]) };
			relationProperties["TasksOfOwningTeam"] = new object[] { "TasksOfOwningTeam", "task", "team", "owningteam", "teamid", "teamid", "teamid", "team_task", typeof (Task[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "team", "systemuserid", "createdonbehalfby", "teamid", "teamid", "lk_team_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "team", "systemuserid", "modifiedonbehalfby", "teamid", "teamid", "lk_team_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsAdministrator"] = new object[] { "UserAsAdministrator", "systemuser", "team", "systemuserid", "administratorid", "teamid", "teamid", "lk_teambase_administratorid", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "team", "systemuserid", "createdby", "teamid", "teamid", "lk_teambase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "team", "systemuserid", "modifiedby", "teamid", "teamid", "lk_teambase_modifiedby", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Team(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["teamid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region IsDefault

		public enum IsDefaultEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsSystemManaged

		public enum IsSystemManagedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region TeamType

		public enum TeamTypeEnum
		{
			[EnumMember]Owner = 0,
			[EnumMember]Access = 1,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string IsDefault = "isdefault";
				public const string IsSystemManaged = "systemmanaged";
				public const string TeamType = "teamtype";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class IsDefault 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsDefault), label, languageCode);
					}
				}

				public static class IsSystemManaged 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsSystemManaged), label, languageCode);
					}
				}

				public static class TeamType 
				{
					public const string Owner_1033 = "Owner";
					public const string Access_1033 = "Access";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(TeamType), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Administrator = "administratorid";
			public const string BusinessUnit = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string Description = "description";
			public const string Email = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefault = "isdefault";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string TeamName = "name";
			public const string Organization = "organizationid";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Process = "processid";
			public const string DefaultQueue = "queueid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string ProcessStage = "stageid";
			public const string IsSystemManaged = "systemmanaged";
			public const string TeamId = "teamid";
			public const string TeamTemplateIdentifier = "teamtemplateid";
			public const string TeamType = "teamtype";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string Versionnumber = "versionnumber";
			public const string YomiName = "yominame";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string Administrator = "AdministratorId";
				public const string BusinessUnit = "BusinessUnitId";
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string Description = "Description";
				public const string Email = "EMailAddress";
				public const string ExchangeRate = "ExchangeRate";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string IsDefault = "IsDefault";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string TeamName = "Name";
				public const string Organization = "OrganizationId";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Process = "ProcessId";
				public const string DefaultQueue = "QueueId";
				public const string RegardingObjectId = "RegardingObjectId";
				public const string ProcessStage = "StageId";
				public const string IsSystemManaged = "SystemManaged";
				public const string TeamId = "TeamId";
				public const string TeamTemplateIdentifier = "TeamTemplateId";
				public const string TeamType = "TeamType";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string Versionnumber = "VersionNumber";
				public const string YomiName = "YomiName";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Administrator
				{
					public const string _1033 = "Administrator";
				}

				public static class BusinessUnit
				{
					public const string _1033 = "Business Unit";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class Description
				{
					public const string _1033 = "Description";
				}

				public static class Email
				{
					public const string _1033 = "Email";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class IsDefault
				{
					public const string _1033 = "Is Default";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class TeamName
				{
					public const string _1033 = "Team Name";
				}

				public static class Organization
				{
					public const string _1033 = "Organization ";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class DefaultQueue
				{
					public const string _1033 = "Default Queue";
				}

				public static class RegardingObjectId
				{
					public const string _1033 = "Regarding Object Id";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class IsSystemManaged
				{
					public const string _1033 = "Is System Managed";
				}

				public static class TeamId
				{
					public const string _1033 = "Team";
				}

				public static class TeamTemplateIdentifier
				{
					public const string _1033 = "Team Template Identifier";
				}

				public static class TeamType
				{
					public const string _1033 = "Team Type";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class Versionnumber
				{
					public const string _1033 = "Version number";
				}

				public static class YomiName
				{
					public const string _1033 = "Yomi Name";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string NotificationMessagesOfOwningTeam = "ldv_notificationmessage_team_owningteam";
				public const string NotificationMessagesOfTeam = "ldv_team_ldv_notificationmessage_TeamId";
				public const string NotificationMessageTeamsOfTeam = "ldv_team_ldv_notificationmessageteam_TeamId";
				public const string UsersOfTeam = "new_team_systemuser_Team";
				public const string EmailsOfOwningTeam = "team_email";
				public const string GenericConfigurationsOfOwningTeam = "team_ldv_genericconfiguration";
				public const string NotificationMessageRolesOfOwningTeam = "team_ldv_notificationmessagerole";
				public const string NotificationMessageTeamsOfOwningTeam = "team_ldv_notificationmessageteam";
				public const string NotificationMessageUsersOfOwningTeam = "team_ldv_notificationmessageuser";
				public const string NotificationReadsOfOwningTeam = "team_ldv_notificationread";
				public const string TasksOfOwningTeam = "team_task";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedByDelegate = "lk_team_createdonbehalfby";
				public const string UserAsModifiedByDelegate = "lk_team_modifiedonbehalfby";
				public const string UserAsAdministrator = "lk_teambase_administratorid";
				public const string UserAsCreatedBy = "lk_teambase_createdby";
				public const string UserAsModifiedBy = "lk_teambase_modifiedby";

				public static class Lookups
				{
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsAdministrator = "administratorid";
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsModifiedBy = "modifiedby";
				}
			}

			public static class NToN
			{

				public const string UsersOfteammembership_association = "teammembership_association";
			}
		}

		#endregion

		#endregion
	}

	#endregion

	#endregion

}

