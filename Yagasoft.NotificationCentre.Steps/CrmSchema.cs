//         Project / File: Yagasoft.NotificationCentre.Steps / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed Elsawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Yagasoft.NotificationCentre.Steps
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationMessage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationMessage> NotificationMessageSet
		{
			get
			{
				return this.CreateQuery<NotificationMessage>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="NotificationRead"/> entities.
		/// </summary>
		public System.Linq.IQueryable<NotificationRead> NotificationReadSet
		{
			get
			{
				return this.CreateQuery<NotificationRead>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="User"/> entities.
		/// </summary>
		public System.Linq.IQueryable<User> UserSet
		{
			get
			{
				return this.CreateQuery<User>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		#region Attributes

		[AttributeLogicalName("activitypartyid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityPartyId == null || ActivityPartyId == Guid.Empty) ? base.Id : ActivityPartyId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activitypartyid");
                    base.Id = value;
                } else {
				    ActivityPartyId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? Activity
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Activity");
                if (value != null)
				    SetAttributeValue("activityid", new EntityReference("activitypointer", value.Value));
                else
					SetAttributeValue("activityid", value);
				OnPropertyChanged("Activity");
			}
		}

        public string ActivityName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (EntityReference) backupAttributeCollection["activityid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ActivityPartyId'.<br />
        /// Unique identifier of the activity party.
        /// </summary>
		[AttributeLogicalName("activitypartyid")]
		public Guid? ActivityPartyId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activitypartyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitypartyid"))
				    value = (Guid?) backupAttributeCollection["activitypartyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityPartyId");
                if (value != null)
					SetAttributeValue("activitypartyid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityPartyId");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'AddressUsed'.<br />
        /// Email address to which an email is delivered, and which is associated with the target entity.
        /// </summary>
		[AttributeLogicalName("addressused"), MaxLength(200)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("addressused");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressused"))
				    value = (string) backupAttributeCollection["addressused"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("addressused", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'AddressUsedEmailColumnNumber'.<br />
        /// Email address column number from associated party.
        /// </summary>
		[AttributeLogicalName("addressusedemailcolumnnumber"), InRange("1", "2147483647", typeof(int))]
		public int? Emailcolumnnumberofparty
		{
			get
			{
				var value = GetAttributeValue<int?>("addressusedemailcolumnnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("addressusedemailcolumnnumber"))
				    value = (int?) backupAttributeCollection["addressusedemailcolumnnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Emailcolumnnumberofparty");
					SetAttributeValue("addressusedemailcolumnnumber", value);
				OnPropertyChanged("Emailcolumnnumberofparty");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEmail'.<br />
        /// Information about whether to allow sending email to the activity party.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Information about whether to allow sending faxes to the activity party.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Information about whether to allow phone calls to the lead.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Information about whether to allow sending postal mail to the lead.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowPostalMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPostalMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowPostalMails");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'Effort'.<br />
        /// Amount of effort used by the resource in a service appointment activity.
        /// </summary>
		[AttributeLogicalName("effort"), InRange("0", "1000000000", typeof(double))]
		public double? Effort
		{
			get
			{
				var value = GetAttributeValue<double?>("effort");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("effort"))
				    value = (double?) backupAttributeCollection["effort"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Effort");
					SetAttributeValue("effort", value);
				OnPropertyChanged("Effort");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ExchangeEntryId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("exchangeentryid"), MaxLength(1024)]
		public string ExchangeEntry
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeentryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeentryid"))
				    value = (string) backupAttributeCollection["exchangeentryid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeEntry");
					SetAttributeValue("exchangeentryid", value);
				OnPropertyChanged("ExchangeEntry");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public AppointmentTypeEnum? AppointmentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (AppointmentTypeEnum?) null : (AppointmentTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AppointmentType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("AppointmentType");
			}
		}

        /// <summary>
        ///  
		/// 'IsPartyDeleted'.<br />
        /// Information about whether the underlying entity record is deleted.
        /// </summary>
		[AttributeLogicalName("ispartydeleted")]
		public bool? IsPartyDeleted
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispartydeleted");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ispartydeleted"))
				    value = (bool?) backupAttributeCollection["ispartydeleted"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPartyDeleted");
					SetAttributeValue("ispartydeleted", value);
				OnPropertyChanged("IsPartyDeleted");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity_party.
        /// </summary>
		[AttributeLogicalName("ownerid"), Required]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipationTypeMask'.<br />
        /// Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.
        /// </summary>
		[AttributeLogicalName("participationtypemask")]
		public ParticipationTypeEnum? ParticipationType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("participationtypemask");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participationtypemask"))
				    value = (OptionSetValue) backupAttributeCollection["participationtypemask"];
                return value == null ? (ParticipationTypeEnum?) null : (ParticipationTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ParticipationType");
                if (value != null)
				    SetAttributeValue("participationtypemask", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("participationtypemask", value);
				OnPropertyChanged("ParticipationType");
			}
		}

        /// <summary>
        ///  
		/// 'PartyId'.<br />
        /// Unique identifier of the party associated with the activity.
        /// </summary>
		[AttributeLogicalName("partyid")]
		public EntityReference Party
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Party");
					SetAttributeValue("partyid", value);
				OnPropertyChanged("Party");
			}
		}

        public string PartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("partyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partyid"))
				    value = (EntityReference) backupAttributeCollection["partyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ResourceSpecId'.<br />
        /// Unique identifier of the resource specification for the activity party.
        /// </summary>
		[AttributeLogicalName("resourcespecid")]
		public Guid? ResourceSpecification
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ResourceSpecification");
                if (value != null)
				    SetAttributeValue("resourcespecid", new EntityReference("resourcespec", value.Value));
                else
					SetAttributeValue("resourcespecid", value);
				OnPropertyChanged("ResourceSpecification");
			}
		}

        public string ResourceSpecificationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resourcespecid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resourcespecid"))
				    value = (EntityReference) backupAttributeCollection["resourcespecid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? ScheduledEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledEnd");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("ScheduledEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? ScheduledStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledStart");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("ScheduledStart");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_activity_parties'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_activity_parties"), AttributeLogicalName("activityid")]
		public NotificationMessage NotificationMessageAsActivity
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_notificationmessage_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_notificationmessage_activity_parties", null, value);
				OnPropertyChanged("NotificationMessageAsActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'system_user_activity_parties'
		/// </summary>
		[RelationshipSchemaName("system_user_activity_parties"), AttributeLogicalName("partyid")]
		public User UserAsParty
		{
			get
			{
				return GetRelatedEntity<User>("system_user_activity_parties", null);
			}
			set
			{
				OnPropertyChanging("UserAsParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("system_user_activity_parties", null, value);
				OnPropertyChanged("UserAsParty");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsActivity = new RelationName("NotificationMessageAsActivity");
			public static RelationName UserAsParty = new RelationName("UserAsParty");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsActivity"] = new object[] { "NotificationMessageAsActivity", "ldv_notificationmessage", "activityparty", "activityid", "activityid", "activitypartyid", "activitypartyid", "ldv_notificationmessage_activity_parties", typeof (NotificationMessage) };
			relationProperties["UserAsParty"] = new object[] { "UserAsParty", "systemuser", "activityparty", "systemuserid", "partyid", "activitypartyid", "activitypartyid", "system_user_activity_parties", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ActivityParty(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activitypartyid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPostalMails

		public enum DonotallowPostalMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region AppointmentType

		public enum AppointmentTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsPartyDeleted

		public enum IsPartyDeletedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParticipationType

		public enum ParticipationTypeEnum
		{
			[EnumMember]Sender = 1,
			[EnumMember]ToRecipient = 2,
			[EnumMember]CCRecipient = 3,
			[EnumMember]BCCRecipient = 4,
			[EnumMember]Requiredattendee = 5,
			[EnumMember]Optionalattendee = 6,
			[EnumMember]Organizer = 7,
			[EnumMember]Regarding = 8,
			[EnumMember]Owner = 9,
			[EnumMember]Resource = 10,
			[EnumMember]Customer = 11,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region NotificationMessage

	/// <summary>
	/// 'ldv_notificationmessage'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationmessage")]
	public partial class NotificationMessage : GeneratedEntity<NotificationMessage.RelationName>
	{
		
		public NotificationMessage() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Message";
		public const string SchemaName = "ldv_notificationmessage";
		public const string EntityLogicalName = "ldv_notificationmessage";
		public const int EntityTypeCode = 10021;
		
		#region Attributes

		[AttributeLogicalName("activityid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ActivityId == null || ActivityId == Guid.Empty) ? base.Id : ActivityId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("activityid");
                    base.Id = value;
                } else {
				    ActivityId = value;
                }
			}
		}

        /// <summary>
        /// [MaximumLength=8192] 
		/// 'ActivityAdditionalParams'.<br />
        /// Additional information provided by the external application as JSON. For internal use only.
        /// </summary>
		[AttributeLogicalName("activityadditionalparams"), MaxLength(8192)]
		public string ActivityAdditionalParameters
		{
			get
			{
				var value = GetAttributeValue<string>("activityadditionalparams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityadditionalparams"))
				    value = (string) backupAttributeCollection["activityadditionalparams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityAdditionalParameters");
					SetAttributeValue("activityadditionalparams", value);
				OnPropertyChanged("ActivityAdditionalParameters");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityId'.<br />
        /// Unique identifier of the activity.
        /// </summary>
		[AttributeLogicalName("activityid")]
		public Guid? ActivityId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("activityid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activityid"))
				    value = (Guid?) backupAttributeCollection["activityid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityId");
                if (value != null)
					SetAttributeValue("activityid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ActivityId");
			}
		}

        /// <summary>
        ///  
		/// 'ActivityTypeCode'.<br />
        /// Type of activity.
        /// </summary>
		[AttributeLogicalName("activitytypecode")]
		public string ActivityType
		{
			get
			{
				var value = GetAttributeValue<string>("activitytypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("activitytypecode"))
				    value = (string) backupAttributeCollection["activitytypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActivityType");
					SetAttributeValue("activitytypecode", value);
				OnPropertyChanged("ActivityType");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ActualDurationMinutes'.<br />
        /// Actual duration of the activity in minutes.
        /// </summary>
		[AttributeLogicalName("actualdurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ActualDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("actualdurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualdurationminutes"))
				    value = (int?) backupAttributeCollection["actualdurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualDuration");
					SetAttributeValue("actualdurationminutes", value);
				OnPropertyChanged("ActualDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ActualEnd'.<br />
        /// Actual end time of the activity.
        /// </summary>
		[AttributeLogicalName("actualend")]
		public DateTime? ActualEnd
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualend"))
				    value = (DateTime?) backupAttributeCollection["actualend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualEnd");
					SetAttributeValue("actualend", value);
				OnPropertyChanged("ActualEnd");
			}
		}

        /// <summary>
        ///  
		/// 'ActualStart'.<br />
        /// Actual start time of the activity.
        /// </summary>
		[AttributeLogicalName("actualstart")]
		public DateTime? ActualStart
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("actualstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("actualstart"))
				    value = (DateTime?) backupAttributeCollection["actualstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActualStart");
					SetAttributeValue("actualstart", value);
				OnPropertyChanged("ActualStart");
			}
		}

        /// <summary>
        ///  
		/// 'BCC'.<br />
        /// Blind Carbon-copy (bcc) recipients of the activity.
        /// </summary>
		[AttributeLogicalName("bcc")]
		public ActivityParty[] BCC
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("bcc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("bcc"))
				    collection = (EntityCollection) backupAttributeCollection["bcc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("BCC");
				SetAttributeValue("bcc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("BCC");
			}
		}

        /// <summary>
        ///  
		/// 'CC'.<br />
        /// Carbon-copy (cc) recipients of the activity.
        /// </summary>
		[AttributeLogicalName("cc")]
		public ActivityParty[] CC
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("cc");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("cc"))
				    collection = (EntityCollection) backupAttributeCollection["cc"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("CC");
				SetAttributeValue("cc", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("CC");
			}
		}

        /// <summary>
        ///  
		/// 'Community'.<br />
        /// Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.
        /// </summary>
		[AttributeLogicalName("community")]
		public SocialChannelEnum? SocialChannel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("community");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("community"))
				    value = (OptionSetValue) backupAttributeCollection["community"];
                return value == null ? (SocialChannelEnum?) null : (SocialChannelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("SocialChannel");
                if (value != null)
				    SetAttributeValue("community", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("community", value);
				OnPropertyChanged("SocialChannel");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the activity.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the activity was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? DateCreated
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateCreated");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("DateCreated");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the activitypointer.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Customers'.<br />
        /// Customer with which the activity is associated.
        /// </summary>
		[AttributeLogicalName("customers")]
		public ActivityParty[] Customers
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("customers");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customers"))
				    collection = (EntityCollection) backupAttributeCollection["customers"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Customers");
				SetAttributeValue("customers", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Customers");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryLastAttemptedOn'.<br />
        /// Date and time when the delivery of the activity was last attempted.
        /// </summary>
		[AttributeLogicalName("deliverylastattemptedon")]
		public DateTime? DateDeliveryLastAttempted
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("deliverylastattemptedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliverylastattemptedon"))
				    value = (DateTime?) backupAttributeCollection["deliverylastattemptedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateDeliveryLastAttempted");
					SetAttributeValue("deliverylastattemptedon", value);
				OnPropertyChanged("DateDeliveryLastAttempted");
			}
		}

        /// <summary>
        ///  
		/// 'DeliveryPriorityCode'.<br />
        /// Priority of delivery of the activity to the email server.
        /// </summary>
		[AttributeLogicalName("deliveryprioritycode")]
		public DeliveryPriorityEnum? DeliveryPriority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("deliveryprioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("deliveryprioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["deliveryprioritycode"];
                return value == null ? (DeliveryPriorityEnum?) null : (DeliveryPriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("DeliveryPriority");
                if (value != null)
				    SetAttributeValue("deliveryprioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("deliveryprioritycode", value);
				OnPropertyChanged("DeliveryPriority");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=1048576] 
		/// 'Description'.<br />
        /// Description of the activity.
        /// </summary>
		[AttributeLogicalName("description"), Required, MaxLength(1048576)]
		public string Message
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Message");
					SetAttributeValue("description", value);
				OnPropertyChanged("Message");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'ExchangeItemId'.<br />
        /// The message id of activity which is returned from Exchange Server.
        /// </summary>
		[AttributeLogicalName("exchangeitemid"), MaxLength(200)]
		public string ExchangeItemID
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeitemid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeitemid"))
				    value = (string) backupAttributeCollection["exchangeitemid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeItemID");
					SetAttributeValue("exchangeitemid", value);
				OnPropertyChanged("ExchangeItemID");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the activitypointer with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'ExchangeWebLink'.<br />
        /// Shows the web link of Activity of type email.
        /// </summary>
		[AttributeLogicalName("exchangeweblink"), MaxLength(1250)]
		public string ExchangeWebLink
		{
			get
			{
				var value = GetAttributeValue<string>("exchangeweblink");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangeweblink"))
				    value = (string) backupAttributeCollection["exchangeweblink"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeWebLink");
					SetAttributeValue("exchangeweblink", value);
				OnPropertyChanged("ExchangeWebLink");
			}
		}

        /// <summary>
        ///  
		/// 'From'.<br />
        /// Person who the activity is from.
        /// </summary>
		[AttributeLogicalName("from")]
		public ActivityParty[] From
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("from");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("from"))
				    collection = (EntityCollection) backupAttributeCollection["from"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("From");
				SetAttributeValue("from", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("From");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'InstanceTypeCode'.<br />
        /// Type of instance of a recurring series.
        /// </summary>
		[AttributeLogicalName("instancetypecode")]
		public RecurringInstanceTypeEnum? RecurringInstanceType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("instancetypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("instancetypecode"))
				    value = (OptionSetValue) backupAttributeCollection["instancetypecode"];
                return value == null ? (RecurringInstanceTypeEnum?) null : (RecurringInstanceTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RecurringInstanceType");
                if (value != null)
				    SetAttributeValue("instancetypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("instancetypecode", value);
				OnPropertyChanged("RecurringInstanceType");
			}
		}

        /// <summary>
        ///  
		/// 'IsBilled'.<br />
        /// Information regarding whether the activity was billed as part of resolving a case.
        /// </summary>
		[AttributeLogicalName("isbilled")]
		public bool? IsBilled
		{
			get
			{
				var value = GetAttributeValue<bool?>("isbilled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isbilled"))
				    value = (bool?) backupAttributeCollection["isbilled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsBilled");
					SetAttributeValue("isbilled", value);
				OnPropertyChanged("IsBilled");
			}
		}

        /// <summary>
        ///  
		/// 'IsMapiPrivate'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("ismapiprivate")]
		public bool? IsPrivate
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismapiprivate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ismapiprivate"))
				    value = (bool?) backupAttributeCollection["ismapiprivate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsPrivate");
					SetAttributeValue("ismapiprivate", value);
				OnPropertyChanged("IsPrivate");
			}
		}

        /// <summary>
        ///  
		/// 'IsRegularActivity'.<br />
        /// Information regarding whether the activity is a regular activity type or event type.
        /// </summary>
		[AttributeLogicalName("isregularactivity")]
		public bool? IsRegularActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isregularactivity");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isregularactivity"))
				    value = (bool?) backupAttributeCollection["isregularactivity"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsRegularActivity");
					SetAttributeValue("isregularactivity", value);
				OnPropertyChanged("IsRegularActivity");
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowCreated'.<br />
        /// Information regarding whether the activity was created from a workflow rule.
        /// </summary>
		[AttributeLogicalName("isworkflowcreated")]
		public bool? IsWorkflowCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowcreated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isworkflowcreated"))
				    value = (bool?) backupAttributeCollection["isworkflowcreated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IsWorkflowCreated");
					SetAttributeValue("isworkflowcreated", value);
				OnPropertyChanged("IsWorkflowCreated");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

		[AttributeLogicalName("ldv_contentmodifiedon")]
		public DateTime? ContentModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_contentmodifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_contentmodifiedon"))
				    value = (DateTime?) backupAttributeCollection["ldv_contentmodifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContentModifiedOn");
					SetAttributeValue("ldv_contentmodifiedon", value);
				OnPropertyChanged("ContentModifiedOn");
			}
		}

		[AttributeLogicalName("ldv_isglobalmessage")]
		public bool? GlobalMessage
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isglobalmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isglobalmessage"))
				    value = (bool?) backupAttributeCollection["ldv_isglobalmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GlobalMessage");
					SetAttributeValue("ldv_isglobalmessage", value);
				OnPropertyChanged("GlobalMessage");
			}
		}

		[AttributeLogicalName("ldv_notificationsource"), Required]
		public NotificationSourceEnum? NotificationSource
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_notificationsource");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationsource"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_notificationsource"];
                return value == null ? (NotificationSourceEnum?) null : (NotificationSourceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("NotificationSource");
                if (value != null)
				    SetAttributeValue("ldv_notificationsource", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_notificationsource", value);
				OnPropertyChanged("NotificationSource");
			}
		}

        /// <summary>
        /// [MaximumLength=36] 
		/// 'ldv_RegardingID'.<br />
        /// This should only be used from code when the 'regarding' record is an activity, as the regarding field does not accept activity records.
        /// </summary>
		[AttributeLogicalName("ldv_regardingid"), MaxLength(36)]
		public string RegardingID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingid"))
				    value = (string) backupAttributeCollection["ldv_regardingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingID");
					SetAttributeValue("ldv_regardingid", value);
				OnPropertyChanged("RegardingID");
			}
		}

        /// <summary>
        /// [Range(1, 99999)] 
		/// 'ldv_RegardingTypeCode'.<br />
        /// This should only be used from code when the 'regarding' record is an activity, as the regarding field does not accept activity records.
        /// </summary>
		[AttributeLogicalName("ldv_regardingtypecode"), InRange("1", "99999", typeof(int))]
		public int? RegardingTypeCode
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_regardingtypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingtypecode"))
				    value = (int?) backupAttributeCollection["ldv_regardingtypecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingTypeCode");
					SetAttributeValue("ldv_regardingtypecode", value);
				OnPropertyChanged("RegardingTypeCode");
			}
		}

		[AttributeLogicalName("ldv_roleid")]
		public Guid? Role
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Role");
                if (value != null)
				    SetAttributeValue("ldv_roleid", new EntityReference("role", value.Value));
                else
					SetAttributeValue("ldv_roleid", value);
				OnPropertyChanged("Role");
			}
		}

        public string RoleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_roleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_roleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_roleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_teamid")]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("ldv_teamid", new EntityReference("team", value.Value));
                else
					SetAttributeValue("ldv_teamid", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_teamid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_teamid"))
				    value = (EntityReference) backupAttributeCollection["ldv_teamid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_userid")]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_userid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_userid", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'LeftVoiceMail'.<br />
        /// Left the voice mail
        /// </summary>
		[AttributeLogicalName("leftvoicemail")]
		public bool? LeftVoiceMail
		{
			get
			{
				var value = GetAttributeValue<bool?>("leftvoicemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("leftvoicemail"))
				    value = (bool?) backupAttributeCollection["leftvoicemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LeftVoiceMail");
					SetAttributeValue("leftvoicemail", value);
				OnPropertyChanged("LeftVoiceMail");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of user who last modified the activity.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when activity was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? LastUpdated
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastUpdated");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("LastUpdated");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the activitypointer.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        ///  
		/// 'OptionalAttendees'.<br />
        /// List of optional attendees for the activity.
        /// </summary>
		[AttributeLogicalName("optionalattendees")]
		public ActivityParty[] OptionalAttendees
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("optionalattendees");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("optionalattendees"))
				    collection = (EntityCollection) backupAttributeCollection["optionalattendees"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("OptionalAttendees");
				SetAttributeValue("optionalattendees", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("OptionalAttendees");
			}
		}

        /// <summary>
        ///  
		/// 'Organizer'.<br />
        /// Person who organized the activity.
        /// </summary>
		[AttributeLogicalName("organizer")]
		public ActivityParty[] Organizer
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("organizer");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizer"))
				    collection = (EntityCollection) backupAttributeCollection["organizer"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Organizer");
				SetAttributeValue("organizer", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Organizer");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the activity.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier of the business unit that owns the activity.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team that owns the activity.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user that owns the activity.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Partners'.<br />
        /// Outsource vendor with which activity is associated.
        /// </summary>
		[AttributeLogicalName("partners")]
		public ActivityParty[] OutsourceVendors
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("partners");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("partners"))
				    collection = (EntityCollection) backupAttributeCollection["partners"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("OutsourceVendors");
				SetAttributeValue("partners", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("OutsourceVendors");
			}
		}

        /// <summary>
        ///  
		/// 'PostponeActivityProcessingUntil'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("postponeactivityprocessinguntil")]
		public DateTime? Delayactivityprocessinguntil
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("postponeactivityprocessinguntil"))
				    value = (DateTime?) backupAttributeCollection["postponeactivityprocessinguntil"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Delayactivityprocessinguntil");
					SetAttributeValue("postponeactivityprocessinguntil", value);
				OnPropertyChanged("Delayactivityprocessinguntil");
			}
		}

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Priority of the activity.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityEnum? Priority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("prioritycode"))
				    value = (OptionSetValue) backupAttributeCollection["prioritycode"];
                return value == null ? (PriorityEnum?) null : (PriorityEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Priority");
                if (value != null)
				    SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("prioritycode", value);
				OnPropertyChanged("Priority");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Unique identifier of the Process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'RegardingObjectId'.<br />
        /// Unique identifier of the object with which the activity is associated.
        /// </summary>
		[AttributeLogicalName("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Regarding");
					SetAttributeValue("regardingobjectid", value);
				OnPropertyChanged("Regarding");
			}
		}

        public string RegardingName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("regardingobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("regardingobjectid"))
				    value = (EntityReference) backupAttributeCollection["regardingobjectid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'RequiredAttendees'.<br />
        /// List of required attendees for the activity.
        /// </summary>
		[AttributeLogicalName("requiredattendees")]
		public ActivityParty[] RequiredAttendees
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("requiredattendees");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("requiredattendees"))
				    collection = (EntityCollection) backupAttributeCollection["requiredattendees"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("RequiredAttendees");
				SetAttributeValue("requiredattendees", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("RequiredAttendees");
			}
		}

        /// <summary>
        ///  
		/// 'Resources'.<br />
        /// Users or facility/equipment that are required for the activity.
        /// </summary>
		[AttributeLogicalName("resources")]
		public ActivityParty[] Resources
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("resources");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("resources"))
				    collection = (EntityCollection) backupAttributeCollection["resources"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("Resources");
				SetAttributeValue("resources", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("Resources");
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ScheduledDurationMinutes'.<br />
        /// Scheduled duration of the activity, specified in minutes.
        /// </summary>
		[AttributeLogicalName("scheduleddurationminutes"), InRange("0", "2147483647", typeof(int))]
		public int? ScheduledDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("scheduleddurationminutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduleddurationminutes"))
				    value = (int?) backupAttributeCollection["scheduleddurationminutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ScheduledDuration");
					SetAttributeValue("scheduleddurationminutes", value);
				OnPropertyChanged("ScheduledDuration");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledEnd'.<br />
        /// Scheduled end time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledend")]
		public DateTime? DueDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledend");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledend"))
				    value = (DateTime?) backupAttributeCollection["scheduledend"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DueDate");
					SetAttributeValue("scheduledend", value);
				OnPropertyChanged("DueDate");
			}
		}

        /// <summary>
        ///  
		/// 'ScheduledStart'.<br />
        /// Scheduled start time of the activity.
        /// </summary>
		[AttributeLogicalName("scheduledstart")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("scheduledstart");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("scheduledstart"))
				    value = (DateTime?) backupAttributeCollection["scheduledstart"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("scheduledstart", value);
				OnPropertyChanged("StartDate");
			}
		}

        /// <summary>
        ///  
		/// 'SenderMailboxId'.<br />
        /// Unique identifier of the mailbox associated with the sender of the email message.
        /// </summary>
		[AttributeLogicalName("sendermailboxid")]
		public Guid? SendersMailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SendersMailbox");
                if (value != null)
				    SetAttributeValue("sendermailboxid", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("sendermailboxid", value);
				OnPropertyChanged("SendersMailbox");
			}
		}

        public string SendersMailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sendermailboxid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sendermailboxid"))
				    value = (EntityReference) backupAttributeCollection["sendermailboxid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SentOn'.<br />
        /// Date and time when the activity was sent.
        /// </summary>
		[AttributeLogicalName("senton")]
		public DateTime? DateSent
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("senton");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("senton"))
				    value = (DateTime?) backupAttributeCollection["senton"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DateSent");
					SetAttributeValue("senton", value);
				OnPropertyChanged("DateSent");
			}
		}

        /// <summary>
        ///  
		/// 'SeriesId'.<br />
        /// Uniqueidentifier specifying the id of recurring series of an instance.
        /// </summary>
		[AttributeLogicalName("seriesid")]
		public Guid? SeriesId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("seriesid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("seriesid"))
				    value = (Guid?) backupAttributeCollection["seriesid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SeriesId");
					SetAttributeValue("seriesid", value);
				OnPropertyChanged("SeriesId");
			}
		}

        /// <summary>
        ///  
		/// 'ServiceId'.<br />
        /// Unique identifier of an associated service.
        /// </summary>
		[AttributeLogicalName("serviceid")]
		public Guid? Service
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Service");
                if (value != null)
				    SetAttributeValue("serviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("serviceid", value);
				OnPropertyChanged("Service");
			}
		}

        public string ServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("serviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("serviceid"))
				    value = (EntityReference) backupAttributeCollection["serviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the case record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SortDate'.<br />
        /// Shows the date and time by which the activities are sorted.
        /// </summary>
		[AttributeLogicalName("sortdate")]
		public DateTime? SortDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("sortdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sortdate"))
				    value = (DateTime?) backupAttributeCollection["sortdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SortDate");
					SetAttributeValue("sortdate", value);
				OnPropertyChanged("SortDate");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Unique identifier of the Stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Status of the activity.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public ActivityStatusEnum? ActivityStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (ActivityStatusEnum?) null : (ActivityStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ActivityStatus");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("ActivityStatus");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Reason for the status of the activity.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=400] 
		/// 'Subject'.<br />
        /// Subject associated with the activity.
        /// </summary>
		[AttributeLogicalName("subject"), Required, MaxLength(400)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("subject");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("subject"))
				    value = (string) backupAttributeCollection["subject"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("subject", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'To'.<br />
        /// Person who is the receiver of the activity.
        /// </summary>
		[AttributeLogicalName("to")]
		public ActivityParty[] To
		{
			get
			{
				var collection = GetAttributeValue<EntityCollection>("to");
				if (collection == null && backupAttributeCollection != null && backupAttributeCollection.Contains("to"))
				    collection = (EntityCollection) backupAttributeCollection["to"];
				if (collection != null && collection.Entities != null)
					return collection.Entities.Select(entity => entity.ToEntity<ActivityParty>()).ToArray();
				else
					return null;
			}
			set
			{
				OnPropertyChanging("To");
				SetAttributeValue("to", new EntityCollection(new List<Entity>(value)));
				OnPropertyChanged("To");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the activitypointer.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the activity.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId")]
		public NotificationRead[] NotificationReadsOfNotificationMessage
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationReadsOfNotificationMessage");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_activity_parties'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_activity_parties")]
		public ActivityParty[] ActivityPartysOfActivity
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("ldv_notificationmessage_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfActivity");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("ldv_notificationmessage_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfActivity");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_createdby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_notificationmessage_systemuser_owninguser'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_owninguser"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_notificationmessage_systemuser_owninguser", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_notificationmessage_systemuser_owninguser", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_notificationmessage_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessage_UserId"), AttributeLogicalName("ldv_userid")]
		public User UserAsUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessage_UserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_notificationmessage_UserId", null, value);
				OnPropertyChanged("UserAsUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationReadsOfNotificationMessage = new RelationName("NotificationReadsOfNotificationMessage");
			public static RelationName ActivityPartysOfActivity = new RelationName("ActivityPartysOfActivity");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
			public static RelationName UserAsUser = new RelationName("UserAsUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationReadsOfNotificationMessage"] = new object[] { "NotificationReadsOfNotificationMessage", "ldv_notificationread", "ldv_notificationmessage", "ldv_notificationmessageid", "activityid", "activityid", "activityid", "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", typeof (NotificationRead[]) };
			relationProperties["ActivityPartysOfActivity"] = new object[] { "ActivityPartysOfActivity", "activityparty", "ldv_notificationmessage", "activityid", "activityid", "activityid", "activityid", "ldv_notificationmessage_activity_parties", typeof (ActivityParty[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationmessage", "systemuserid", "createdby", "activityid", "activityid", "ldv_notificationmessage_systemuser_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationmessage", "systemuserid", "createdonbehalfby", "activityid", "activityid", "ldv_notificationmessage_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationmessage", "systemuserid", "modifiedby", "activityid", "activityid", "ldv_notificationmessage_systemuser_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationmessage", "systemuserid", "modifiedonbehalfby", "activityid", "activityid", "ldv_notificationmessage_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationmessage", "systemuserid", "owninguser", "activityid", "activityid", "ldv_notificationmessage_systemuser_owninguser", typeof (User) };
			relationProperties["UserAsUser"] = new object[] { "UserAsUser", "systemuser", "ldv_notificationmessage", "systemuserid", "ldv_userid", "activityid", "activityid", "ldv_systemuser_ldv_notificationmessage_UserId", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationMessage(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["activityid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region ActivityType

		public enum ActivityTypeEnum
		{
			[EnumMember]Fax = 4204,
			[EnumMember]PhoneCall = 4210,
			[EnumMember]Email = 4202,
			[EnumMember]Letter = 4207,
			[EnumMember]Appointment = 4201,
			[EnumMember]ServiceActivity = 4214,
			[EnumMember]OpportunityClose = 4208,
			[EnumMember]OrderClose = 4209,
			[EnumMember]QuoteClose = 4211,
			[EnumMember]CaseResolution = 4206,
			[EnumMember]Task = 4212,
			[EnumMember]CampaignResponse = 4401,
			[EnumMember]CampaignActivity = 4402,
			[EnumMember]BulkOperation = 4406,
			[EnumMember]RecurringAppointment = 4251,
			[EnumMember]NotificationMessage = 10021,
		}

		#endregion
	
		#region SocialChannel

		public enum SocialChannelEnum
		{
			[EnumMember]Facebook = 1,
			[EnumMember]Twitter = 2,
			[EnumMember]Other = 0,
		}

		#endregion
	
		#region DeliveryPriority

		public enum DeliveryPriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region RecurringInstanceType

		public enum RecurringInstanceTypeEnum
		{
			[EnumMember]NotRecurring = 0,
			[EnumMember]RecurringMaster = 1,
			[EnumMember]RecurringInstance = 2,
			[EnumMember]RecurringException = 3,
			[EnumMember]RecurringFutureException = 4,
		}

		#endregion
	
		#region IsBilled

		public enum IsBilledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsRegularActivity

		public enum IsRegularActivityEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsWorkflowCreated

		public enum IsWorkflowCreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GlobalMessage

		public enum GlobalMessageEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region NotificationSource

		public enum NotificationSourceEnum
		{
			[EnumMember]Manual = 1,
			[EnumMember]Email = 2,
			[EnumMember]Task = 3,
			[EnumMember]Other = 999,
		}

		#endregion
	
		#region LeftVoiceMail

		public enum LeftVoiceMailEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Priority

		public enum PriorityEnum
		{
			[EnumMember]Low = 0,
			[EnumMember]Normal = 1,
			[EnumMember]High = 2,
		}

		#endregion
	
		#region ActivityStatus

		public enum ActivityStatusEnum
		{
			[EnumMember]Open = 0,
			[EnumMember]Completed = 1,
			[EnumMember]Canceled = 2,
			[EnumMember]Scheduled = 3,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Draft = 753240000,
			[EnumMember]Open = 1,
			[EnumMember]Completed = 2,
			[EnumMember]Canceled = 3,
			[EnumMember]Scheduled = 4,
		}

		#endregion
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivityType = "activitytypecode";
				public const string SocialChannel = "community";
				public const string DeliveryPriority = "deliveryprioritycode";
				public const string RecurringInstanceType = "instancetypecode";
				public const string IsBilled = "isbilled";
				public const string IsPrivate = "ismapiprivate";
				public const string IsRegularActivity = "isregularactivity";
				public const string IsWorkflowCreated = "isworkflowcreated";
				public const string GlobalMessage = "ldv_isglobalmessage";
				public const string NotificationSource = "ldv_notificationsource";
				public const string LeftVoiceMail = "leftvoicemail";
				public const string Priority = "prioritycode";
				public const string ActivityStatus = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityType 
				{
					public const string Fax_1033 = "Fax";
					public const string PhoneCall_1033 = "Phone Call";
					public const string Email_1033 = "Email";
					public const string Letter_1033 = "Letter";
					public const string Appointment_1033 = "Appointment";
					public const string ServiceActivity_1033 = "Service Activity";
					public const string OpportunityClose_1033 = "Opportunity Close";
					public const string OrderClose_1033 = "Order Close";
					public const string QuoteClose_1033 = "Quote Close";
					public const string CaseResolution_1033 = "Case Resolution";
					public const string Task_1033 = "Task";
					public const string CampaignResponse_1033 = "Campaign Response";
					public const string CampaignActivity_1033 = "Campaign Activity";
					public const string BulkOperation_1033 = "Bulk Operation";
					public const string RecurringAppointment_1033 = "Recurring Appointment";
					public const string NotificationMessage_1033 = "Notification Message";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityType), label, languageCode);
					}
				}

				public static class SocialChannel 
				{
					public const string Facebook_1033 = "Facebook";
					public const string Twitter_1033 = "Twitter";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(SocialChannel), label, languageCode);
					}
				}

				public static class DeliveryPriority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeliveryPriority), label, languageCode);
					}
				}

				public static class RecurringInstanceType 
				{
					public const string NotRecurring_1033 = "Not Recurring";
					public const string RecurringMaster_1033 = "Recurring Master";
					public const string RecurringInstance_1033 = "Recurring Instance";
					public const string RecurringException_1033 = "Recurring Exception";
					public const string RecurringFutureException_1033 = "Recurring Future Exception";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RecurringInstanceType), label, languageCode);
					}
				}

				public static class IsBilled 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsBilled), label, languageCode);
					}
				}

				public static class IsPrivate 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsPrivate), label, languageCode);
					}
				}

				public static class IsRegularActivity 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsRegularActivity), label, languageCode);
					}
				}

				public static class IsWorkflowCreated 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IsWorkflowCreated), label, languageCode);
					}
				}

				public static class GlobalMessage 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GlobalMessage), label, languageCode);
					}
				}

				public static class NotificationSource 
				{
					public const string Manual_1033 = "Manual";
					public const string Email_1033 = "Email";
					public const string Task_1033 = "Task";
					public const string Other_1033 = "Other";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(NotificationSource), label, languageCode);
					}
				}

				public static class LeftVoiceMail 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(LeftVoiceMail), label, languageCode);
					}
				}

				public static class Priority 
				{
					public const string Low_1033 = "Low";
					public const string Normal_1033 = "Normal";
					public const string High_1033 = "High";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Priority), label, languageCode);
					}
				}

				public static class ActivityStatus 
				{
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";
					public const string Scheduled_1033 = "Scheduled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ActivityStatus), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Draft_1033 = "Draft";
					public const string Open_1033 = "Open";
					public const string Completed_1033 = "Completed";
					public const string Canceled_1033 = "Canceled";
					public const string Scheduled_1033 = "Scheduled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string ActivityAdditionalParameters = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityType = "activitytypecode";
			public const string ActualDuration = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string BCC = "bcc";
			public const string CC = "cc";
			public const string SocialChannel = "community";
			public const string CreatedBy = "createdby";
			public const string DateCreated = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string Customers = "customers";
			public const string DateDeliveryLastAttempted = "deliverylastattemptedon";
			public const string DeliveryPriority = "deliveryprioritycode";
			public const string Message = "description";
			public const string ExchangeItemID = "exchangeitemid";
			public const string ExchangeRate = "exchangerate";
			public const string ExchangeWebLink = "exchangeweblink";
			public const string From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string RecurringInstanceType = "instancetypecode";
			public const string IsBilled = "isbilled";
			public const string IsPrivate = "ismapiprivate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ContentModifiedOn = "ldv_contentmodifiedon";
			public const string GlobalMessage = "ldv_isglobalmessage";
			public const string NotificationSource = "ldv_notificationsource";
			public const string RegardingID = "ldv_regardingid";
			public const string RegardingTypeCode = "ldv_regardingtypecode";
			public const string Role = "ldv_roleid";
			public const string Team = "ldv_teamid";
			public const string User = "ldv_userid";
			public const string LeftVoiceMail = "leftvoicemail";
			public const string ModifiedBy = "modifiedby";
			public const string LastUpdated = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string OutsourceVendors = "partners";
			public const string Delayactivityprocessinguntil = "postponeactivityprocessinguntil";
			public const string Priority = "prioritycode";
			public const string Process = "processid";
			public const string Regarding = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string Resources = "resources";
			public const string ScheduledDuration = "scheduleddurationminutes";
			public const string DueDate = "scheduledend";
			public const string StartDate = "scheduledstart";
			public const string SendersMailbox = "sendermailboxid";
			public const string DateSent = "senton";
			public const string SeriesId = "seriesid";
			public const string Service = "serviceid";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string ProcessStage = "stageid";
			public const string ActivityStatus = "statecode";
			public const string StatusReason = "statuscode";
			public const string Title = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string Currency = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string ActivityAdditionalParameters = "ActivityAdditionalParams";
				public const string ActivityId = "ActivityId";
				public const string ActivityType = "ActivityTypeCode";
				public const string ActualDuration = "ActualDurationMinutes";
				public const string ActualEnd = "ActualEnd";
				public const string ActualStart = "ActualStart";
				public const string BCC = "BCC";
				public const string CC = "CC";
				public const string SocialChannel = "Community";
				public const string CreatedBy = "CreatedBy";
				public const string DateCreated = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string Customers = "Customers";
				public const string DateDeliveryLastAttempted = "DeliveryLastAttemptedOn";
				public const string DeliveryPriority = "DeliveryPriorityCode";
				public const string Message = "Description";
				public const string ExchangeItemID = "ExchangeItemId";
				public const string ExchangeRate = "ExchangeRate";
				public const string ExchangeWebLink = "ExchangeWebLink";
				public const string From = "From";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string RecurringInstanceType = "InstanceTypeCode";
				public const string IsBilled = "IsBilled";
				public const string IsPrivate = "IsMapiPrivate";
				public const string IsRegularActivity = "IsRegularActivity";
				public const string IsWorkflowCreated = "IsWorkflowCreated";
				public const string LastOnHoldTime = "LastOnHoldTime";
				public const string ContentModifiedOn = "ldv_ContentModifiedOn";
				public const string GlobalMessage = "ldv_IsGlobalMessage";
				public const string NotificationSource = "ldv_NotificationSource";
				public const string RegardingID = "ldv_RegardingID";
				public const string RegardingTypeCode = "ldv_RegardingTypeCode";
				public const string Role = "ldv_RoleId";
				public const string Team = "ldv_TeamId";
				public const string User = "ldv_UserId";
				public const string LeftVoiceMail = "LeftVoiceMail";
				public const string ModifiedBy = "ModifiedBy";
				public const string LastUpdated = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string OnHoldTimeMinutes = "OnHoldTime";
				public const string OptionalAttendees = "OptionalAttendees";
				public const string Organizer = "Organizer";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string OutsourceVendors = "Partners";
				public const string Delayactivityprocessinguntil = "PostponeActivityProcessingUntil";
				public const string Priority = "PriorityCode";
				public const string Process = "ProcessId";
				public const string Regarding = "RegardingObjectId";
				public const string RequiredAttendees = "RequiredAttendees";
				public const string Resources = "Resources";
				public const string ScheduledDuration = "ScheduledDurationMinutes";
				public const string DueDate = "ScheduledEnd";
				public const string StartDate = "ScheduledStart";
				public const string SendersMailbox = "SenderMailboxId";
				public const string DateSent = "SentOn";
				public const string SeriesId = "SeriesId";
				public const string Service = "ServiceId";
				public const string SLA = "SLAId";
				public const string LastSLAapplied = "SLAInvokedId";
				public const string SortDate = "SortDate";
				public const string ProcessStage = "StageId";
				public const string ActivityStatus = "StateCode";
				public const string StatusReason = "StatusCode";
				public const string Title = "Subject";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string To = "To";
				public const string Currency = "TransactionCurrencyId";
				public const string TraversedPath = "TraversedPath";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ActivityAdditionalParameters
				{
					public const string _1033 = "Activity Additional Parameters";
				}

				public static class ActivityId
				{
					public const string _1033 = "Activity";
				}

				public static class ActivityType
				{
					public const string _1033 = "Activity Type";
				}

				public static class ActualDuration
				{
					public const string _1033 = "Actual Duration";
				}

				public static class ActualEnd
				{
					public const string _1033 = "Actual End";
				}

				public static class ActualStart
				{
					public const string _1033 = "Actual Start";
				}

				public static class BCC
				{
					public const string _1033 = "BCC";
				}

				public static class CC
				{
					public const string _1033 = "CC";
				}

				public static class SocialChannel
				{
					public const string _1033 = "Social Channel";
				}

				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class DateCreated
				{
					public const string _1033 = "Date Created";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class Customers
				{
					public const string _1033 = "Customers";
				}

				public static class DateDeliveryLastAttempted
				{
					public const string _1033 = "Date Delivery Last Attempted";
				}

				public static class DeliveryPriority
				{
					public const string _1033 = "Delivery Priority";
				}

				public static class Message
				{
					public const string _1033 = "Message";
				}

				public static class ExchangeItemID
				{
					public const string _1033 = "Exchange Item ID";
				}

				public static class ExchangeRate
				{
					public const string _1033 = "Exchange Rate";
				}

				public static class ExchangeWebLink
				{
					public const string _1033 = "Exchange WebLink";
				}

				public static class From
				{
					public const string _1033 = "From";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class RecurringInstanceType
				{
					public const string _1033 = "Recurring Instance Type";
				}

				public static class IsBilled
				{
					public const string _1033 = "Is Billed";
				}

				public static class IsPrivate
				{
					public const string _1033 = "Is Private";
				}

				public static class IsRegularActivity
				{
					public const string _1033 = "Is Regular Activity";
				}

				public static class IsWorkflowCreated
				{
					public const string _1033 = "Is Workflow Created";
				}

				public static class LastOnHoldTime
				{
					public const string _1033 = "Last On Hold Time";
				}

				public static class ContentModifiedOn
				{
					public const string _1033 = "Content Modified On";
				}

				public static class GlobalMessage
				{
					public const string _1033 = "Global Message";
				}

				public static class NotificationSource
				{
					public const string _1033 = "Notification Source";
				}

				public static class RegardingID
				{
					public const string _1033 = "Regarding ID";
				}

				public static class RegardingTypeCode
				{
					public const string _1033 = "Regarding Type Code";
				}

				public static class Role
				{
					public const string _1033 = "Role";
				}

				public static class Team
				{
					public const string _1033 = "Team";
				}

				public static class User
				{
					public const string _1033 = "User";
				}

				public static class LeftVoiceMail
				{
					public const string _1033 = "Left Voice Mail";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class LastUpdated
				{
					public const string _1033 = "Last Updated";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class OnHoldTimeMinutes
				{
					public const string _1033 = "On Hold Time (Minutes)";
				}

				public static class OptionalAttendees
				{
					public const string _1033 = "Optional Attendees";
				}

				public static class Organizer
				{
					public const string _1033 = "Organizer";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class OutsourceVendors
				{
					public const string _1033 = "Outsource Vendors";
				}

				public static class Delayactivityprocessinguntil
				{
					public const string _1033 = "Delay activity processing until";
				}

				public static class Priority
				{
					public const string _1033 = "Priority";
				}

				public static class Process
				{
					public const string _1033 = "Process";
				}

				public static class Regarding
				{
					public const string _1033 = "Regarding";
				}

				public static class RequiredAttendees
				{
					public const string _1033 = "Required Attendees";
				}

				public static class Resources
				{
					public const string _1033 = "Resources";
				}

				public static class ScheduledDuration
				{
					public const string _1033 = "Scheduled Duration";
				}

				public static class DueDate
				{
					public const string _1033 = "Due Date";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class SendersMailbox
				{
					public const string _1033 = "Sender\'s Mailbox";
				}

				public static class DateSent
				{
					public const string _1033 = "Date Sent";
				}

				public static class SeriesId
				{
					public const string _1033 = "Series Id";
				}

				public static class Service
				{
					public const string _1033 = "Service";
				}

				public static class SLA
				{
					public const string _1033 = "SLA";
				}

				public static class LastSLAapplied
				{
					public const string _1033 = "Last SLA applied";
				}

				public static class SortDate
				{
					public const string _1033 = "Sort Date";
				}

				public static class ProcessStage
				{
					public const string _1033 = "Process Stage";
				}

				public static class ActivityStatus
				{
					public const string _1033 = "Activity Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class To
				{
					public const string _1033 = "To";
				}

				public static class Currency
				{
					public const string _1033 = "Currency";
				}

				public static class TraversedPath
				{
					public const string _1033 = "Traversed Path";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string NotificationReadsOfNotificationMessage = "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId";
				public const string ActivityPartysOfActivity = "ldv_notificationmessage_activity_parties";
			}
			
			public static class NToOne
			{
				public const string UserAsCreatedBy = "ldv_notificationmessage_systemuser_createdby";
				public const string UserAsCreatedByDelegate = "ldv_notificationmessage_systemuser_createdonbehalfby";
				public const string UserAsModifiedBy = "ldv_notificationmessage_systemuser_modifiedby";
				public const string UserAsModifiedByDelegate = "ldv_notificationmessage_systemuser_modifiedonbehalfby";
				public const string UserAsOwningUser = "ldv_notificationmessage_systemuser_owninguser";
				public const string UserAsUser = "ldv_systemuser_ldv_notificationmessage_UserId";

				public static class Lookups
				{
					public const string UserAsCreatedBy = "createdby";
					public const string UserAsCreatedByDelegate = "createdonbehalfby";
					public const string UserAsModifiedBy = "modifiedby";
					public const string UserAsModifiedByDelegate = "modifiedonbehalfby";
					public const string UserAsOwningUser = "owninguser";
					public const string UserAsUser = "ldv_userid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region NotificationRead

	/// <summary>
	/// 'ldv_notificationread'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_notificationread")]
	public partial class NotificationRead : GeneratedEntity<NotificationRead.RelationName>
	{
		
		public NotificationRead() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Notification Read";
		public const string SchemaName = "ldv_notificationread";
		public const string EntityLogicalName = "ldv_notificationread";
		public const int EntityTypeCode = 10025;
		
		#region Attributes

		[AttributeLogicalName("ldv_notificationreadid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (NotificationReadId == null || NotificationReadId == Guid.Empty) ? base.Id : NotificationReadId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_notificationreadid");
                    base.Id = value;
                } else {
				    NotificationReadId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? ReadOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReadOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("ReadOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_notificationmessageid"), Required]
		public Guid? NotificationMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("NotificationMessage");
                if (value != null)
				    SetAttributeValue("ldv_notificationmessageid", new EntityReference("ldv_notificationmessage", value.Value));
                else
					SetAttributeValue("ldv_notificationmessageid", value);
				OnPropertyChanged("NotificationMessage");
			}
		}

        public string NotificationMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_notificationmessageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationmessageid"))
				    value = (EntityReference) backupAttributeCollection["ldv_notificationmessageid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_notificationreadId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_notificationreadid")]
		public Guid? NotificationReadId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_notificationreadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_notificationreadid"))
				    value = (Guid?) backupAttributeCollection["ldv_notificationreadid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationReadId");
                if (value != null)
					SetAttributeValue("ldv_notificationreadid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("NotificationReadId");
			}
		}

		[AttributeLogicalName("ldv_userid"), Required]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_userid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_userid", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_userid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_userid"))
				    value = (EntityReference) backupAttributeCollection["ldv_userid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Notification Read
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Notification Read
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// N:1, 'ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId"), AttributeLogicalName("ldv_notificationmessageid")]
		public NotificationMessage NotificationMessageAsNotificationMessage
		{
			get
			{
				return GetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null);
			}
			set
			{
				OnPropertyChanging("NotificationMessageAsNotificationMessage");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<NotificationMessage>("ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", null, value);
				OnPropertyChanged("NotificationMessageAsNotificationMessage");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_systemuser_ldv_notificationread_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationread_UserId"), AttributeLogicalName("ldv_userid")]
		public User UserAsUser
		{
			get
			{
				return GetRelatedEntity<User>("ldv_systemuser_ldv_notificationread_UserId", null);
			}
			set
			{
				OnPropertyChanging("UserAsUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("ldv_systemuser_ldv_notificationread_UserId", null, value);
				OnPropertyChanged("UserAsUser");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_createdby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_createdby", null, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_createdonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_createdonbehalfby", null, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_modifiedby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_modifiedby", null, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_ldv_notificationread_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_ldv_notificationread_modifiedonbehalfby", null);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_ldv_notificationread_modifiedonbehalfby", null, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'user_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationread"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get
			{
				return GetRelatedEntity<User>("user_ldv_notificationread", null);
			}
			set
			{
				OnPropertyChanging("UserAsOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_ldv_notificationread", null, value);
				OnPropertyChanged("UserAsOwningUser");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessageAsNotificationMessage = new RelationName("NotificationMessageAsNotificationMessage");
			public static RelationName UserAsUser = new RelationName("UserAsUser");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessageAsNotificationMessage"] = new object[] { "NotificationMessageAsNotificationMessage", "ldv_notificationmessage", "ldv_notificationread", "activityid", "ldv_notificationmessageid", "ldv_notificationreadid", "ldv_notificationreadid", "ldv_ldv_notificationmessage_ldv_notificationread_NotificationMessageId", typeof (NotificationMessage) };
			relationProperties["UserAsUser"] = new object[] { "UserAsUser", "systemuser", "ldv_notificationread", "systemuserid", "ldv_userid", "ldv_notificationreadid", "ldv_notificationreadid", "ldv_systemuser_ldv_notificationread_UserId", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "ldv_notificationread", "systemuserid", "createdby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "ldv_notificationread", "systemuserid", "createdonbehalfby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "ldv_notificationread", "systemuserid", "modifiedby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "ldv_notificationread", "systemuserid", "modifiedonbehalfby", "ldv_notificationreadid", "ldv_notificationreadid", "lk_ldv_notificationread_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "ldv_notificationread", "systemuserid", "owninguser", "ldv_notificationreadid", "ldv_notificationreadid", "user_ldv_notificationread", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public NotificationRead(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_notificationreadid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#region User

	/// <summary>
	/// 'SystemUser'.<br />
	/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuser")]
	public partial class User : GeneratedEntity<User.RelationName>
	{
		
		public User() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "User";
		public const string SchemaName = "SystemUser";
		public const string EntityLogicalName = "systemuser";
		public const int EntityTypeCode = 8;
		
		#region Attributes

		[AttributeLogicalName("systemuserid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (UserId == null || UserId == Guid.Empty) ? base.Id : UserId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    UserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccessMode'.<br />
        /// Type of user.
        /// </summary>
		[AttributeLogicalName("accessmode")]
		public AccessModeEnum? AccessMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accessmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accessmode"))
				    value = (OptionSetValue) backupAttributeCollection["accessmode"];
                return value == null ? (AccessModeEnum?) null : (AccessModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AccessMode");
                if (value != null)
				    SetAttributeValue("accessmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accessmode", value);
				OnPropertyChanged("AccessMode");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addressid"))
				    value = (Guid?) backupAttributeCollection["address1_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ID");
					SetAttributeValue("address1_addressid", value);
				OnPropertyChanged("Address1ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Type of address for address 1, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_addresstypecode"];
                return value == null ? (Address1AddressTypeEnum?) null : (Address1AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1AddressType");
                if (value != null)
				    SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_addresstypecode", value);
				OnPropertyChanged("Address1AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_City'.<br />
        /// City name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_city"), MaxLength(128)]
		public string City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_city"))
				    value = (string) backupAttributeCollection["address1_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("City");
					SetAttributeValue("address1_city", value);
				OnPropertyChanged("City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite"), MaxLength(1000)]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_composite"))
				    value = (string) backupAttributeCollection["address1_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address");
					SetAttributeValue("address1_composite", value);
				OnPropertyChanged("Address");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_Country'.<br />
        /// Country/region name in address 1.
        /// </summary>
		[AttributeLogicalName("address1_country"), MaxLength(128)]
		public string CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_country"))
				    value = (string) backupAttributeCollection["address1_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CountryRegion");
					SetAttributeValue("address1_country", value);
				OnPropertyChanged("CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_County'.<br />
        /// County name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_county"), MaxLength(128)]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_county"))
				    value = (string) backupAttributeCollection["address1_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1County");
					SetAttributeValue("address1_county", value);
				OnPropertyChanged("Address1County");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Fax'.<br />
        /// Fax number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_fax"), MaxLength(64)]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_fax"))
				    value = (string) backupAttributeCollection["address1_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Fax");
					SetAttributeValue("address1_fax", value);
				OnPropertyChanged("Address1Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Latitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_latitude"))
				    value = (double?) backupAttributeCollection["address1_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Latitude");
					SetAttributeValue("address1_latitude", value);
				OnPropertyChanged("Address1Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line1'.<br />
        /// First line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line1"), MaxLength(1024)]
		public string Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line1"))
				    value = (string) backupAttributeCollection["address1_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street1");
					SetAttributeValue("address1_line1", value);
				OnPropertyChanged("Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line2'.<br />
        /// Second line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line2"), MaxLength(1024)]
		public string Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line2"))
				    value = (string) backupAttributeCollection["address1_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street2");
					SetAttributeValue("address1_line2", value);
				OnPropertyChanged("Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address1_Line3'.<br />
        /// Third line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line3"), MaxLength(1024)]
		public string Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line3"))
				    value = (string) backupAttributeCollection["address1_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Street3");
					SetAttributeValue("address1_line3", value);
				OnPropertyChanged("Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Longitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_longitude"))
				    value = (double?) backupAttributeCollection["address1_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Longitude");
					SetAttributeValue("address1_longitude", value);
				OnPropertyChanged("Address1Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address1_Name'.<br />
        /// Name to enter for address 1.
        /// </summary>
		[AttributeLogicalName("address1_name"), MaxLength(100)]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_name"))
				    value = (string) backupAttributeCollection["address1_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Name");
					SetAttributeValue("address1_name", value);
				OnPropertyChanged("Address1Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostalCode'.<br />
        /// ZIP Code or postal code for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postalcode"), MaxLength(40)]
		public string ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postalcode"))
				    value = (string) backupAttributeCollection["address1_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ZIPPostalCode");
					SetAttributeValue("address1_postalcode", value);
				OnPropertyChanged("ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Post office box number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox"), MaxLength(40)]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postofficebox"))
				    value = (string) backupAttributeCollection["address1_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PostOfficeBox");
					SetAttributeValue("address1_postofficebox", value);
				OnPropertyChanged("Address1PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Method of shipment for address 1.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_shippingmethodcode"];
                return value == null ? (Address1ShippingMethodEnum?) null : (Address1ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1ShippingMethod");
                if (value != null)
				    SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_shippingmethodcode", value);
				OnPropertyChanged("Address1ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address1_StateOrProvince'.<br />
        /// State or province for address 1.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince"), MaxLength(128)]
		public string StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_stateorprovince"))
				    value = (string) backupAttributeCollection["address1_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StateProvince");
					SetAttributeValue("address1_stateorprovince", value);
				OnPropertyChanged("StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'Address1_Telephone1'.<br />
        /// First telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone1"), MaxLength(64)]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone1"))
				    value = (string) backupAttributeCollection["address1_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MainPhone");
					SetAttributeValue("address1_telephone1", value);
				OnPropertyChanged("MainPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Second telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone2"), MaxLength(50)]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone2"))
				    value = (string) backupAttributeCollection["address1_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherPhone");
					SetAttributeValue("address1_telephone2", value);
				OnPropertyChanged("OtherPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Third telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone3"), MaxLength(50)]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone3"))
				    value = (string) backupAttributeCollection["address1_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Pager");
					SetAttributeValue("address1_telephone3", value);
				OnPropertyChanged("Pager");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 1.
        /// </summary>
		[AttributeLogicalName("address1_upszone"), MaxLength(4)]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_upszone"))
				    value = (string) backupAttributeCollection["address1_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UPSZone");
					SetAttributeValue("address1_upszone", value);
				OnPropertyChanged("Address1UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_utcoffset"))
				    value = (int?) backupAttributeCollection["address1_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UTCOffset");
					SetAttributeValue("address1_utcoffset", value);
				OnPropertyChanged("Address1UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addressid"))
				    value = (Guid?) backupAttributeCollection["address2_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ID");
					SetAttributeValue("address2_addressid", value);
				OnPropertyChanged("Address2ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Type of address for address 2, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_addresstypecode"];
                return value == null ? (Address2AddressTypeEnum?) null : (Address2AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2AddressType");
                if (value != null)
				    SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_addresstypecode", value);
				OnPropertyChanged("Address2AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_City'.<br />
        /// City name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_city"), MaxLength(128)]
		public string OtherCity
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_city"))
				    value = (string) backupAttributeCollection["address2_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCity");
					SetAttributeValue("address2_city", value);
				OnPropertyChanged("OtherCity");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite"), MaxLength(1000)]
		public string OtherAddress
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_composite"))
				    value = (string) backupAttributeCollection["address2_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherAddress");
					SetAttributeValue("address2_composite", value);
				OnPropertyChanged("OtherAddress");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_Country'.<br />
        /// Country/region name in address 2.
        /// </summary>
		[AttributeLogicalName("address2_country"), MaxLength(128)]
		public string OtherCountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_country"))
				    value = (string) backupAttributeCollection["address2_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherCountryRegion");
					SetAttributeValue("address2_country", value);
				OnPropertyChanged("OtherCountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_County'.<br />
        /// County name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_county"), MaxLength(128)]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_county"))
				    value = (string) backupAttributeCollection["address2_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2County");
					SetAttributeValue("address2_county", value);
				OnPropertyChanged("Address2County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Fax'.<br />
        /// Fax number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_fax"), MaxLength(50)]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_fax"))
				    value = (string) backupAttributeCollection["address2_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Fax");
					SetAttributeValue("address2_fax", value);
				OnPropertyChanged("Address2Fax");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Latitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_latitude"))
				    value = (double?) backupAttributeCollection["address2_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Latitude");
					SetAttributeValue("address2_latitude", value);
				OnPropertyChanged("Address2Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line1'.<br />
        /// First line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line1"), MaxLength(1024)]
		public string OtherStreet1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line1"))
				    value = (string) backupAttributeCollection["address2_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet1");
					SetAttributeValue("address2_line1", value);
				OnPropertyChanged("OtherStreet1");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line2'.<br />
        /// Second line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line2"), MaxLength(1024)]
		public string OtherStreet2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line2"))
				    value = (string) backupAttributeCollection["address2_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet2");
					SetAttributeValue("address2_line2", value);
				OnPropertyChanged("OtherStreet2");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'Address2_Line3'.<br />
        /// Third line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line3"), MaxLength(1024)]
		public string OtherStreet3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line3"))
				    value = (string) backupAttributeCollection["address2_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStreet3");
					SetAttributeValue("address2_line3", value);
				OnPropertyChanged("OtherStreet3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Longitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_longitude"))
				    value = (double?) backupAttributeCollection["address2_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Longitude");
					SetAttributeValue("address2_longitude", value);
				OnPropertyChanged("Address2Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_Name'.<br />
        /// Name to enter for address 2.
        /// </summary>
		[AttributeLogicalName("address2_name"), MaxLength(100)]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_name"))
				    value = (string) backupAttributeCollection["address2_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Name");
					SetAttributeValue("address2_name", value);
				OnPropertyChanged("Address2Name");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostalCode'.<br />
        /// ZIP Code or postal code for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postalcode"), MaxLength(40)]
		public string OtherZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postalcode"))
				    value = (string) backupAttributeCollection["address2_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherZIPPostalCode");
					SetAttributeValue("address2_postalcode", value);
				OnPropertyChanged("OtherZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=40] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Post office box number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox"), MaxLength(40)]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postofficebox"))
				    value = (string) backupAttributeCollection["address2_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PostOfficeBox");
					SetAttributeValue("address2_postofficebox", value);
				OnPropertyChanged("Address2PostOfficeBox");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Method of shipment for address 2.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_shippingmethodcode"];
                return value == null ? (Address2ShippingMethodEnum?) null : (Address2ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2ShippingMethod");
                if (value != null)
				    SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_shippingmethodcode", value);
				OnPropertyChanged("Address2ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Address2_StateOrProvince'.<br />
        /// State or province for address 2.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince"), MaxLength(128)]
		public string OtherStateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_stateorprovince"))
				    value = (string) backupAttributeCollection["address2_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherStateProvince");
					SetAttributeValue("address2_stateorprovince", value);
				OnPropertyChanged("OtherStateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// First telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone1"), MaxLength(50)]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone1"))
				    value = (string) backupAttributeCollection["address2_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone1");
					SetAttributeValue("address2_telephone1", value);
				OnPropertyChanged("Address2Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Second telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone2"), MaxLength(50)]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone2"))
				    value = (string) backupAttributeCollection["address2_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone2");
					SetAttributeValue("address2_telephone2", value);
				OnPropertyChanged("Address2Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Third telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone3"), MaxLength(50)]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone3"))
				    value = (string) backupAttributeCollection["address2_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone3");
					SetAttributeValue("address2_telephone3", value);
				OnPropertyChanged("Address2Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 2.
        /// </summary>
		[AttributeLogicalName("address2_upszone"), MaxLength(4)]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_upszone"))
				    value = (string) backupAttributeCollection["address2_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UPSZone");
					SetAttributeValue("address2_upszone", value);
				OnPropertyChanged("Address2UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_utcoffset"))
				    value = (int?) backupAttributeCollection["address2_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UTCOffset");
					SetAttributeValue("address2_utcoffset", value);
				OnPropertyChanged("Address2UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'ApplicationId'.<br />
        /// The identifier for the application. This is used to access data in another application.
        /// </summary>
		[AttributeLogicalName("applicationid")]
		public Guid? ApplicationID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("applicationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationid"))
				    value = (Guid?) backupAttributeCollection["applicationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationID");
					SetAttributeValue("applicationid", value);
				OnPropertyChanged("ApplicationID");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'ApplicationIdUri'.<br />
        /// The URI used as a unique logical identifier for the external app. This can be used to validate the application.
        /// </summary>
		[AttributeLogicalName("applicationiduri"), MaxLength(1024)]
		public string ApplicationIDURI
		{
			get
			{
				var value = GetAttributeValue<string>("applicationiduri");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("applicationiduri"))
				    value = (string) backupAttributeCollection["applicationiduri"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ApplicationIDURI");
					SetAttributeValue("applicationiduri", value);
				OnPropertyChanged("ApplicationIDURI");
			}
		}

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// This is the application directory object Id.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("azureactivedirectoryobjectid"))
				    value = (Guid?) backupAttributeCollection["azureactivedirectoryobjectid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AzureADObjectID");
					SetAttributeValue("azureactivedirectoryobjectid", value);
				OnPropertyChanged("AzureADObjectID");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("BusinessUnit");
                if (value != null)
				    SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("businessunitid", value);
				OnPropertyChanged("BusinessUnit");
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businessunitid"))
				    value = (EntityReference) backupAttributeCollection["businessunitid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CalendarId'.<br />
        /// Fiscal calendar associated with the user.
        /// </summary>
		[AttributeLogicalName("calendarid")]
		public Guid? Calendar
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Calendar");
                if (value != null)
				    SetAttributeValue("calendarid", new EntityReference("calendar", value.Value));
                else
					SetAttributeValue("calendarid", value);
				OnPropertyChanged("Calendar");
			}
		}

        public string CalendarName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("calendarid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("calendarid"))
				    value = (EntityReference) backupAttributeCollection["calendarid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CALType'.<br />
        /// License type of user.
        /// </summary>
		[AttributeLogicalName("caltype")]
		public LicenseTypeEnum? LicenseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caltype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("caltype"))
				    value = (OptionSetValue) backupAttributeCollection["caltype"];
                return value == null ? (LicenseTypeEnum?) null : (LicenseTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LicenseType");
                if (value != null)
				    SetAttributeValue("caltype", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("caltype", value);
				OnPropertyChanged("LicenseType");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the systemuser.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'DefaultFiltersPopulated'.<br />
        /// Indicates if default outlook filters have been populated.
        /// </summary>
		[AttributeLogicalName("defaultfilterspopulated")]
		public bool? DefaultFiltersPopulated
		{
			get
			{
				var value = GetAttributeValue<bool?>("defaultfilterspopulated");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultfilterspopulated"))
				    value = (bool?) backupAttributeCollection["defaultfilterspopulated"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultFiltersPopulated");
					SetAttributeValue("defaultfilterspopulated", value);
				OnPropertyChanged("DefaultFiltersPopulated");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMailbox'.<br />
        /// Select the mailbox associated with this user.
        /// </summary>
		[AttributeLogicalName("defaultmailbox")]
		public Guid? Mailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Mailbox");
                if (value != null)
				    SetAttributeValue("defaultmailbox", new EntityReference("mailbox", value.Value));
                else
					SetAttributeValue("defaultmailbox", value);
				OnPropertyChanged("Mailbox");
			}
		}

        public string MailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultmailbox"))
				    value = (EntityReference) backupAttributeCollection["defaultmailbox"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=200] 
		/// 'DefaultOdbFolderName'.<br />
        /// Type a default folder name for the user's OneDrive For Business location.
        /// </summary>
		[AttributeLogicalName("defaultodbfoldername"), MaxLength(200)]
		public string DefaultOneDriveforBusinessFolderName
		{
			get
			{
				var value = GetAttributeValue<string>("defaultodbfoldername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultodbfoldername"))
				    value = (string) backupAttributeCollection["defaultodbfoldername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultOneDriveforBusinessFolderName");
					SetAttributeValue("defaultodbfoldername", value);
				OnPropertyChanged("DefaultOneDriveforBusinessFolderName");
			}
		}

        /// <summary>
        /// [MaximumLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the user.
        /// </summary>
		[AttributeLogicalName("disabledreason"), MaxLength(500)]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("disabledreason"))
				    value = (string) backupAttributeCollection["disabledreason"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisabledReason");
					SetAttributeValue("disabledreason", value);
				OnPropertyChanged("DisabledReason");
			}
		}

        /// <summary>
        ///  
		/// 'DisplayInServiceViews'.<br />
        /// Whether to display the user in service views.
        /// </summary>
		[AttributeLogicalName("displayinserviceviews")]
		public bool? DisplayinServiceViews
		{
			get
			{
				var value = GetAttributeValue<bool?>("displayinserviceviews");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("displayinserviceviews"))
				    value = (bool?) backupAttributeCollection["displayinserviceviews"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DisplayinServiceViews");
					SetAttributeValue("displayinserviceviews", value);
				OnPropertyChanged("DisplayinServiceViews");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'DomainName'.<br />
        /// Active Directory domain of which the user is a member.
        /// </summary>
		[AttributeLogicalName("domainname"), MaxLength(1024)]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("domainname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("domainname"))
				    value = (string) backupAttributeCollection["domainname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserName");
					SetAttributeValue("domainname", value);
				OnPropertyChanged("UserName");
			}
		}

        /// <summary>
        ///  
		/// 'EmailRouterAccessApproval'.<br />
        /// Shows the status of the primary email address.
        /// </summary>
		[AttributeLogicalName("emailrouteraccessapproval")]
		public PrimaryEmailStatusEnum? PrimaryEmailStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailrouteraccessapproval");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailrouteraccessapproval"))
				    value = (OptionSetValue) backupAttributeCollection["emailrouteraccessapproval"];
                return value == null ? (PrimaryEmailStatusEnum?) null : (PrimaryEmailStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmailStatus");
                if (value != null)
				    SetAttributeValue("emailrouteraccessapproval", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("emailrouteraccessapproval", value);
				OnPropertyChanged("PrimaryEmailStatus");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EmployeeId'.<br />
        /// Employee identifier for the user.
        /// </summary>
		[AttributeLogicalName("employeeid"), MaxLength(100)]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("employeeid"))
				    value = (string) backupAttributeCollection["employeeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Employee");
					SetAttributeValue("employeeid", value);
				OnPropertyChanged("Employee");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the systemuser with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'FirstName'.<br />
        /// First name of the user.
        /// </summary>
		[AttributeLogicalName("firstname"), Required, MaxLength(64)]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstname"))
				    value = (string) backupAttributeCollection["firstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FirstName");
					SetAttributeValue("firstname", value);
				OnPropertyChanged("FirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'FullName'.<br />
        /// Full name of the user.
        /// </summary>
		[AttributeLogicalName("fullname"), MaxLength(200)]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullname"))
				    value = (string) backupAttributeCollection["fullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FullName");
					SetAttributeValue("fullname", value);
				OnPropertyChanged("FullName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'GovernmentId'.<br />
        /// Government identifier for the user.
        /// </summary>
		[AttributeLogicalName("governmentid"), MaxLength(100)]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("governmentid"))
				    value = (string) backupAttributeCollection["governmentid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Government");
					SetAttributeValue("governmentid", value);
				OnPropertyChanged("Government");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'HomePhone'.<br />
        /// Home phone number for the user.
        /// </summary>
		[AttributeLogicalName("homephone"), MaxLength(50)]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("homephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("homephone"))
				    value = (string) backupAttributeCollection["homephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomePhone");
					SetAttributeValue("homephone", value);
				OnPropertyChanged("HomePhone");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailDeliveryMethod'.<br />
        /// Incoming email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("incomingemaildeliverymethod")]
		public IncomingEmailDeliveryMethodEnum? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("incomingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["incomingemaildeliverymethod"];
                return value == null ? (IncomingEmailDeliveryMethodEnum?) null : (IncomingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("IncomingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("incomingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("incomingemaildeliverymethod", value);
				OnPropertyChanged("IncomingEmailDeliveryMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'InternalEMailAddress'.<br />
        /// Internal email address for the user.
        /// </summary>
		[AttributeLogicalName("internalemailaddress"), MaxLength(100)]
		public string PrimaryEmail
		{
			get
			{
				var value = GetAttributeValue<string>("internalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("internalemailaddress"))
				    value = (string) backupAttributeCollection["internalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimaryEmail");
					SetAttributeValue("internalemailaddress", value);
				OnPropertyChanged("PrimaryEmail");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'InviteStatusCode'.<br />
        /// User invitation status.
        /// </summary>
		[AttributeLogicalName("invitestatuscode"), Required]
		public InvitationStatusEnum? InvitationStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invitestatuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("invitestatuscode"))
				    value = (OptionSetValue) backupAttributeCollection["invitestatuscode"];
                return value == null ? (InvitationStatusEnum?) null : (InvitationStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("InvitationStatus");
                if (value != null)
				    SetAttributeValue("invitestatuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("invitestatuscode", value);
				OnPropertyChanged("InvitationStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information about whether the user is enabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? Status
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isdisabled"))
				    value = (bool?) backupAttributeCollection["isdisabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Status");
					SetAttributeValue("isdisabled", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailAddressApprovedByO365Admin'.<br />
        /// Shows the status of approval of the email address by O365 Admin.
        /// </summary>
		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public bool? EmailAddressO365AdminApprovalStatus
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isemailaddressapprovedbyo365admin"))
				    value = (bool?) backupAttributeCollection["isemailaddressapprovedbyo365admin"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddressO365AdminApprovalStatus");
					SetAttributeValue("isemailaddressapprovedbyo365admin", value);
				OnPropertyChanged("EmailAddressO365AdminApprovalStatus");
			}
		}

        /// <summary>
        ///  
		/// 'IsIntegrationUser'.<br />
        /// Check if user is an integration user.
        /// </summary>
		[AttributeLogicalName("isintegrationuser")]
		public bool? Integrationusermode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isintegrationuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isintegrationuser"))
				    value = (bool?) backupAttributeCollection["isintegrationuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Integrationusermode");
					SetAttributeValue("isintegrationuser", value);
				OnPropertyChanged("Integrationusermode");
			}
		}

        /// <summary>
        ///  
		/// 'IsLicensed'.<br />
        /// Information about whether the user is licensed.
        /// </summary>
		[AttributeLogicalName("islicensed")]
		public bool? UserLicensed
		{
			get
			{
				var value = GetAttributeValue<bool?>("islicensed");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("islicensed"))
				    value = (bool?) backupAttributeCollection["islicensed"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicensed");
					SetAttributeValue("islicensed", value);
				OnPropertyChanged("UserLicensed");
			}
		}

        /// <summary>
        ///  
		/// 'IsSyncWithDirectory'.<br />
        /// Information about whether the user is synced with the directory.
        /// </summary>
		[AttributeLogicalName("issyncwithdirectory")]
		public bool? UserSynced
		{
			get
			{
				var value = GetAttributeValue<bool?>("issyncwithdirectory");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("issyncwithdirectory"))
				    value = (bool?) backupAttributeCollection["issyncwithdirectory"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserSynced");
					SetAttributeValue("issyncwithdirectory", value);
				OnPropertyChanged("UserSynced");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'JobTitle'.<br />
        /// Job title of the user.
        /// </summary>
		[AttributeLogicalName("jobtitle"), MaxLength(100)]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("jobtitle"))
				    value = (string) backupAttributeCollection["jobtitle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("JobTitle");
					SetAttributeValue("jobtitle", value);
				OnPropertyChanged("JobTitle");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=64] 
		/// 'LastName'.<br />
        /// Last name of the user.
        /// </summary>
		[AttributeLogicalName("lastname"), Required, MaxLength(64)]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastname"))
				    value = (string) backupAttributeCollection["lastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastName");
					SetAttributeValue("lastname", value);
				OnPropertyChanged("LastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'MiddleName'.<br />
        /// Middle name of the user.
        /// </summary>
		[AttributeLogicalName("middlename"), MaxLength(50)]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("middlename"))
				    value = (string) backupAttributeCollection["middlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MiddleName");
					SetAttributeValue("middlename", value);
				OnPropertyChanged("MiddleName");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'MobileAlertEMail'.<br />
        /// Mobile alert email address for the user.
        /// </summary>
		[AttributeLogicalName("mobilealertemail"), MaxLength(100)]
		public string MobileAlertEmail
		{
			get
			{
				var value = GetAttributeValue<string>("mobilealertemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilealertemail"))
				    value = (string) backupAttributeCollection["mobilealertemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobileAlertEmail");
					SetAttributeValue("mobilealertemail", value);
				OnPropertyChanged("MobileAlertEmail");
			}
		}

        /// <summary>
        ///  
		/// 'MobileOfflineProfileId'.<br />
        /// Items contained with a particular SystemUser.
        /// </summary>
		[AttributeLogicalName("mobileofflineprofileid")]
		public Guid? MobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MobileOfflineProfile");
                if (value != null)
				    SetAttributeValue("mobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
					SetAttributeValue("mobileofflineprofileid", value);
				OnPropertyChanged("MobileOfflineProfile");
			}
		}

        public string MobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobileofflineprofileid"))
				    value = (EntityReference) backupAttributeCollection["mobileofflineprofileid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=64] 
		/// 'MobilePhone'.<br />
        /// Mobile phone number for the user.
        /// </summary>
		[AttributeLogicalName("mobilephone"), MaxLength(64)]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilephone"))
				    value = (string) backupAttributeCollection["mobilephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobilePhone");
					SetAttributeValue("mobilephone", value);
				OnPropertyChanged("MobilePhone");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the systemuser.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("new_team")]
		public Guid? Team
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Team");
                if (value != null)
				    SetAttributeValue("new_team", new EntityReference("team", value.Value));
                else
					SetAttributeValue("new_team", value);
				OnPropertyChanged("Team");
			}
		}

        public string TeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("new_team");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("new_team"))
				    value = (EntityReference) backupAttributeCollection["new_team"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=50] 
		/// 'NickName'.<br />
        /// Nickname of the user.
        /// </summary>
		[AttributeLogicalName("nickname"), MaxLength(50)]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nickname"))
				    value = (string) backupAttributeCollection["nickname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Nickname");
					SetAttributeValue("nickname", value);
				OnPropertyChanged("Nickname");
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the user.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("organizationid"))
				    value = (Guid?) backupAttributeCollection["organizationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Organization");
					SetAttributeValue("organizationid", value);
				OnPropertyChanged("Organization");
			}
		}

        /// <summary>
        ///  
		/// 'OutgoingEmailDeliveryMethod'.<br />
        /// Outgoing email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public OutgoingEmailDeliveryMethodEnum? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("outgoingemaildeliverymethod");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("outgoingemaildeliverymethod"))
				    value = (OptionSetValue) backupAttributeCollection["outgoingemaildeliverymethod"];
                return value == null ? (OutgoingEmailDeliveryMethodEnum?) null : (OutgoingEmailDeliveryMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("OutgoingEmailDeliveryMethod");
                if (value != null)
				    SetAttributeValue("outgoingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("outgoingemaildeliverymethod", value);
				OnPropertyChanged("OutgoingEmailDeliveryMethod");
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ParentSystemUserId'.<br />
        /// Unique identifier of the manager of the user.
        /// </summary>
		[AttributeLogicalName("parentsystemuserid")]
		public Guid? Manager
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Manager");
                if (value != null)
				    SetAttributeValue("parentsystemuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("parentsystemuserid", value);
				OnPropertyChanged("Manager");
			}
		}

        public string ManagerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["parentsystemuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportHi'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passporthi"), InRange("0", "1000000000", typeof(int))]
		public int? PassportHi
		{
			get
			{
				var value = GetAttributeValue<int?>("passporthi");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passporthi"))
				    value = (int?) backupAttributeCollection["passporthi"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportHi");
					SetAttributeValue("passporthi", value);
				OnPropertyChanged("PassportHi");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportLo'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passportlo"), InRange("0", "1000000000", typeof(int))]
		public int? PassportLo
		{
			get
			{
				var value = GetAttributeValue<int?>("passportlo");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("passportlo"))
				    value = (int?) backupAttributeCollection["passportlo"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PassportLo");
					SetAttributeValue("passportlo", value);
				OnPropertyChanged("PassportLo");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'PersonalEMailAddress'.<br />
        /// Personal email address of the user.
        /// </summary>
		[AttributeLogicalName("personalemailaddress"), MaxLength(100)]
		public string Email2
		{
			get
			{
				var value = GetAttributeValue<string>("personalemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("personalemailaddress"))
				    value = (string) backupAttributeCollection["personalemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email2");
					SetAttributeValue("personalemailaddress", value);
				OnPropertyChanged("Email2");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'PhotoUrl'.<br />
        /// URL for the Website on which a photo of the user is located.
        /// </summary>
		[AttributeLogicalName("photourl"), MaxLength(200)]
		public string PhotoURL
		{
			get
			{
				var value = GetAttributeValue<string>("photourl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("photourl"))
				    value = (string) backupAttributeCollection["photourl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PhotoURL");
					SetAttributeValue("photourl", value);
				OnPropertyChanged("PhotoURL");
			}
		}

        /// <summary>
        ///  
		/// 'PositionId'.<br />
        /// User's position in hierarchical security model.
        /// </summary>
		[AttributeLogicalName("positionid")]
		public Guid? Position
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Position");
                if (value != null)
				    SetAttributeValue("positionid", new EntityReference("position", value.Value));
                else
					SetAttributeValue("positionid", value);
				OnPropertyChanged("Position");
			}
		}

        public string PositionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("positionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("positionid"))
				    value = (EntityReference) backupAttributeCollection["positionid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredAddressCode'.<br />
        /// Preferred address for the user.
        /// </summary>
		[AttributeLogicalName("preferredaddresscode")]
		public PreferredAddressEnum? PreferredAddress
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredaddresscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredaddresscode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredaddresscode"];
                return value == null ? (PreferredAddressEnum?) null : (PreferredAddressEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredAddress");
                if (value != null)
				    SetAttributeValue("preferredaddresscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredaddresscode", value);
				OnPropertyChanged("PreferredAddress");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEmailCode'.<br />
        /// Preferred email address for the user.
        /// </summary>
		[AttributeLogicalName("preferredemailcode")]
		public PreferredEmailEnum? PreferredEmail
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredemailcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredemailcode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredemailcode"];
                return value == null ? (PreferredEmailEnum?) null : (PreferredEmailEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredEmail");
                if (value != null)
				    SetAttributeValue("preferredemailcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredemailcode", value);
				OnPropertyChanged("PreferredEmail");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredPhoneCode'.<br />
        /// Preferred phone number for the user.
        /// </summary>
		[AttributeLogicalName("preferredphonecode")]
		public PreferredPhoneEnum? PreferredPhone
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredphonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredphonecode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredphonecode"];
                return value == null ? (PreferredPhoneEnum?) null : (PreferredPhoneEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredPhone");
                if (value != null)
				    SetAttributeValue("preferredphonecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredphonecode", value);
				OnPropertyChanged("PreferredPhone");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the user.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultQueue");
                if (value != null)
				    SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
					SetAttributeValue("queueid", value);
				OnPropertyChanged("DefaultQueue");
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("queueid"))
				    value = (EntityReference) backupAttributeCollection["queueid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Salutation'.<br />
        /// Salutation for correspondence with the user.
        /// </summary>
		[AttributeLogicalName("salutation"), MaxLength(20)]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salutation"))
				    value = (string) backupAttributeCollection["salutation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Salutation");
					SetAttributeValue("salutation", value);
				OnPropertyChanged("Salutation");
			}
		}

        /// <summary>
        ///  
		/// 'SetupUser'.<br />
        /// Check if user is a setup user.
        /// </summary>
		[AttributeLogicalName("setupuser")]
		public bool? RestrictedAccessMode
		{
			get
			{
				var value = GetAttributeValue<bool?>("setupuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("setupuser"))
				    value = (bool?) backupAttributeCollection["setupuser"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RestrictedAccessMode");
					SetAttributeValue("setupuser", value);
				OnPropertyChanged("RestrictedAccessMode");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'SharePointEmailAddress'.<br />
        /// SharePoint Work Email Address
        /// </summary>
		[AttributeLogicalName("sharepointemailaddress"), MaxLength(1024)]
		public string SharePointEmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("sharepointemailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharepointemailaddress"))
				    value = (string) backupAttributeCollection["sharepointemailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SharePointEmailAddress");
					SetAttributeValue("sharepointemailaddress", value);
				OnPropertyChanged("SharePointEmailAddress");
			}
		}

        /// <summary>
        ///  
		/// 'SiteId'.<br />
        /// Site at which the user is located.
        /// </summary>
		[AttributeLogicalName("siteid")]
		public Guid? Site
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Site");
                if (value != null)
				    SetAttributeValue("siteid", new EntityReference("site", value.Value));
                else
					SetAttributeValue("siteid", value);
				OnPropertyChanged("Site");
			}
		}

        public string SiteName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("siteid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("siteid"))
				    value = (EntityReference) backupAttributeCollection["siteid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Skills'.<br />
        /// Skill set of the user.
        /// </summary>
		[AttributeLogicalName("skills"), MaxLength(100)]
		public string Skills
		{
			get
			{
				var value = GetAttributeValue<string>("skills");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("skills"))
				    value = (string) backupAttributeCollection["skills"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Skills");
					SetAttributeValue("skills", value);
				OnPropertyChanged("Skills");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier for the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? UserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("systemuserid"))
				    value = (Guid?) backupAttributeCollection["systemuserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserId");
                if (value != null)
					SetAttributeValue("systemuserid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("UserId");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// Unique identifier of the territory to which the user is assigned.
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Territory");
                if (value != null)
				    SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
					SetAttributeValue("territoryid", value);
				OnPropertyChanged("Territory");
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'Title'.<br />
        /// Title of the user.
        /// </summary>
		[AttributeLogicalName("title"), MaxLength(128)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("title"))
				    value = (string) backupAttributeCollection["title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("title", value);
				OnPropertyChanged("Title");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the systemuser.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'UserLicenseType'.<br />
        /// Shows the type of user license.
        /// </summary>
		[AttributeLogicalName("userlicensetype"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? UserLicenseType
		{
			get
			{
				var value = GetAttributeValue<int?>("userlicensetype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("userlicensetype"))
				    value = (int?) backupAttributeCollection["userlicensetype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UserLicenseType");
					SetAttributeValue("userlicensetype", value);
				OnPropertyChanged("UserLicenseType");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the user.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Versionnumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("Versionnumber");
			}
		}

        /// <summary>
        /// [MaximumLength=1024] 
		/// 'WindowsLiveID'.<br />
        /// Windows Live ID
        /// </summary>
		[AttributeLogicalName("windowsliveid"), MaxLength(1024)]
		public string WindowsLiveID
		{
			get
			{
				var value = GetAttributeValue<string>("windowsliveid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("windowsliveid"))
				    value = (string) backupAttributeCollection["windowsliveid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WindowsLiveID");
					SetAttributeValue("windowsliveid", value);
				OnPropertyChanged("WindowsLiveID");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YammerEmailAddress'.<br />
        /// User's Yammer login email address
        /// </summary>
		[AttributeLogicalName("yammeremailaddress"), MaxLength(200)]
		public string YammerEmail
		{
			get
			{
				var value = GetAttributeValue<string>("yammeremailaddress");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeremailaddress"))
				    value = (string) backupAttributeCollection["yammeremailaddress"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerEmail");
					SetAttributeValue("yammeremailaddress", value);
				OnPropertyChanged("YammerEmail");
			}
		}

        /// <summary>
        /// [MaximumLength=128] 
		/// 'YammerUserId'.<br />
        /// User's Yammer ID
        /// </summary>
		[AttributeLogicalName("yammeruserid"), MaxLength(128)]
		public string YammerUserID
		{
			get
			{
				var value = GetAttributeValue<string>("yammeruserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yammeruserid"))
				    value = (string) backupAttributeCollection["yammeruserid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YammerUserID");
					SetAttributeValue("yammeruserid", value);
				OnPropertyChanged("YammerUserID");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiFirstName'.<br />
        /// Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifirstname"), MaxLength(64)]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifirstname"))
				    value = (string) backupAttributeCollection["yomifirstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFirstName");
					SetAttributeValue("yomifirstname", value);
				OnPropertyChanged("YomiFirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'YomiFullName'.<br />
        /// Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifullname"), MaxLength(200)]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifullname"))
				    value = (string) backupAttributeCollection["yomifullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFullName");
					SetAttributeValue("yomifullname", value);
				OnPropertyChanged("YomiFullName");
			}
		}

        /// <summary>
        /// [MaximumLength=64] 
		/// 'YomiLastName'.<br />
        /// Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomilastname"), MaxLength(64)]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomilastname"))
				    value = (string) backupAttributeCollection["yomilastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiLastName");
					SetAttributeValue("yomilastname", value);
				OnPropertyChanged("YomiLastName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'YomiMiddleName'.<br />
        /// Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomimiddlename"), MaxLength(50)]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomimiddlename"))
				    value = (string) backupAttributeCollection["yomimiddlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiMiddleName");
					SetAttributeValue("yomimiddlename", value);
				OnPropertyChanged("YomiMiddleName");
			}
		}

		#endregion

		#region Relationships

		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_createdby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdby")]
		public NotificationMessage[] NotificationMessagesOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdby", null, value);
				OnPropertyChanged("NotificationMessagesOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_createdonbehalfby")]
		public NotificationMessage[] NotificationMessagesOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationMessagesOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_modifiedby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedby")]
		public NotificationMessage[] NotificationMessagesOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedby", null, value);
				OnPropertyChanged("NotificationMessagesOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_modifiedonbehalfby")]
		public NotificationMessage[] NotificationMessagesOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationMessagesOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_notificationmessage_systemuser_owninguser'
		/// </summary>
		[RelationshipSchemaName("ldv_notificationmessage_systemuser_owninguser")]
		public NotificationMessage[] NotificationMessagesOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_owninguser", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_notificationmessage_systemuser_owninguser", null, value);
				OnPropertyChanged("NotificationMessagesOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_notificationmessage_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationmessage_UserId")]
		public NotificationMessage[] NotificationMessagesOfUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationMessage>("ldv_systemuser_ldv_notificationmessage_UserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationMessagesOfUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationMessage>("ldv_systemuser_ldv_notificationmessage_UserId", null, value);
				OnPropertyChanged("NotificationMessagesOfUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_systemuser_ldv_notificationread_UserId'
		/// </summary>
		[RelationshipSchemaName("ldv_systemuser_ldv_notificationread_UserId")]
		public NotificationRead[] NotificationReadsOfUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("ldv_systemuser_ldv_notificationread_UserId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("ldv_systemuser_ldv_notificationread_UserId", null, value);
				OnPropertyChanged("NotificationReadsOfUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdby")]
		public NotificationRead[] NotificationReadsOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdby", null, value);
				OnPropertyChanged("NotificationReadsOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_createdonbehalfby")]
		public NotificationRead[] NotificationReadsOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_createdonbehalfby", null, value);
				OnPropertyChanged("NotificationReadsOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedby")]
		public NotificationRead[] NotificationReadsOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedby", null, value);
				OnPropertyChanged("NotificationReadsOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_ldv_notificationread_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_ldv_notificationread_modifiedonbehalfby")]
		public NotificationRead[] NotificationReadsOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedonbehalfby", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("lk_ldv_notificationread_modifiedonbehalfby", null, value);
				OnPropertyChanged("NotificationReadsOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedByDelegate
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfCreatedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedBy
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfModifiedBy");
			}
		}
		
		/// <summary>
		/// 1:N, 'system_user_activity_parties'
		/// </summary>
		[RelationshipSchemaName("system_user_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("system_user_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("system_user_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_ldv_notificationread'
		/// </summary>
		[RelationshipSchemaName("user_ldv_notificationread")]
		public NotificationRead[] NotificationReadsOfOwningUser
		{
			get
			{
				var enumerable = GetRelatedEntities<NotificationRead>("user_ldv_notificationread", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("NotificationReadsOfOwningUser");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<NotificationRead>("user_ldv_notificationread", null, value);
				OnPropertyChanged("NotificationReadsOfOwningUser");
			}
		}
		
		/// <summary>
		/// 1:N, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfManager
		{
			get
			{
				var enumerable = GetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("UsersOfManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("UsersOfManager");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedByDelegate");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedByDelegate");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsCreatedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsCreatedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get
			{
				return GetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsModifiedBy");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsModifiedBy");
			}
		}
		
		/// <summary>
		/// N:1, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentsystemuserid")]
		public User UserAsManager
		{
			get
			{
				return GetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("UserAsManager");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("UserAsManager");
			}
		}
		
		public static class RelationNames {
			public static RelationName NotificationMessagesOfCreatedBy = new RelationName("NotificationMessagesOfCreatedBy");
			public static RelationName NotificationMessagesOfCreatedByDelegate = new RelationName("NotificationMessagesOfCreatedByDelegate");
			public static RelationName NotificationMessagesOfModifiedBy = new RelationName("NotificationMessagesOfModifiedBy");
			public static RelationName NotificationMessagesOfModifiedByDelegate = new RelationName("NotificationMessagesOfModifiedByDelegate");
			public static RelationName NotificationMessagesOfOwningUser = new RelationName("NotificationMessagesOfOwningUser");
			public static RelationName NotificationMessagesOfUser = new RelationName("NotificationMessagesOfUser");
			public static RelationName NotificationReadsOfUser = new RelationName("NotificationReadsOfUser");
			public static RelationName NotificationReadsOfCreatedBy = new RelationName("NotificationReadsOfCreatedBy");
			public static RelationName NotificationReadsOfCreatedByDelegate = new RelationName("NotificationReadsOfCreatedByDelegate");
			public static RelationName NotificationReadsOfModifiedBy = new RelationName("NotificationReadsOfModifiedBy");
			public static RelationName NotificationReadsOfModifiedByDelegate = new RelationName("NotificationReadsOfModifiedByDelegate");
			public static RelationName UsersOfCreatedByDelegate = new RelationName("UsersOfCreatedByDelegate");
			public static RelationName UsersOfModifiedByDelegate = new RelationName("UsersOfModifiedByDelegate");
			public static RelationName UsersOfCreatedBy = new RelationName("UsersOfCreatedBy");
			public static RelationName UsersOfModifiedBy = new RelationName("UsersOfModifiedBy");
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName NotificationReadsOfOwningUser = new RelationName("NotificationReadsOfOwningUser");
			public static RelationName UsersOfManager = new RelationName("UsersOfManager");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsManager = new RelationName("UserAsManager");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["NotificationMessagesOfCreatedBy"] = new object[] { "NotificationMessagesOfCreatedBy", "ldv_notificationmessage", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_createdby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfCreatedByDelegate"] = new object[] { "NotificationMessagesOfCreatedByDelegate", "ldv_notificationmessage", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_createdonbehalfby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfModifiedBy"] = new object[] { "NotificationMessagesOfModifiedBy", "ldv_notificationmessage", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_modifiedby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfModifiedByDelegate"] = new object[] { "NotificationMessagesOfModifiedByDelegate", "ldv_notificationmessage", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_modifiedonbehalfby", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfOwningUser"] = new object[] { "NotificationMessagesOfOwningUser", "ldv_notificationmessage", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "ldv_notificationmessage_systemuser_owninguser", typeof (NotificationMessage[]) };
			relationProperties["NotificationMessagesOfUser"] = new object[] { "NotificationMessagesOfUser", "ldv_notificationmessage", "systemuser", "ldv_userid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_notificationmessage_UserId", typeof (NotificationMessage[]) };
			relationProperties["NotificationReadsOfUser"] = new object[] { "NotificationReadsOfUser", "ldv_notificationread", "systemuser", "ldv_userid", "systemuserid", "systemuserid", "systemuserid", "ldv_systemuser_ldv_notificationread_UserId", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfCreatedBy"] = new object[] { "NotificationReadsOfCreatedBy", "ldv_notificationread", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_createdby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfCreatedByDelegate"] = new object[] { "NotificationReadsOfCreatedByDelegate", "ldv_notificationread", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_createdonbehalfby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfModifiedBy"] = new object[] { "NotificationReadsOfModifiedBy", "ldv_notificationread", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_modifiedby", typeof (NotificationRead[]) };
			relationProperties["NotificationReadsOfModifiedByDelegate"] = new object[] { "NotificationReadsOfModifiedByDelegate", "ldv_notificationread", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_ldv_notificationread_modifiedonbehalfby", typeof (NotificationRead[]) };
			relationProperties["UsersOfCreatedByDelegate"] = new object[] { "UsersOfCreatedByDelegate", "systemuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User[]) };
			relationProperties["UsersOfModifiedByDelegate"] = new object[] { "UsersOfModifiedByDelegate", "systemuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User[]) };
			relationProperties["UsersOfCreatedBy"] = new object[] { "UsersOfCreatedBy", "systemuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User[]) };
			relationProperties["UsersOfModifiedBy"] = new object[] { "UsersOfModifiedBy", "systemuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User[]) };
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "systemuser", "partyid", "systemuserid", "systemuserid", "systemuserid", "system_user_activity_parties", typeof (ActivityParty[]) };
			relationProperties["NotificationReadsOfOwningUser"] = new object[] { "NotificationReadsOfOwningUser", "ldv_notificationread", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "user_ldv_notificationread", typeof (NotificationRead[]) };
			relationProperties["UsersOfManager"] = new object[] { "UsersOfManager", "systemuser", "systemuser", "parentsystemuserid", "systemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "systemuser", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "systemuser", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "systemuser", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "systemuser", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User) };
			relationProperties["UserAsManager"] = new object[] { "UserAsManager", "systemuser", "systemuser", "systemuserid", "parentsystemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public User(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["systemuserid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#region AccessMode

		public enum AccessModeEnum
		{
			[EnumMember]ReadWrite = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Read = 2,
			[EnumMember]SupportUser = 3,
			[EnumMember]Noninteractive = 4,
			[EnumMember]DelegatedAdmin = 5,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region LicenseType

		public enum LicenseTypeEnum
		{
			[EnumMember]Professional = 0,
			[EnumMember]Administrative = 1,
			[EnumMember]Basic = 2,
			[EnumMember]DeviceProfessional = 3,
			[EnumMember]DeviceBasic = 4,
			[EnumMember]Essential = 5,
			[EnumMember]DeviceEssential = 6,
			[EnumMember]Enterprise = 7,
			[EnumMember]DeviceEnterprise = 8,
			[EnumMember]Sales = 9,
			[EnumMember]Service = 10,
			[EnumMember]FieldService = 11,
			[EnumMember]ProjectService = 12,
		}

		#endregion
	
		#region DefaultFiltersPopulated

		public enum DefaultFiltersPopulatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DisplayinServiceViews

		public enum DisplayinServiceViewsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PrimaryEmailStatus

		public enum PrimaryEmailStatusEnum
		{
			[EnumMember]Empty = 0,
			[EnumMember]Approved = 1,
			[EnumMember]PendingApproval = 2,
			[EnumMember]Rejected = 3,
		}

		#endregion
	
		#region IncomingEmailDeliveryMethod

		public enum IncomingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
			[EnumMember]ForwardMailbox = 3,
		}

		#endregion
	
		#region InvitationStatus

		public enum InvitationStatusEnum
		{
			[EnumMember]InvitationNotSent = 0,
			[EnumMember]Invited = 1,
			[EnumMember]InvitationNearExpired = 2,
			[EnumMember]InvitationExpired = 3,
			[EnumMember]InvitationAccepted = 4,
			[EnumMember]InvitationRejected = 5,
			[EnumMember]InvitationRevoked = 6,
		}

		#endregion
	
		#region IsActiveDirectoryUser

		public enum IsActiveDirectoryUserEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Disabled = 1,
			[EnumMember]Enabled = 0,
		}

		#endregion
	
		#region EmailAddressO365AdminApprovalStatus

		public enum EmailAddressO365AdminApprovalStatusEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Integrationusermode

		public enum IntegrationusermodeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserLicensed

		public enum UserLicensedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region UserSynced

		public enum UserSyncedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region OutgoingEmailDeliveryMethod

		public enum OutgoingEmailDeliveryMethodEnum
		{
			[EnumMember]None = 0,
			[EnumMember]MicrosoftDynamics365forOutlook = 1,
			[EnumMember]ServerSideSynchronizationorEmailRouter = 2,
		}

		#endregion
	
		#region PreferredAddress

		public enum PreferredAddressEnum
		{
			[EnumMember]MailingAddress = 1,
			[EnumMember]OtherAddress = 2,
		}

		#endregion
	
		#region PreferredEmail

		public enum PreferredEmailEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region PreferredPhone

		public enum PreferredPhoneEnum
		{
			[EnumMember]MainPhone = 1,
			[EnumMember]OtherPhone = 2,
			[EnumMember]HomePhone = 3,
			[EnumMember]MobilePhone = 4,
		}

		#endregion
	
		#region RestrictedAccessMode

		public enum RestrictedAccessModeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#endregion

		#region Metadata

		#endregion
	}

	#endregion

	#endregion

}

